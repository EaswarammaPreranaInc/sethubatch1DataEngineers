#program 1
# Find  outputs (Home  work)
class c1:
    x = 10
    def __init__(self):
	    self . y = 20
a = c1()
b = c1()
a . x += 1
b . y += 1
print(a . x)
print(a . y)
print(b . x)
print(b . y)
print(c1 . x)
print(a . __dict__)
print(b . __dict__)
print(c1 . __dict__)

output
11
20
10
21
10
{'y': 20, 'x': 11}
{'y': 21}
{'__module__': '__main__', '__firstlineno__': 2, 'x': 10, '__init__': <function c1.__init__ at 0x000002390DAC3E20>,
'__static_attributes__': ('y',), '__dict__': <attribute '__dict__' of 'c1' objects>,
'__weakref__': <attribute '__weakref__' of 'c1' objects>, '__doc__': None}


#program 2
# Find  outputs (Home  work)
class  c1:
	x = 10
	def  m1(self):
		self . x = 20
a = c1()
a . m1()
print(c1 . x)
print(a . x)

output
10
20


#program 3
# Find  outputs  (Home  work)
class   c1:
	x = 10
	def  __init__(self):
		self . y = 20
	@classmethod
	def   m1(cls):
		cls . x = 30
		cls . y = 40
# End  of  the  class
a = c1()
b = c1()
c1 . m1()
print(a . x)
print(a . y)
print(b . x)
print(b . y)
print(c1 . x , c1 . y)
#print(cls . x , cls . y) #cls cant be used outside the program
#print(self . x , self . y) #self is not defined

output
30
20
30
20
30 40

#program 4
#  Find  outputs
class   c1:
	@staticmethod
	def   m1(self):
		print(self)
#  End  of  the   class
c1 . m1(25)
a = c1()
a . m1(35)

output
25
35

#program 5
#  Find  outputs
#  Find  outputs
class   c1:
	def   m1(self):
		print(self)
#  End  of  the   class
c1 . m1(25)
a = c1()
a . m1()
#a . m1(35) # c1.m1() takes 1 positional argument but 2 were given

output
25
<__main__.c1 object at 0x0000013DA1BA6A50>


#program 6
#  Find  outputs
class   c1:
	@staticmethod
	def   m1(self):
		print('static  method')
		print(self)
	def   m1(self):
		print('instance  method')
		print(self)
#  End  of  the   class
c1 . m1(25)
a = c1()
a . m1()

output
instance  method
25
instance  method
<__main__.c1 object at 0x0000027DB2276A50>


#program 7
# How  to  access  static  variable  in  different  ways  ?
class   c1:
	x = 25
	def   __init__(self):
		print(c1 . x) # How  to  print  static  variable  'x'
		print(self . x) # How  to  print  static  variable  'x'  in  another  way
		#print(x) #  Error :  No local variable   'x'
	def   m1(self):
		print(c1 . x) # How  to  print  static  variable  'x'
		print(self . x) # How  to  print  static  variable  'x'  in  another  way
		#print(cls . x) #  Error  :   No   cls  in  m1()  method
	@classmethod
	def   m2(cls):
		print(c1 . x) # How  to  print  static  variable  'x'
		print(cls . x) # How  to  print  static  variable  'x'  in  another  way
		#print(self . x) #  Error  :  No  self  on  m2()  method
	@staticmethod
	def   m3():
		print(c1 . x) # How  to  print  static  variable  'x'
		#print(cls . x) #  Error :  No cls  in  m3()  method
		#print(self . x) #  Error  :  No  self  in  m3()  method
# End  of  the  class
a =  c1()
print(c1 . x) # How  to  print  static  variable  'x'
print(a . x) # How  to  print  static  variable  'x'  in  another  way
#print(x) #  Error :   No  global  variable  'x'  in the program
#print(self . x) #  Error  :   No  self  outside  the  class
#print(cls . x) #   Error :  No  cls  outside  the class
a . m1() # How  to  call  method  m1()
c1 . m2() # How  to  call  method  m2()
c1 . m3() # How  to  call  method  m3()

output
25
25
25
25
25
25
25
25
25


#program 8 
# How  to  add  static  variable  to  the  class  at  different  locations  of  the  program ?
class   c1:
	a = 10  	# How  to  add  static  variable  'a'  with  value  10
	def    __init__(self):
		c1 . b = 20 # How  to  add  static  variable  'b'  with  value  20
		self. c = 30 # How  to  add  instance  variable  'c'  with  value  30
		#cls . k = 25 #  Error  :   No  cls  in  constructor
	def   m1(self):
		c1 . d = 40 # How  to  add  static  variable  'd'  with  value  40
		self . e = 50 # How  to  add  instance  variable  'e'  with  value  50
	@classmethod
	def   m2(cls):
		c1 . f = 60 # How  to  add  static  variable  'f'  with  value  60
		cls . g = 70 # How  to  add  static  variable  'g'  with  value  70  in  another  way
		#self . k = 25 #  Error :  No  self  in  m2()  method
	@staticmethod
	def   m3():
		c1 . h = 80 # How  to  add  static  variable  'h'  with  value  80
		#self . k = 25 #  Error :  No  self  in  m3()  method
		#cls . k = 35 #  Error :  No  cls  in  m3()  method
#End  of  the  class
print('Begin')
print(c1 . __dict__)  #  {'a' : 10}
print()
print()
x = c1()  #  Object  is  initialized  with  c = 30  by  constructor
print('Constructor')
print(c1 . __dict__)   #  {'a' : 10 , 'b' : 20}
print()
print()
x . m1()
print('Instance  method  m1')
print(c1 .__dict__)   #  {'a' : 10 , 'b' : 20 , 'd' : 40}
print()
print()
c1 . m2()
print('class  method   m2')
print(c1 . __dict__)   #  {'a' : 10 , 'b' : 20 , 'd' : 40 , 'f' : 60 , 'g' : 70}
print()
print()
c1 . m3()
print('static   method   m3')
print(c1 . __dict__)  #  {'a' : 10 , 'b' : 20 , 'd' : 40 , 'f' : 60 , 'g' : 70 , 'h' : 80}
print()
print()
c1 . i = 90 # How  to  add  static  variable  'i'  with  value  90
x . j = 100 # How  to  add  instance  variable  'j'  with  value  100
print('Outside  the  class')
print(c1 . __dict__)   #  {'a' : 10 , 'b' : 20 , 'd' : 40 , 'f' : 60 , 'g' : 70 , 'h' : 80 , 'i' : 90}
print()
print()
print("Object  'x' ")
print(x . __dict__)  #  {'c' : 30 , 'e' :50 , 'j' : 100}

#static  variable  --->  a =  10 ,  b =  20 ,  d =  40 , f =  60 ,  g =  70 ,  h =  80 , i = 90
#Object 'x'  --->  c =  30 ,  e = 50 ,  j =  100

output
Begin
{'__module__': '__main__', '__firstlineno__': 179, 'a': 10, '__init__': <function c1.__init__ at 0x000001D3524E3E20>, 'm1': <function c1.m1 at 0x000001D3524E3F60>, 'm2': <classmethod(<function c1.m2 at 0x000001D3524EC040>)>, 'm3': <staticmethod(<function c1.m3 at 0x000001D3524EC0E0>)>, '__static_attributes__': ('c', 'e'), '__dict__': <attribute '__dict__' of 'c1' objects>, '__weakref__': <attribute '__weakref__' of 'c1' objects>, '__doc__': None}


Constructor
{'__module__': '__main__', '__firstlineno__': 179, 'a': 10, '__init__': <function c1.__init__ at 0x000001D3524E3E20>, 'm1': <function c1.m1 at 0x000001D3524E3F60>, 'm2': <classmethod(<function c1.m2 at 0x000001D3524EC040>)>, 'm3': <staticmethod(<function c1.m3 at 0x000001D3524EC0E0>)>, '__static_attributes__': ('c', 'e'), '__dict__': <attribute '__dict__' of 'c1' objects>, '__weakref__': <attribute '__weakref__' of 'c1' objects>, '__doc__': None, 'b': 20}


Instance  method  m1
{'__module__': '__main__', '__firstlineno__': 179, 'a': 10, '__init__': <function c1.__init__ at 0x000001D3524E3E20>, 'm1': <function c1.m1 at 0x000001D3524E3F60>, 'm2': <classmethod(<function c1.m2 at 0x000001D3524EC040>)>, 'm3': <staticmethod(<function c1.m3 at 0x000001D3524EC0E0>)>, '__static_attributes__': ('c', 'e'), '__dict__': <attribute '__dict__' of 'c1' objects>, '__weakref__': <attribute '__weakref__' of 'c1' objects>, '__doc__': None, 'b': 20, 'd': 40}


class  method   m2
{'__module__': '__main__', '__firstlineno__': 179, 'a': 10, '__init__': <function c1.__init__ at 0x000001D3524E3E20>, 'm1': <function c1.m1 at 0x000001D3524E3F60>, 'm2': <classmethod(<function c1.m2 at 0x000001D3524EC040>)>, 'm3': <staticmethod(<function c1.m3 at 0x000001D3524EC0E0>)>, '__static_attributes__': ('c', 'e'), '__dict__': <attribute '__dict__' of 'c1' objects>, '__weakref__': <attribute '__weakref__' of 'c1' objects>, '__doc__': None, 'b': 20, 'd': 40, 'f': 60, 'g': 70}


static   method   m3
{'__module__': '__main__', '__firstlineno__': 179, 'a': 10, '__init__': <function c1.__init__ at 0x000001D3524E3E20>, 'm1': <function c1.m1 at 0x000001D3524E3F60>, 'm2': <classmethod(<function c1.m2 at 0x000001D3524EC040>)>, 'm3': <staticmethod(<function c1.m3 at 0x000001D3524EC0E0>)>, '__static_attributes__': ('c', 'e'), '__dict__': <attribute '__dict__' of 'c1' objects>, '__weakref__': <attribute '__weakref__' of 'c1' objects>, '__doc__': None, 'b': 20, 'd': 40, 'f': 60, 'g': 70, 'h': 80}


Outside  the  class
{'__module__': '__main__', '__firstlineno__': 179, 'a': 10, '__init__': <function c1.__init__ at 0x000001D3524E3E20>, 'm1': <function c1.m1 at 0x000001D3524E3F60>, 'm2': <classmethod(<function c1.m2 at 0x000001D3524EC040>)>, 'm3': <staticmethod(<function c1.m3 at 0x000001D3524EC0E0>)>, '__static_attributes__': ('c', 'e'), '__dict__': <attribute '__dict__' of 'c1' objects>, '__weakref__': <attribute '__weakref__' of 'c1' objects>, '__doc__': None, 'b': 20, 'd': 40, 'f': 60, 'g': 70, 'h': 80, 'i': 90}


Object  'x'
{'c': 30, 'e': 50, 'j': 100}


#program 9
# Find  outputs  (Home  work)
class  c1:
        a , b , c  = range(1 , 4)
#end of the class
print(c1 . a) # How  to  print  variable  'a'
print(c1 . b) # How  to  print  variable  'b'
print(c1 . c) # How  to  print  variable  'c'

#output
1
2
3


#program 10
# What  are  the  outputs  if  inputs  are  10 , 20 , 30 , 40 , 50 , 60 , 70 (Home  work)
class   Test:
	@classmethod
	def  get1(cls):
		cls . x = int(input('Enter  any  number    :  '))
	def  get2(self):
		self . y = int(input('Enter  any  number  :  '))
		self . z = int(input('Enter  any  number  :  '))
	def   compute(self):
		Test . x += 1
		self . y  += 1
		self . z  += 1
		self . x  += 1
	def    disp(self):
		print(Test . x , self . y , self . z ,  self . x , sep = '\t')
# End  of  the  class
Test . get1()
a = Test()
b = Test()
c = Test()
a . get2()
b . get2()
c . get2()
a . compute()
b . compute()
c . compute()
a . disp()
b . disp()
c . disp()

output
Enter  any  number    :  10
Enter  any  number  :  20
Enter  any  number  :  30
Enter  any  number  :  40
Enter  any  number  :  50
Enter  any  number  :  60
Enter  any  number  :  70
13      21      31      12
13      41      51      13
13      61      71      14



#program 11

Write  a  program  to  add  two  Vector  objects
1) What  are  the  names  of  objects ?  --->  x , y   and  z
2) What  are  the  names  of   lists  held  by  each  object ?  --->   x .  a , y . a  , z . a
3) How  to  access  elements  of  1st  list ?  --->  x . a[i]
    How  to  access  elements  of  2nd  list ?  --->  y . a[i]
4) How  to  access  static  variable  'n' ?  --->  vector . n

class  vector:
	@staticmethod
	def get1():
		vector . n = int(input('How  many  elements  : ')) # How  to  read  number  of  elements  into  variable  'n'
	def get2(self):
		self . d = eval(input('Enter a list : '))# How  to  read  the  list  into  the  object
	def add(self , x , y):
		 self . d = []
		 for  i  in  range(vector . n):
				self . d . append(x . d[i] + y . d[i])  # How  add  the  lists  held  by  objects  'x'  and  'y'  and  store  the  results  in  list  held  by  owner  object
vector . get1() # How  to  call  get1()  method
a = vector()
a . get2() # How  to  read  the  list  into  1st  object  'a'
b = vector()
b . get2()  # How  to  read  the  list  into  2nd  object  'b'
c = vector()
c . add(a , b)  # How  to  add  the  lists  held  by  objects  'a'  and  'b'  and  store  the  results  in  list  of  3rd  object  'c'
print('Addition  results  :  '  , c.d)  # How  to  print  the  list  of  3rd   object

output
How  many  elements  : 3
Enter a list : [10,20,30]
Enter a list : [20,30,40]
Addition  results  :   [30, 50, 70]

#program 12
#Write  a  program  to  print  only  static  variables  but  not  environment  variables  of   classname . __dict__
#Hint:  Use  startswith()  and  endswith()  methods

class  c1:
	x = 1
	y = 2
	z = 3
#  End  of  the  class
a = {}
b = c1 . __dict__
for  key  in   b:
	if  not  key . startswith('__')  and  not  key . endswith('__'):
		a[key] = b[key]
print('static  variables  of  class  c1 :  '  ,  a)

output
static  variables  of  class  c1 :   {'x': 1, 'y': 2, 'z': 3}


#program 13
# What  are  k , l ,  x , y , z , m , n , p , q , s ?  (Home  work)
class   c1:
	x = 10  #  What  is  variable  'x'  ?  ---> static variable
	def    m1(self):
		self . y = 20   #  What  is  variable  'y' ? ---> instance variable
		z = 30   #  What  is   variable  'z' ?  ---> local variable
		c1 . m = 40   #  What  is  variable  'm' ? ---> static variable
#end of the class
def    f1():
	a = c1()
	a . p = 50   #  What  is  variable  'p' ? ---> instance variable
	c1 . q = 60   #  What  is  variable  'q' ? ---> static variable
	s = 70   #  What  is  variable  's' ? ---> local variable
#end of the function
k = 80   #  What  is  variable  'k' ? ---> global variable
c1 . l = 90   #  What  is  variable  'l' ? ---> static variable
b = c1()
b . n = 100   #  What  is  variable  'n' ? ---> instance variable

'''Static variables (x, m, q, l) can be accessed using c1.variable.
Instance variables (y, p, n) require an object (obj.variable).
Local variables (z, s) cannot be accessed outside their function.
Global variable (k) is accessible anywhere.'''






