#Ex-1
# Find   outputs (Home  work)
from  itertools  import  count
c = count()                    # create empty count
print('While  loop')           # While  loop
while   True:
        x = next(c)      # 0  1  2  3  4  5  6  7  8  9 10
        if   x > 9:
                break
        print(x)         # 0  1  2  3  4  5  6  7  8  9
print('For  loop')          # For loop
for  x  in  count(): # create empty count
	if  x  >  20:
		break
	print(x)      # 0 to 20
#end  of  for  loop
print('Element :  ' , end = '\t')
print(next(count()))  # 0 
c = count()
#print(*c) # memory Error

#Ex-2
#  Find  outputs (Home  work)
from  itertools  import  count
def  disp(cnt):
        for  i  in   range(4):
                print(next(cnt) , end = '\t')  # 10 to 13  # 10 15 20 25   # 10 <nl> 7.5 <nl>  5  <nl> 2.5   # 0 to 3
        print()
#end  of  the  function
a = count(start = 10) # create empty count start to 10
disp(a)
b = count(start = 10 , step = 5) # create empty count start to 10 with step 5
disp(b)
c = count(start = 10 , step = -2.5) #  create empty count start to 10 with step -2.5
disp(c)
d = count() # create empty count
disp(d) #

#Ex-3
#  Find  outputs (Home  work)
from   itertools    import    count
cnt = count()
list = [10 , 20 , 15 , 18]
z1 = zip(list , cnt) # create empty zip
print('While  loop')
while   True:
        try:
                print(next(z1))  # (10,0) <nl> (20,1) ,<nl> (15,2) <nl> (18,3)
        except:
                break
z2 = zip(list , cnt) # create empty zip
print('for  loop')
for  x   in    z2:
        print(x)       # (10,4) <nl> (20,5) ,<nl> (15,6) <nl> (18,7)
z3 = zip(list , cnt) # create empty zip
print('Next  element :  ' , next(z3)) # (10,8)
print('*z3 :  ' ,  *z3) # *z3 :   (20, 9) (15, 10) (18, 11)
z4 = zip(list , cnt)
print('Next  element  : ' ,  next(z4)) # Next  element  :  (10, 12)

#Ex-4
#  Find  outputs (Home  work)
from   itertools    import    count
cnt = count()
list = [10 , 20 , 15 , 18]
z1 = zip(cnt , list)    # create empty zip
print('while  loop')
while   True:
        try:
                print(next(z1)) # (0, 10) <nl>  (1, 20) <nl> (2, 15) <nl>  (3,18)
        except:
                break
z2 = zip(list , cnt) # create empty zip
print('for  loop') # for  loop
for  x   in    z2:
        print(x)  # (10,5) <nl> (20,6) <nl> (15,7) <nl> (18,8)
z3 = zip(cnt , list)  # create empty zip
print(next(z3)) # (9,10)
print(*z3) # (10, 20) (11, 15) (12, 18)
z4 = zip(list , cnt) # create empty zip
print(next(z4)) # (10,14)

#Ex-5
#  Find  outputs  (Home  work)
from  itertools  import  zip_longest
import   time
def  disp(z):
	while   True:
		try:
			print(next(z))   # (0,10) <nl> (1,20) ,<nl> (2,30) <nl> (3,40)
			time . sleep(1)
		except:
			break
list = [10 , 20 , 30 , 40]
z1  =  zip(range(7) , list) # create empty zip
print(type(z1)) # class iterator tools
disp(z1)
z2 = zip_longest(range(7) , list)
print(type(z2)) # <class 'itertools.zip_longest'>
disp(z2) #  (0,10) <nl> (1,20) ,<nl> (2,30) <nl> (3,40) <nl> (4,None) <nl> (5,None) <nl> (6,None)

#Ex-6
#  Find  outputs  (Home  work)
import   time
from    itertools    import  cycle
list = [10 , 20 , 30 , 40]
c = cycle(list) # create empty cycle
print(type(c))
while   True:
	print(next(c)) # execute infinite times
	time . sleep(1)

#Ex-7
#  Find  outputs  (Home  work)
import  time
from  itertools  import  repeat
r = repeat(25 , times = 3) # create empty repeat
print('1st  repeat  object')
while   True:
	try:
		print(next(r)) # Execute 3 times  25 25 25
		time . sleep(1)
	except:
		break
print('2nd  repeat  object')
r  =  repeat('Hyd')
while   True:
	print(next(r))  # execute infinite times
	time . sleep(1)
#Ex-8
# Find  outputs  (Home  work)
import  time
from  itertools  import  repeat
m = map(pow , range(10) ,  repeat(2)) # create empty map
while   True:
	try:
		print(next(m)) # pow(0,2)  up to pow (9,2)
		time . sleep(1)
	except:
		break

#Ex-9
#  Find  outputs (Home  work)
import  time
def  disp(itr):
	while  True:
		try:
			print(next(itr)) # print 3 elements of tuple
			time . sleep(1)
		except:
			break
from  itertools  import  combinations,permutations
list = ['A' , 'B' , 'C' , 'D']
c = combinations(list , 3) # create empty combinations
print('Different  Combinations') # Different  Combinations
disp(c)
print('Different   Permutations') # Different   Permutations
p = permutations(list , 3)
disp(p)
