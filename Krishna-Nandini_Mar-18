Program-1
# return  statement  demo  program
def  f1():
	print('f1  function')  # f1  function
	return  25
	print('Hello')
# End  of  the  function
print('Begin')  # Begin
x =  f1()
print(x)  # 25
print('End')  # End

'''
Output:
Begin
f1  function
25
End
'''


Program-2
# Find outputs
def   f1():
	print('Hyd')  # Hyd
	print('Sec')  # Sec
	print('Cyb')  # Cyb
# End  of  the  function
print('Begin')    # Begin
x = f1()
print(x)          # None 
print(type(x))    # <class 'NoneType'>
print('End')      # End

'''
Outputs:
Begin
Hyd
Sec
Cyb
None
<class 'NoneType'>
End
'''


Program-3
#  Gift
# Find  outputs
def  f1():
	return  10 , 20 , 30
# End  of  the  function
x = f1()
print(x)  # (10 , 20 , 30)
print(type(x))  # <class 'tuple'>
a , b , c =  f1()
print(a)  # 10
print(b)  # 20
print(c)  # 30
print('for  loop')  # for loop
for  k   in   f1():
	print(k)
	
'''
Output:
(10, 20, 30)
<class 'tuple'>
10
20
30
for  loop
10
20
30
'''


Program-4
# Find  outputs
def    f1():
        return  10
        return  20  # skipped due to return 10
        return  30  # skipped due to return 10
# End  of  the  function
print('Begin')  # Begin
x = f1()
print(x)  # 10
print('End')    # End
#return   100  # Error due to return outside the function

'''
Output:
Begin
10
End
'''


Program-5
#  Find  outputs
#f1()  # Error function call before definition
def   f1():
        print('Hello')  # Hello <next line> None
print(f1())
print(f1)  # Type and address of f1() function  i.e. <function f1 at 0x000001BA42FFA200>


Program-6
# Find  outputs
print('Hello')  # Hello
def  f1():
        print('f1  function')  # f1  function
#End  of   function
print('Hi')  # Hi
print(f1())  # f1  function <next line> None
print(f1)  # Type and Address of f1() function  i.e. <function f1 at 0x000001FAC042A200>
print('Bye')  # Bye

'''
Output:
Hello
Hi
f1  function
None
<function f1 at 0x000001FAC042A200>
Bye
'''


Program-7
#  Find  outputs
def    f1():
        print('Hyd')
        print('Sec')
        print('Cyb')
#End  of  the  function
print('Begin')   # Begin
print(type(f1))  # <class 'function'>
print(id(f1))    # Address of f1 function i.e.  2077733003776
print('End')     # End


Program-8
# Find  outputs
def  f1():
	print('No-argument  function')
def  f1(x):
	print('Single  argument  function  : ' , x)
def  f1(x , y):
	print('Two  argument  function : ' , x , y)
def  f1(x , y , z):
	print('Three  argument  function : ' , x , y , z)  # Three  argument  function :  10 20 30  i.e. remaining functions are discarded only last function is executed
f1(10 , 20 , 30)
#f1(40 , 50)
#f1(60)
#f1()


Program-9
# Modify  following  program  such  that  every  function  should  be  executed
def  f1():
	print('No-argument  function')
f1()                    # No-argument  function
def  f1(x):
	print('Single  argument  function  : ' , x)
f1(25)                  # Single  argument  function  :  25
def  f1(x , y):
	print('Two  argument  function : ' , x , y)
f1(10 , 20)             # Two  argument  function :  10 20
def  f1(x , y , z):
	print('Three  argument  function : ' , x , y , z)
f1(25 , 10.8 , 'Hyd')   # Three  argument  function :  25 10.8 Hyd


Program-10
# Write   a  function  to  test  a  number  is  prime  (or)  not.
def   prime(n):
	for i in range(2 , n // 2 + 1) :  #return  true   when  'n'  is  prime  number  and  False  otherwise
		if n % i == 0:
			return False
	# End of the for loop
	return True
n = int(input('Enter any number: ' ))  #How  to  read  a  number
if n < 2 :  # input  is  invalid:
	print('Invalid  input')
elif  prime(n) :  # input  is  prime  number:
	print('Prime  number')
else:
	print('Composite  number')
	
'''
Output:
Enter any number: 13
Prime  number

Enter any number: 1
Invalid  input

Enter any number: 25
Composite  number
'''


Program-11
# Find  outputs
def   disp(empno , ename , sal):
        print(F'Emp  Number  :  {empno} \t  Emp Name  :  {ename} \t  Salary  :  {sal}')
# End  of  the  function
disp(25 , 'Rama  Rao' , 10000.0)   # Emp  Number  :  25        Emp Name  :  Rama  Rao          Salary  :  10000.0
disp('Sita' , 20000.0 , 35)        # Emp  Number  :  Sita      Emp Name  :  20000.0    Salary  :  35


Program-12
# Find  outputs
def    f1(a , b , c):
          print(F'a  :  {a}    \t  b  :  {b}  \t  c :  {c}')
# End  of  the  function
f1(a = 10 , b = 20 , c = 30)              #  a  :  10          b  :  20        c :  30
f1(25 , 10.8 , 'Hyd')                     #  a  :  25          b  :  10.8      c :  Hyd
f1(b = 40.7 , a = 50.2 , c = 60.5)        #  a  :  50.2        b  :  40.7      c :  60.5
f1(c = 'Hyd' , b = 'Sec' , a = 'Cyb')     #  a  :  Cyb         b  :  Sec       c :  Hyd
f1(c = 3 + 4j , a = True , b = None)      #  a  :  True        b  :  None      c :  (3+4j)
f1(25 , c = 10.8 , b = 'Hyd')             #  a  :  25          b  :  Hyd       c :  10.8
#f1(a = 100 , 200 , 300)                  #  Error  becoz  pa's  are  after  ka
#f1(True , None , b = 'Hyd')              #  Error  becoz arg  is  passed  for  'b'  twice
#f1(10 , 20 , x = 30)                     #  Error  becoz  arg  'x'  does  not  exist  for  f1()  function
#f1(10 , 20)                              #  Error :  Arg  is  not  passed  for  'c'


Program-13
# Find  outputs
def    disp(empno , ename , sal):
        print(F'Emp  Number : {empno:4}  \t  Emp  Name : {ename:15}  \t  Salary : {sal}')
# End  of  the  function
disp(25 , 'Rama Rao' , 10000.0)                    # Emp  Number :   25        Emp  Name : Rama Rao            Salary : 10000.0
disp(ename = 'Sita' , sal = 20000.0 , empno = 35)  # Emp  Number :   35        Emp  Name : Sita                Salary : 20000.0
x = 'Rama  Rao'
y = 30000.0
z = 20
disp(x , y , z)   # Emp  Number : Rama  Rao           Emp  Name :         30000.0     Salary : 20


Program-14
#  Gift
# Find  outputs
def    f1(a , b , c):
	return  a + b * c
#end  of  the  function
print(f1(3 , 4 , 5))                           # 3 + 4 * 5 = 3 + 20 = 23
print(f1(*[6 , 7 , 8]))                        # 6 + 7 * 8 = 6 + 56 = 62
#print(f1([6 , 7 , 8]))                        # Error because args are not passed for 'b' and 'c' 
print(f1(*{1 : 2 , 3 : 4 , 5 : 6}))            # 16
print(f1(**{'c' : 2 , 'b' :  4 , 'a' : 6}))    # 6 + 4 * 2 = 6 + 8 = 14
#print(f1({'c' : 2 , 'b' :  4 , 'a' : 6}))     # Error because args are not passed for 'b' and 'c' 
print({**{'c' : 2 , 'b' :  4 , 'a' : 6}})      # {'c': 2, 'b': 4, 'a': 6}
#print(f1(**{'c' : 2 , 'a' : 4 , 'x' : 6}))    # Error because arg 'x' does not exist


Program-15
# Identify  Error
a = [10 , 20 , 15 , 5 , 12]
print(sorted(reverse = True , a))                     # Error PA after KA
print(sorted(a , rev = True))                         # Error invalid arg name 'rev'
print(25 , 10.8 , 'Hyd' , separator = '\t')           # Error invalid arg name 'separator'
print(25 , 10.8 , 'Hyd' , endofline = '\t')           # Error invalid arg name 'endofline'
print(25 ,  sep = '\t' , 10.8 , end = '\t' , 'Hyd')   # Error PA after KA
