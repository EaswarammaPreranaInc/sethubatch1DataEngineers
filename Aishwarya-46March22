#Fnd outputs
square=lambda x=10:x*x
print(square(5)) #25
print(square())  #100



#Find outputs
add=lambda x,y : x+y #How to define lambda function to return sum of two arguments
print(type(add))     #<class 'function'>
print(add(10,20))    #30
print(add(10.6,20.8))#31.4
print(add('Hyder','abad'))#Hyderabad
print(add(True,False))#1
print(add(25,10.8))   #35.8
print(add(3+4j,5+6j)) #(8+10j)
#print(add(10,'20'))  #Error
#print(add())         #Error
print(add)            #<function <lambda> at 0x00000165E52993A0>



#Find outputs
add=lambda a=1,b=2 : a+b
print(add(10,20)) #30
print(add())      #3



#Find outputs
print((lambda x,y : x+y)(10,20))     #30
print((lambda x,y : x+y)(10.8,20.6)) #31.4
print((lambda x,y : x+y)('Hyder','abad')) #Hyderabad
print((lambda x,y : x+y('Hyder','abad'))) #<function <lambda> at 0x00000165E52993A0>



#Find outputs
large=lambda x,y : max(x,y) #How to define lambda to determine largest of two arguments
print(large(10,20))    #20
print(large(10.7,5.6)) #10.7
print(large('g','s'))  #s
print(large('Rama','Rajesh')) #Rama
print(large(True,False))      #True



#Find outputs
power=lambda a=3.5,b=2 : a**b
print(power(2,3))    #8
print(power(4.5,4))  #4.5 ^ 4 = 410.0625
print(power())       #3.5 ^ 2 = 12.25
print(power(9))      #9 ^ 2 = 81



#Find outputs
all=lambda a,b : (a+b,a-b,a*b,a/b)
x=all(10,7)     
print(type(x))   #<class 'tuple'>
print(x)         #(17,3,70,1.428571)
p,q,r,s=all(9,2)
print(p)         #11
print(q)         #7
print(r)         #18
print(s)         #4.5



#Find outputs
a=lambda : 'Hyd'
print(a()) #Hyd
print(a)   #<function <lambda> at 0x000001B0C3FD8A40>



#Find outputs
a=lambda : print('Hyd'); print('Sec'); print('Cyb')
a() #Sec<next line> Cyb <next line> Hyd



#Find outputs
a=lambda : print('Hyd'); print('Sec'); print('Cyb')
print(a()) #Sec <next line> Cyb <next line> Hyd <next line> None



#Find outputs
a=lambda : print('Hyd'), print('Sec'), print('Cyb') #Sec <next line>Cyb
print(type(a)) #<class 'tuple'>
print(a)       #(<function <lambda> at 0x000001F98B688A40>,None,None)
for x in a:
	print(x)   #<function <lambda> at 0x000001F98B688A40> <next line> None <next line> None
#a()            #Error (bcoz a is tuple not function)
print(a[0]())  #Hyd




#Find outputs
s='Hyd'
print(lambda s: print(s)) #<function <lambda> at 0x000002187C618A40>
print(lambda x: print(x)(s)) #<function <lambda> at 0x000002187C618A40>
print((lambda x: print(x))(s)) #Hyd <next line> None
(lambda x:print(x))(s) #Hyd



#Find outputs
x=5
adder1 = lambda y,x=x : x+y  #Here x is 5 due to x=x
x=10
adder2 = lambda y,x=x : x+y  #Here x is 10 due to x=x
x=20
print(adder1(100))   #105
print(adder2(200))   #210
print(adder1(300,400)) #700



#Find outputs
a=[lambda x : x**2, lambda x : x**3, lambda x : x**4]
for fun in a:
	print(fun(5)) 

#Outputs
25
125
625



#Find outputs
def f1():
	print('Hyd')  
def f2():
	print('Sec')  
a=[f1(),f2()]  #[None,None]
for x in a:
	#x() #Error
	pass
#a=[def f1() : print('Hyd'), def f2() : print('Sec')] #Error  due to def
print(a)       
a=[f1(),f2()]
print(a)

#Outputs
Hyd
Sec
[None, None]
Hyd
Sec
[None, None]



#Find outputs
a={'power_2' : lambda x : x**2, 'power_3' : lambda x : x**3, 'power_4' : lambda x : x**4}
key='power_3'
print(a[key])   #<function <lambda> at 0x000002A6FF4593A0>
print(a[key](5)) #125



#Find outputs
def f1(x):
	return lambda n : x**n
lamb=f1(3)
print(type(f1))   #<class 'function'>
print(type(lamb)) #<class 'fuunction'>
print(lamb(2))    #9
print(lamb(5))    #243
print(lamb)       #<function f1.<locals>.<lambda> at 0x000001E86D1E93A0>
#print(lamb())     #Error



#Find outputs
def eval(a,b,c):
	return lambda x : a*x**2+b*x+c
lam=eval(3,4,5)  #lambda x : 3*x**2+4*x+5
print(lam(2))    #25
print(lam(2.5))  #33.75
print(lam(4))    #69



#Nested lambda function
add=lambda x=10 : lambda y : x+y
a=add()   #lambda y : 10+y
print(a(20)) #30
print(add(30)(40)) #70



#Find outputs
a=((10,'Rama',1000.0),(20,'Sita',2000.0),(15,'Rajesh',500.0),(18,'Kiran',2800.0),(5,'Amar',1200.0))
b=sorted(a)
print(b)  #[(5,'Amar',1200.0),(10,'Rama',1000.0),(15,'Rajesh',500.0),(18,'Kiran',2800.0),(20,'Sita',2000.0)]
print()   #<next line>
c=sorted(a,reverse=True)
print(c) #[(20,'Sita',2000.0),(18,'Kiran',2800.0),(15,'Rajesh',500.0),(10,'Rama',1000.0),(5,'Amar',1200.0)]
print()  #<next line>
d=sorted(a,key=lambda x : x[1])
print(d) #[(5,'Amar',1200.0),(18,'Kiran',2800.0),(15,'Rajesh',500.0),(10,'Rama',1000.0),(20,'Sita',2000.0)]
print()  #<net line>
e=sorted(a,key=lambda x : x[2])
print(e) #[(15,'Rajesh',500.0),(10,'Rama',1000.0),(5,'Amar',1200.0),(20,'Sita',2000.0),(18,'Kiran',2800.0)]
print()  #<net line>
f=sorted(a,key=lambda x : x[0])
print(f) #[(5,'Amar',1200.0),(10,'Rama',1000.0),(15,'Rajesh',500.0),(18,'Kiran',2800.0),(20,'Sita',2000.0)]
print()  #<net line>
g=sorted(a,key=lambda x : x[1],reverse=True)
print(g) #[(20,'Sita',2000.0),(10,'Rama',1000.0),(15,'Rajesh',500.0),(18,'Kiran',2800.0),(5,'Amar',1200.0)]
print(sorted(a,key=x[1]))  #Error



#Find outputs
a=[{'Make' : 'Ford', 'Model' : 'Focus', 'Year' : 2013}, {'Make' : 'Tesla', 'Model' : 'X', 'Year' : 1999}, {'Make' : 'Mercedes', 'Model' : 'C350E', 'Year' : 2008}]
b=sorted(a, key=lambda x : x['Year'])
print(b)  #[{'Make': 'Tesla', 'Model': 'X', 'Year': 1999}, {'Make': 'Mercedes', 'Model': 'C350E', 'Year': 2008}, {'Make': 'Ford', 'Model': 'Focus', 'Year': 2013}]
print(sorted(a))  #Error 



#Find outputs
a=((10,'Rama',1000.0), (20,'Sita',2800.0), (15,'Vamsi',2000.0), (25,'Kiran',1500.0),  (5,'Amar',1300.0))
print(max(a, key = lambda x : x[0])) #(25,'Kiran',1500.0)
print(max(a, key = lambda x : x[1])) #(15,'Vamsi',2000.0)
print(max(a, key = lambda x : x[2])) #(20,'Sita',2800.0)
print(max(a)) #(25,'Kiran',1500.0)



#Find output 
add=lambda x:x==25
print(add(10))  #False
add=lambda x=25:x==35
print(add())    #False
add=lambda x:x=25  #Error (assigning value to x)
add=lambda x:x:=25 #Error



#Find outputs 
def f1():
	print('f1 function')
def f2():
	print('f2 function')
#End of the function
f1() #f1 function
f2() #f2 function
print(f1 is f2) #False
f2 = f1 #Function alias
f2() #f1 function
print(f1 is f2) #True
f2 = f1() #Function call
print(f2) #f1 function <next line> None
f2()  #Error (NonType is not a function)



#Find outputs
p=print #How to assign ref 'p' to print function
p('Hyderabad') #How to call print() function through ref 'p' and print 'Hyderabad'
print=None
print('Hello') #Error (print is None)
p('Hello')#How to call print() function through ref 'p' and print 'Hello'



#Find outputs
x=id #How to assign ref 'x' to id() function
print(x(25))#How to call id() function through ref 'x' and print id of object 25
p=len #How to assign ref 'p' to len() function
print(p('Hyd')) #How to call len() function through ref 'p' and print length of 'Hyd'



#Find outputs
def outer():
	print('Outer function')
	def inner():
		print('Inner function')
	#End of inner function
	print('Hello')
	inner()
	print('Back to outer function')
def other():
	#inner() #Error (cannot call inner function outside the outer function)
	print('Other function')
#End of the function
print('Begin')
outer()
print('Hi')
#inner() #Error (cannot call inner function outside the outer function)
other()
print('Bye')

#Output
Begin
Outer function
Hello
Inner function
Back to outer function
Hi
Other function
Bye



#Find output
def f1(a):
	def f2():
		return 10
	#End of f2 function
	return f2()+20+a
#End of f1 function
print(f1(30)) #60



#Find outputs
def outer():
	print('Outer function')
	def inner1():
		print('1st inner function')
	def inner2():
		print('2nd inner function')
	print('Hi')
	inner2()
	print('Hello')
	inner1()
	print('Back to outer function')
#End of the function
print('Begin')
outer()
print('Bye')

#Output
Begin
Outer function
Hi
2nd inner function
Hello
1st inner function
Back to outer function
Bye



#Find outputs 
x = 10
def outer():
	x = 20
	def inner():
		x = 30
		print(x)
		print(globals()['x'])
	inner()
outer()
print('Bye')

#Outputs
30
10
Bye



#Find outputs
x = 10
def  outer():
	x = 20
	def inner():
		print(x)
		print(globals()['x'])
	inner()
outer()

#Outputs
20
10



#Find outputs 
x = 10
def  outer():
	def inner():
		print(x)
	inner()
outer()

#outputs
10



#Find outputs 
def outer():
	x = 10
	def inner():
		x = 20
		print(x)
		x += 7
	#End of inner function
	print(x)
	x += 5
	inner()
	print(x)
#End of the function
outer()
print('Bye')

#outputs
10
20
15
Bye



#Find outputs  
def outer():
	x = 10
	def inner():
		nonlocal  x
		print(x)
		x = 20
		print(x)
		x += 5
	#End of inner function
	print(x)
	x += 5
	inner()
	print(x)
#End of outer function
outer()
print(x) #Error ('x' is not defined)

#Outputs
10
15
20
25



#Find outputs  
def outer():
	x = 10
	def inner():
		print(x)  #Error (no global variable 'x')
		nonlocal  x #Error
		x = 20
		print(x)
		x += 5
	#End of inner function
	print(x)  #10
	x += 5
	inner()
	print(x)
#End of outer function
outer()



#Find outputs
def outer():
	x = 10
	def inner():
		global x
		x = 20
		print(x)
		x += 5
	#End of inner function
	print(x)
	x += 5
	inner()
	print(x)
#End of outer function
outer()
print(x)

#Outputs
10
20
15
25



#Find outputs
def outer():
	def inner():
		nonlocal x    #Error
		x = 20
		print(x) #20
	#End of inner function
	inner()
	print(x)  #Error 
#End of the function
outer()
print(x)  #Error ('x' is not defined)



#Find outputs
def outer():
	def inner():
		global x
		x = 20
		print(x)
		x = x+5
	#End of inner function
	inner()
	print(x)
#End of the function
outer()
print(x)

#Outputs
20
25
25



#Identify Error
def f1():
	nonlocal x  #Error (nonlocal can be used only in inner function)



#Find outputs
def outer():
	a=10
	b=20
	def inner():
		nonlocal a
		a=100
		b=200
		print(a,b)
	#End of inner function
	print(a,b)
	inner()
	print(a,b)
#end of outer function
outer()

#Outputs
10 20
100 200
100 20



#Find outputs
def f1():
	x = 'John'
	def f2():
		nonlocal  x
		x = 'Hello'
	#end of inner function
	f2()
	return x
#  End  of  f1()  function
print(f1()) #Hello



#Find outputs
def fun():
	x=10
	def gun():
		x=x+20  #Error (x is local variable)
		print(x)  
	#end of inner function
	gun()
#end of outer function
fun()




#Identify Error
x = 10
def outer():
	x = 20
	def inner():
		global x #Error ('x' is already local)
		nonlocal x



#  Find  outputs  (Home   work)
def f1():
	x = 10
	def f2():
		nonlocal x
		def  f3():
			nonlocal x
			print(x)  #10
		f3()
	f2()
f1()
