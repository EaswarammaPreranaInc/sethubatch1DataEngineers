# Find  outputs (Home  work)
'''square = lambda  x = 10  :   x * x
print(square(5)) #25
print(square()) #100
output:
25
100 '''

# Find  output (Home  work)
'''add=lambda a,b: a+b #How  to  define  lambda  function   to  return  sum   of  two  arguments
print(type(add)) #<class 'function'>
print(add(10 , 20)) # 30
print(add(10.6 , 20.8)) # 32.4
print(add('Hyder' , 'abad')) #Hyderabad
print(add(True , False)) # 1
print(add(25 , 10.8)) #35.8
print(add(3 + 4j , 5 + 6j)) #8+10j
print(add(10 , '20')) # error
print(add()) #error
print(add) #<function <lambda> at 0x0000026666C22CB0> '''

#  Find  outputs (Home  work)
'''add = lambda  a = 1 , b = 2 :  a + b
print(add(10 , 20)) #10+20=30
print(add()) #1+2=3 '''

#  Find  outputs (Home work)
'''print((lambda  x , y : x + y) (10 , 20) ) #30
print((lambda  x , y : x + y) (10.8 , 20.6)) #  31.4
print((lambda  x , y : x + y) ('Hyder' , 'abad')) #hyderabad
print(lambda  x , y : x + y  ('Hyder'  ,  'abad')) #<function <lambda> at 0x0000016356422E60> '''

#  Find  outputs (Home  work)
'''large=lambda a,b:a if a>b else b       #How  to  define  lambda  to  detrmine  largest  of  two  arguments
print(large(10  ,  20)) #20
print(large(10.7  ,  5.6)) #10.7
print(large('g'  ,  's')) #s
print(large('Rama'  ,  'Rajesh')) #rama
print(large(True  ,  False)) #true '''

#Find  outputs (Home  work)
'''power = lambda  a = 3.5 , b = 2  :  a ** b
print(power(2 , 3)) #8
print(power(4.5 , 4)) #410.0625
print(power()) #12.25
print(power(9)) #81 '''


# Find  outputs
'''all = lambda  a , b :  (a + b ,  a - b , a * b , a / b)
x = all(10 , 7)
print(type(x)) # <clas 'tuple'>
print(x) #(17,3,70,1.4285)
p , q , r , s = all(9 , 2)
print(p) #11
print(q) #7
print(r) #18
print(s) #4.5 '''

#  Find  outputs
'''a  =  lambda  :  'Hyd'
print(a()) #hyd
print(a) #<function <lambda> at 0x000001F973CB2D40> '''

# Find  outputs
'''a  =  lambda  :  print('Hyd');  print('Sec')  ; print('Cyb')
a() # sec \n cyd \n hyd  '''

# Find  outputs
'''a  =  lambda  :  print('Hyd')  ;  print('Sec');  print('Cyb')
print(a()) #sec \n cyb \n hyd \n none '''

# Find  outputs (Home  work)
'''a  =  lambda  : 'Hyd' ;  print('Sec') ;  print('Cyb')
print(a()) #sec \n cyd \n hyd  '''

# Find  outputs   (Home  work)
'''a  =  lambda  :  print('Hyd')  , print('Sec')  , print('Cyb') #sec \n cyd
print(type(a))  #<class 'tuple'>
print(a)  #(<function <lambda> at 0x000001D947763010>, None, None)
          #<function <lambda> at 0x000001D947763010>
for  x  in  a:
	print(x) #none \n none \n hyd
#a() 
print(a[0]()) #hyd \n none
'''

#  Find  outputs  (Home  work)
'''s = 'Hyd'
print(lambda  s  :  print(s)) #<function <lambda> at 0x0000022BD7013010>
print(lambda  x  :  print(x) (s)) #<function <lambda> at 0x0000022BD7013010>
print((lambda  x  :  print(x)) (s)) #hyd \n none
(lambda  x  :  print(x)) (s) # hyd '''

# Find outputs  (Home  work)
'''x = 5
adder1 = lambda  y , x = x  : x + y
x = 10
adder2 = lambda  y , x = x : x + y
x = 20
print(adder1(100)) #105
print(adder2(200)) #210
print(adder1(300 , 400)) #700 '''


#Find  outputs  (Home  work)
'''a = [lambda   x  :  x * 2 , lambda   x  :  x * 3 ,  lambda   x  :  x ** 4]
for   fun   in   a:
        print(fun(5)) #25 \n 125 \n 625 '''

#  Find  outputs
'''def   f1():
	print('Hyd')
def   f2():
	print('Sec')
a = [f1 , f2]
for  x  in  a:
	     x() #hyd \n sec
#a = [def   f1():  print('Hyd') ,  def   f2():  print('Sec')]
print(a) #[<function f1 at 0x000001AF9A4A3010>, <function f2 at 0x000001AF9A4A30A0>]
a = [f1() , f2()] #hyd none \n sec none
print(a) #[none none] '''

# Find output  (Home  work)
'''a = {'power_2'  :  lambda   x  :  x ** 2 ,
       'power_3'  :  lambda   x  :  x ** 3 ,
  	   'power_4'  :  lambda   x  :  x ** 4}
key = 'power_3'
print(a[key]) #<function <lambda> at 0x00000197CAF930A0>
print(a[key](5))  #125 '''

# Find  outputs  (Home  work)
'''def   f1(x):
        return  lambda  n  :  x ** n
lamb = f1(3)
print(type(f1)) #<class 'function'>
print(type(lamb)) #<class 'function'>
print(lamb(2)) #3**2=9
print(lamb(5)) #3**5=243
print(lamb) #<function f1.<locals>.<lambda> at 0x000001C3979930A0>
#print(lamb()) '''


# Find  outputs   (Home  work)
'''def   eval(a , b , c):
        return   lambda    x  :    a *   x **  2  +   b * x  +  c
lam  = eval(3 , 4 , 5)
print(lam(2)) #3*2**2+4*2+5 =25
print(lam(2.5)) # 3*6.25+4*4+5 =33.75
print(lam(4)) #3*16+4*4+5=69 '''

#Nested  lambda  function  (Home  work)
'''add  =  lambda    x = 10   :    lambda   y  :  x  +  y
a = add() #type and address
print(a(20)) #30
print(add(30)(40)) #70 '''

# Find  outputs
'''a= ((10 , 'Rama' , 1000.0) , (20 , 'Sita' , 2000.0) , (15 ,'Rajesh' , 500.0) ,  (18 , 'Kiran' , 2800.0) , (5 , 'Amar' , 1300.0))   #  Nested  tuple
b = sorted(a)  # Sorts   tuple  'a'  based  on  1st  element  of  each  inner  tuple
print(b)  # [(5, 'Amar', 1300.0), (10, 'Rama', 1000.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (20, 'Sita', 2000.0)]
print()
c = sorted(a , reverse = True)  #  Sorts  tuple  'a'  in descendig  order  of   1st  element  of  inner  tuples
print(c)  #  [(20, 'Sita', 2000.0), (18, 'Kiran', 2800.0), (15, 'Rajesh', 500.0), (10, 'Rama', 1000.0), (5, 'Amar', 1300.0)]
print()
d = sorted(a ,  key =  lambda   x  :  x[1])  # Sorts   tuple  'a'  based  on   2nd  element  of  each  inner  tuple  due  to  x[1]
print(d)  # [(5, 'Amar', 1300.0), (18, 'Kiran', 2800.0), (15, 'Rajesh', 500.0), (10, 'Rama', 1000.0), (20, 'Sita', 2000.0)]
print()
e = sorted(a , key =  lambda   x  :  x[2])
print(e)  #[(15, 'Rajesh', 500.0), (10, 'Rama', 1000.0), (5, 'Amar', 1300.0), (20, 'Sita', 2000.0), (18, 'Kiran', 2800.0)]
print()
f = sorted(a , key = lambda   x  :  x[0])
print(f)  #[(5, 'Amar', 1300.0), (10, 'Rama', 1000.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (20, 'Sita', 2000.0)]
print()
g = sorted(a , key = lambda  x : x[1] , reverse = True)
print(g) #[(20, 'Sita', 2000.0), (10, 'Rama', 1000.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (5, 'Amar', 1300.0)]
#print(sorted(a , key = x[1])) '''


# Find outputs  (Home  work)
'''a = [ {'Make' : 'Ford' , 'Model' : 'Focus' , 'Year' : 2013} ,
        {'Make' : 'Tesla' , 'Model' : 'X' , 'Year' : 1999} ,
        {'Make' : 'Mercedes' , 'Model' : 'C350E' , 'Year' : 2008} ]
b = sorted(a , key = lambda  x  :  x['Year'])
print(b) #[{'Make': 'Tesla', 'Model': 'X', 'Year': 1999}, {'Make': 'Mercedes', 'Model': 'C350E', 'Year': 2008}, {'Make': 'Ford', 'Model': 'Focus', 'Year': 2013}]
#print(sorted(a)) '''


# Find outputs  (Home  work)
'''a = ((10 , 'Rama' , 1000.0) , (20 , 'Sita' , 2800.0) , (15 , 'Vamsi' , 2000.0) , (25 , 'Kiran' , 1500.0) ,  (5 , 'Amar' , 1300.0))
print(max(a , key = lambda  x  :  x[0] )) #(25, 'Kiran', 1500.0)
print(max(a , key = lambda  x  :  x[1] )) #(15, 'Vamsi', 2000.0)
print(max(a , key = lambda  x  :  x[2] )) #(20, 'Sita', 2800.0)
print(max(a)) #(25, 'Kiran', 1500.0) '''

# Find  output  (Home  work)
'''add = lambda  x  :   x == 25
print(add(10)) #false
add = lambda  x = 25 :   x == 35
print(add()) #false
#add = lambda  x  :   x = 25
#add = lambda  x  :   x := 25 '''

#  Find  outputs  (Home  work)
'''def    f1():
        print('f1    function') # f1    function
def    f2():
        print('f2  function') # f2  function
# End  of  the  function
f1() 
f2() 
print(f1  is  f2) #false
f2 = f1 
f2() #f1  function
print(f1  is  f2) #true
f2 = f1()
print(f2) #f1  function
#f2() '''

# Find  outputs (Home  work)
'''p=print
#How  to  assign  ref  'p'  to  print()  function
p( 'Hyderabad')
#How  to  call  print()  function  thru  ref  'p'  and   print  'Hyderabad'
print = None
#print('Hello')
p('Hello')
#How  to  call  print()  function  thru  ref  'p'  and   print  'Hello' '''

# Find   outputs (Home  work)
#How  to  assign  ref  'x'  to  id()  function
'''x=id
#How  to  call  id()  function  thru  ref  'x'  and   print  id  of  object 25
print(x(25))  # random id
#How  to  assign  ref  'p'  to  len()  function
p=len
#How  to  call  len()  function  thru  ref  'p'  and   print  length  of  'Hyd
print(p("Hyd")) #3 '''


#  Find  outputs (Home  work)
'''def  outer():
	print('Outer  function') #2.outer function
	def  inner():
		print('Inner  function') #4.Inner  function
	# End  of  inner  function
	print('Hello') #3.hello
	inner()
	print('Back  to  outer  function') #5.Back  to  outer  function
def  other():
	#inner()
	print('Other  function') #7.Other  function
# End  of  the  function
print('Begin') #1.begin
outer()
print('Hi') #6.hi
#inner()
other()
print('Bye') #8.bye '''

# Find  output(Home  work)
'''def    f1(a):
	def   f2():
		return  10
	# End  of  f2  function
	return  f2() + 20 +  a  #1.10+20+30=60
# End  of  f1  function
print(f1(30))  '''


# Find  outputs (Home  work)
'''def  outer():
	print('Outer  function') #2.outer function
	def  inner1():
		print( '1st  inner  function') #6.1st inner function
	def  inner2():
		print('2nd  inner  function') #4.2nd inner function
	print('Hi') #3.hi
	inner2()
	print('Hello') #5.hello
	inner1()
	print('Back  to  outer  function') #7.back to outer function
# End of the function
print('Begin')  #1.begin
outer()
print('Bye') #7.bye '''

# Find  outputs  (Home  work)
'''x = 10 
def  outer():
	x = 20 
	def   inner():
		x = 30
		print(x) #1.30
		print(globals()['x']) #2.10
	inner()
outer()
print('Bye') #bye '''


# Find  outputs  (Home   work)
'''x = 10
def  outer():
	x = 20 
	def   inner():
		print(x) #1.20
		print(globals()['x']) #2.10
	inner()
outer()  '''

# Find  outputs  (Home  work)
'''x = 10
def  outer():
	def   inner():
		print(x) #1.10
	inner()
outer() '''

# Find  outputs  (Home  work)
'''def  outer():
	x = 10 #1.10
	def  inner():
		x = 20  #2.20
		print(x) 
		x +=  7 
	# End  of  inner  function
	print(x)
	x += 5 #3.15
	inner()
	print(x) 
# End  of  the  function
outer()
print('Bye') #4.bye '''

#  Find  outputs  (Home  work)
'''def  outer():
	x = 10 #1.10
	def  inner():
		nonlocal  x
		print(x)
		x = 20
		print(x) #3.20
		x += 5 #4.20+5=25
	# End  of  inner  function
	print(x)
	x += 5 #2.10+5=15
	inner()
	print(x)
# End  of  outer  function
outer()
print(x) #error '''

#  Find  outputs  (Home  work)
'''def  outer():
	x = 10 #1.10
	def  inner():
		#print(x)
		#nonlocal  x
		x = 20
		print(x) #3.20
		x += 5 #4.20+5=25
	# End  of  inner  function
	print(x)
	x += 5 #2.10+5=15
	inner()
	print(x)
# End  of  outer  function
outer() '''


#  Find   outputs(Home  work)
'''def  outer():
	x = 10 #1.10
	def  inner():
		global   x
		x = 20
		print(x) #2.20
		x += 5 #4.25
	# End  of  inner  function
	print(x)
	x += 5 #3.15
	inner()
	print(x)
# End  of  outer  function
outer()
print(x) '''

# Find  outputs(Home  work)
'''def  outer():
	def  inner():
		#nonlocal  x
		x = 20
		print(x) #1.20
	# End  of  inner  function
	inner()
	#print(x)
# End  of  the  function
outer()
#print(x) '''


# Find  outputs(Home  work)
'''def outer():
	def  inner():
		global   x
		x = 20
		print(x) #1.20
		x = x + 5 #2.25
	# End  of  inner  function
	inner()
	print(x) 
# End  of  the  function
outer()
print(x)  #3.25   '''


#  Identify  Error
'''
def   f1():
         non local x: #error '''

# Find  outputs (Home  work)
'''def  outer():
	a =10 #1.10
	b = 20 #2.20
	def   inner():
		nonlocal   a
		a = 100
		b = 200
		print(a , b) #3.100 4.200
	# End  of  inner  function
	print(a , b)
	inner()
	print(a , b)
#end of outer function
outer() #5.a=100 b=20 '''

# Find  outputs (Home  work)
'''def   f1():
	x = 'John' 
	def  f2():
		nonlocal  x
		x =  'Hello'
	#end of inner function
	f2()
	return  x
#  End  of  f1()  function
print(f1()) #hello  '''

# Find  output(Home  work)
'''def  fun():
	x = 10 #1.10
	def    gun():
		x =  x +  20 #error x is not defined
		print(x) 
	#end of inner function
	gun()
#end of outer function
fun() '''

#  Find  outputs  (Home   work)
'''def   f1():
	x = 10 #1.10
	def  f2():
		nonlocal   x
		def  f3():
			nonlocal   x
			print(x)
		f3()
	f2()
f1() '''

