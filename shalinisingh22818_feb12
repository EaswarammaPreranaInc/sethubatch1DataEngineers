 #program 1
a = 0O6247 # ref 'a'points to octal object
print(a) # converts octal object to decimal number i.e 3239
print(type(a)) # typeof obj 'a' <class int>
print(id(a)) # address of obj 'a' 
b = 0o6247 # ref 'a' points to octal object
print(id(b)) # converts octal obj to decimal number i.e 3239
print(b) # points to same address 
c = 3239 # ref 'c' points to obj 3239
print(c) # 3229
print(id(c)) # same address 
print(0o9248) # error due to 9 and 8 in octal object

#program 2
a = 0XA7B9 # ref 'a'to hexa decimal object
print(a) # value of 'a' i.e 42934
print(type(a)) # typeof obj 'a' <class int>
b = 0xBEEF # ref 'b' to hexadecimal object
print(b) # value of 'b' i.e 48879
print(A7B9) # error due to 0X missing
print('A7B9') # error due to 0X missing
print(0XBEER) # error 'r'
print(0XHYD) # error 'h'
print(0xA7G9B) # error 9 and 8 in hexadecimal object

#program 3
a = 9248 # ref 'a' to obj 9248
print(a) # value of obj 9248
print(type(a)) #typeof object <class int>

#program 4
a = "Rama Rao" # ref 'a' point to string object in double quotes
print(a) # value of 'a' i.e Rama Rao
print(type(a)) # typeof 'a' <class 'str'>
print(id(a)) # address of 'a' 
b = 'Hyd' # ref 'b' to string object in single quotes
print(b) # value of 'b' i.e Hyd
c = '''Hyd is green city.
Hyd is hitec city.
Hyd is beautiful city.''' # ref 'c' to string object
print(c) # value of 'c' i.e Hyd is green city.
                            Hyd is hitec city.
                            Hyd is beautiful city.
                            
#program 5
a = 'Hyd' # ref points string object 'a'
print(How  to  print  'H'  of  object  'a') #a[0]
print(How  to  print  'y'  of  object  'a') #a[1]
print(How  to  print  'd'  of  object  'a') #a[2]
print(a[3]) # error a doesn't have index 3
print(How  to  print  'd'  of  object  'a'  with  -ve  index) # a[-1]
print(How  to  print  'y'  of  object  'a'  with  -ve  index) # a[-2]
print(How  to  print  'H'  of  object  'a'  with  -ve  index) # a[-3]
print(a[-4]) # error a doesn't have index -4
print(a[0] ==  a[-3]) # prints True as 'H' is comapred with 'H'
a[2] = 'c' # error string is immutable
print(25[0]) # error index 25[0] is not present 
print('25'[0]) # string '25' at index 0 is 2
print(True[1]) # error
print('True'[1]) # string 'True' at index 1 is r

#program 6
#this program performs repetition of string obj without spaces and multiplication for int class objects 
a = 'Hyd' # ref to string object
print(a * 3) # HydHydHyd
print(a * 2) # HydHyd
print(a * 1) # Hyd
print(a * 0) # returns empty string
print(a * -1) # returns empty string
print(25 * 3) # int obj is mulitplied i.e 75
print('25' * 3) # str obj is repeated i.e 252525
print('25' * 4.0) # error because of float obj i.e non-int
print(3 * 'Hyd') # HydHydHyd 

#program 7
# len()  function -> counts the length of string class objects 
print(len('Hyd')) # 3
print(len('Rama Rao')) # 8
print(len('9247')) # 4
print(len('')) # 0 empty string
print(len(' ')) # 1 white space
print(len(689)) # error argument has to be sequence in ('')

#program 8
a = """"Hyd""" # string obj with excess quotes
print(a) # "Hyd
print(len(a)) # 4
print(a[0]) # "
print("""Hyd"""") # error excess closing " 
b = """""Hyd"""
print(b) # ""Hyd
print(len(b)) # 5

#program 9
#Slicing of string
#   0      1      2      3      4      5     6       7       8       9    10    11     12     13     14     15      16     17
#   S      a      n      k      a       r            D       a       y     a     l            S       a       r       m       a
#  -18   -17      -16   -15    -14    -13   -12     -11     -10    -9    -8    -7     -6     -5      -4      -3      -2     -1

a = 'Sankar Dayal Sarma'
print(a[7 : 12]) # string  from  indexes  7  to 12 in  steps  of   1--->Dayal
print(a[7 : ]) # string  from  indexes  7  to   18  in  steps  of   1 --->Dayal Sarma
print(a[ : 6]) #string  from  indexes  0  to   6  in  steps  of   1 --->Sankar
print(a[ : ]) #  a[ 0 :  18 :  1]  --->  string  from  indexes  0  to   18  in  steps  of   1   ---> Sankar  Dayal  Sarma
print(a[:  : ]) # string  from  indexes  0  to   18  in  steps  of   1 --->Sankar  Dayal  Sarma
print(a[1 : 10 : 2]) # string  from  indexes  1  to   10  in  steps  of   2 --->ankr Dy
print(a[0 : : 2]) # string  from  indexes  0  to   18  in  steps  of   2 ---> Sna aa am
print(a[1 : : 2])# string  from  indexes  1  to   18  in  steps  of   2 ---> akrDylSra
print(a[-5 : -1]) # string  from  indexes  -5  to  -1  in  steps  of   -1 --->Sarm
print(a[::-1])  #  a[-1 : -19 : -1]  --->  string  from  indexes  1-  to   18  in  steps  of   -1   ---> Reverse string -->amraS layaD raknaS
print(a[-1:-5:-1]) #string  from  indexes  -1  to   17  in  steps  of   1 --->amra
print(a[ : : -2]) # string  from  indexes  -1  to   -19  in  steps  of -2 --->arSlyDrka
print(a[3 : -3])  #string  from  indexes  3 to  -3  in  steps  of   1 --->kar Dayal Sa
print(a[2 : -5])   #  a[2 : -5 :  1]  --->  string  from  indexes  2  to  -5   in  steps  of   1   --->  nkar<space>Dayal<space>
print(a[-1:-5]) #  empty string
print(a[3 : 3]) # empty string 



