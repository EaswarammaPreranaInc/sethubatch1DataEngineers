#28/04/2025 

#1. Find  outputs

'''
class   father:
	def  m1(self):
		print('m1  method  of  Father  class')
class   mother:
	def  m1(self):
		print('m1  method  of  Mother  class')
class   uncle:
	def  m1(self):
		print('m1  method  of  Uncle  class')
class   child(father , mother , uncle):
	def  m1(self):
		print('m1  method  of  child  class') #2. m1  method  of  child  class
		super(child,self).m1() #How  to  call  m1()  method  of  father  class #3. m1  method  of  Father  class
		super().m1() #How  to  call  m1()  method  of  father  class  in  another  way #4. m1  method  of  Father  class
		super(father,self).m1() #How  to  call  m1()  method  of  mother  class #5. m1  method  of  Mother  class
		super(mother,self).m1() #How  to  call  m1()  method  of  uncle  class #6. m1  method  of  Uncle class
		#super(uncle , self) . m1() #Error no m1() in object class 
# End of the class
print(child . __mro__) #1.(c,f,m,u,o)
c=child()
c.m1() #How  to  call  m1()  method  of  child  class
print('Bye') #7. Bye

'''


#2. Find outputs  (Home  work)

'''
class  A:
	def  m1(self):
		super() . m1() 
		print('class A method') #p3 #6. class A method
class  B:
	def m1(self):
		super() . m1()
		print('class B method') #p5 #4. class B method
class  C:
	def m1(self):
		super() . m1()
		print('class C method') #p6 #3. class C method
class  D:
	def m1(self):
		#super() . m1() #Error
		print('class D method') #p7 #2. class D method
class  X(A , B):
        def m1(self):
                super() . m1()
                print('class X method') #p2 #7. class X method
class  Y(B , C , D):
        def m1(self):
                super() . m1()
                print('class Y method') #p4 #5. class Y method
class  P(X , Y , C):
        def m1(self):
                super() . m1() 
                print('class P method') #p1 #8. class P method
#end of the class
print(P . mro()) #1.PXAYBCDO
obj = P()
obj . m1()
print('Bye') #9. Bye

'''




#3. Find  outputs  (Home  work)

'''
class  D:
        def __init__(self):
                super() . __init__()
                print('class D constructor') #p4 #4. class D constructor
class  E:
        def __init__(self):
                super() . __init__()
                print('class E constructor') #p5 #3. class E constructor
class  F:
        def __init__(self):
                super() . __init__() #1.nothing
                print('class F constructor') #p6 #2. class F constructor
class  B(D , E):
        def __init__(self):
                super() . __init__()
                print('class B constructor') #p2 #6. class B constructor
class  C(D , E , F):
        def __init__(self):
                super() . __init__()
                print('class C constructor') #p3 #5. class C constructor
class  A(B , C):
        def __init__(self):
                super() . __init__() 
                print('class A constructor') #p1 #7. class A constructor
#end of the class
print(A . mro()) #1. ABCDEFO
obj = A()
print('Bye') #8. Bye

'''

#4. Identify  Error

'''
class  c1(c1):
	pass #Name Error c1 
	
'''


#5.Find  outputs

'''
class   c1:
	def  m1(self):
			print('Parent  Method')
class  c1(c1):
	def  m1(self):
		super() . m1() #1. Parent Method
		print('Child  Method') #2. Child Method
a = c1()
a . m1()

'''

#6.Identify  Error
'''
class   c1(c2): #Name Error c2 not defined
	pass
class  c2(c1):
	pass
	
'''


#7.Find  outputs

'''
class   c2:
	def  m1(self):
			print('Parent  Method') #1. Parent Method
class   c1(c2):
	def  m1(self):
			super() . m1()
			print('Child  Method') #2. Child Method
class  c2(c1):
	def  m1(self):
			super() . m1()
			print('Grand  Child  Method') #3. Grand Child Method
a = c2()
a . m1()

'''


#8.Find  outputs  (Home  work)

'''
class  parent:
	def  m1(self):
		print('Overridden  Method')
class  child(parent):
	def  m1(self):
		print('Overriding  Method')
#end of the class
x = parent()
x . m1() #1. Overridden  Method
x = child()
x . m1() #2. Overriding  Method

'''


#9. Find  outputs   (Home  work)

'''
class   parent:
	def  m1(self):
		print('m1  method  of  parent  class')
	def  m2(self):
		print('m2  method  of  parent class')
class  child(parent):
	def  m1(self):
		print('m1  method  of  child  class')
	def  m3(self):
		print('m3  method  of  child  class')
#end of the class
x = parent()
x . m1() #1. m1  method  of  parent  class
x . m2() #2. m2  method  of  parent class
#x . m3() #Error  no m3() in parent
x = child()
x . m1() #3. m1  method  of  child  class
x . m2() #4. m2  method  of  parent class
x . m3() #5. m3  method  of  child  class

'''


#10. Find  outputs  (Home  work)

'''
class  parent:
	def  marriage(self):
		print('Arranged Marriage')
	def  property(self):
		print('One  Crore')
	def  study(self):
		print('Studies only' , end = '\t')
class  child(parent):
	def  marriage(self):
		print('Love Marriage') 
	def  study(self):
		super() . study()
		print(' + Entertainment')
#end of the class
c = child()
c . marriage() #1. Love Marriage
c . property() #2. One  Crore
c . study() #3. Studies only     + Entertainment

'''


#11. Find  outputs  (Home  work)

'''
class  parent:
	def  add(self , x , y):
		return  x + y
class  child(parent):
	def   add(self , x , y , z):
		return  x + y + z
# End of the class
c = child()
print(c . add(10 , 20 , 30)) #60
#print(c . add(10 , 20)) #Error no z

'''

#12. Find  outputs  (Home  work)

'''
class  parent:
	def  add(self , x , y):
		print('parent  method')
		return  x + y
class  child(parent):
	def   add(self , x , y , z = 3):
		print('child  method')
		return  x + y + z
#End  of  the  class
c = child()
print(c . add(10 , 20 , 30)) #1. child  method #2. 60
print(c . add(10 , 20)) #3. child  method #4. 33

'''

#13.Find  outputs  (Home  work)

'''
class  parent:
	def   m1(self , a , b , /):
		print(F'parent  method   a  :  {a}  \t  b  :  {b}')
class  child(parent):
	def   m1(self , x , y):
		print(F'child  method   x  :  {x}  \t  y  :  {y}')
# End of the class
c = child()
c . m1(x = 10 , y = 20) #1. child  method   x  :  10  \t  y  :  20
c . m1(30 , 40) #2. child  method   x  :  30  \t  y  :  40

'''


#14.Find  outputs (Home  work)

'''
from  abc  import  *
class  c1(ABC):
	@abstractmethod
	def  m1(self):
		pass
	def  __init__(slef):
		print('c1  class  constructor')
class  c2(ABC):
	def  m1(self):
		pass
	def  __init__(slef):
		print('c2  class  constructor')
class  c3:
	@abstractmethod
	def  m1(self):
		pass
	def  __init__(slef):
		print('c3  class  constructor')
class  c4(c1):
	def  m1(self):
		pass
	def  __init__(slef):
		print('c4  class  constructor')
class  c5(c1):
	def  __init__(slef):
		print('c1  class  constructor')
# End  of  the  class
#c1() # Error it's an abstract class NOC
c2() #1. c2  class  constructor
c3() #2. c3  class  constructor
c4() #3. c4  class  constructor
#c5() # Error it's an abstract class NOC

'''


#15. Find  outputs (Home  work)

'''
from   abc    import    *
class   parent(ABC):
	@abstractmethod
	def  m1(self):
		pass
	@abstractmethod
	def  m2(self):
		pass
	@abstractmethod
	def  m3(self):
		pass
class  child(parent):
	def  m1(self):
		print('m1  method  of  child  class')
class  gc(child):
	def  m2(self):
		print('m2  method  of    gc  class')
class  ggc(gc):
	def  m3(self):
		print('m3  method  of  ggc  class')
# End  of  the  class
a = ggc() 
a . m1() #1. m1  method  of  child  class
a . m2() #2. m2  method  of    gc  class
a . m3() #3. m3  method  of  ggc  class
#parent() #Error NOC
#child() #Error NOC
#gc() #Error NOC

'''


'''
#16. Write  a  program  to  determine  area  and  perimeter  of  triangle , circle , rectangle  and  square

1) What  is  the  parent  class ?  ---> shape
   What  are  child  classes ?  ---> triangle , circle , rectangle , square

2) What  is  the  area  of  triangle  ?  --->  sqrt(s * (s - a) *  (s - b) * (s - c))
    What  is  the  value  of  's' ?  ---> (a + b + c) / 2
    What  is  the  perimeter  of  triangle ?  ---> a + b + c

3) What  is  the  area  of  circle ?  --->  3.14159 * a ^ 2  where  'a'  is  radius  of  circle
    What  is  the  circumference  of  circle ?  --->  2 * 3.14159 * a

4) What  is  the  area  of  rectangle  ?  --->  a * b  where  'a'  is  length and  'b'  is  breadth
    What  is  the  perimter  of  rectangle ?  ---> 2 * (a + b)

5) What  is  the  area  of  square ?  ---> a ^ 2
    What  is  the  perimeter  of  square  ?  ---> 4 * a
'''

'''
import   math
from  abc  import  *
class  shape(ABC):
	def   get(self):
		self.a=float(input()) #How  to  read  input  to  variable  'a'  of  object  self
	@abstractmethod
	def   area(self):
		pass
	@abstractmethod
	def  peri(self):
		pass
	@abstractmethod
	def  test(self):
		pass
class  triangle(shape):
	def   get(self):
		print('Enter  3  sides  of  triangle')
		super().get()
		self.b=float(input()) 
		self.c=float(input()) #How  to  read  the  3  sides  of  triangle
	def   area(self):
	    s=(self.a+self.b+self.c)/2
	    return  math.sqrt(s*(s-self.a)*(s-self.b)*(s-self.c)) #area  of  triangle
	def   peri(self):
		return  self.a+self.b+self.c #perimeter  of  triangle
	def   test(self):
		if  (self.a+self.b)>self.c and (self.b+self.c)>self.a and (self.a+self.c)>self.b: #sum  of  every  2  sides  should  be  >   3rd   side
				pass #do  nothing
		else:
			print('Not    a  triangle')
			exit() #How  to  stop  execution
class   circle(shape):
	def   get(self):
		print('Enter  radius  of  circle  : ' , end = '\t')
		super().get() #How  to  read  radius
	def   area(self):
		return  math.pi*self.a**2 #area  of  circle
	def   peri(self):
		return  2*math.pi*self.a #circumference  of circle
	def  test(self):
		if  self.a<0: #side  is  -ve
		    print('Radius  can  not  be  -ve')
		    exit() #How  to  stop  execution
class   rectangle(shape):
	def  get(self):
		print('Enter  length  and  breadth  of  rectangle')
		super().get() 
		self.b=float(input()) #How  to  read  length  and  breadth
	def   area(self):
		return   self.a*self.b #area  of  rectangle
	def   peri(self):
		return  2*(self.a+self.b) #perimeter  of  triangle
	def  test(self):
		if  self.a==self.b: #length  and   breadth  same
		    print('Not  a rectangle')
		    exit() #How  to  stop  execution
class   square(shape):
	def   get(self):
		print('Enter  any  side  of  square :  ' , end =  '\t')
		super().get() #How  to  read  side
	def   area(self):
		return  self.a**2 #area  of  square
	def   peri(self):
		return  4*self.a #perimeter  of  square
	def  test(self):
		pass
#  End  of  the  class
def   menu():
	print('1. Triangle')
	print('2. Circle')
	print('3. Rectangle')
	print('4. Square')
	print('5. Exit')
# End  of  menu  function
def   operation(s):
	s.get() #How  to  read  inputs  to  object  's'
	s.test() #How  to  test  inputs  are  valid  (or)  not
	print('Area  :  ' ,  s.area())
	print('Perimeter  :  ' ,s.peri());
# End  of  the  function
menu()
ch = eval(input('Enter  choice  :  '))
while  ch<5: #repeat  until  user  input  is  5
	match   ch:
		case  1:
			operation(triangle()) #How  to  call  operation()  function
		case  2:
			operation(circle()) #How  to  call  operation()  function
		case  3:
			operation(rectangle()) #How  to  call  operation()  function
		case  4:
			operation(square()) #How  to  call  operation()  function
	#end  of  match
	menu()
	ch = int(input('Enter   choice  :  '))
# End of while  loop
print('Good  Bye')

'''
