# Identify  error  (Home work)
class   c1:
	def  m1(self):
		pass
class   c2:
        pass
class   c3:#Error beacause there should be a argument

# Find  outputs  (Home  work)
class   c1:
	pass
# End  of  the  class
a = c1()
print(id(a)) # random address
print(type(a)) # class '__main__'c1.object
print(a . __dict__) # {}
print(a) # '__main__'c1 object and address
del  a # deletes a
#print(a) # Error beacause there is no a


#  Find  outputs  (Home  work)
def   m1():
		print('Function') # function
class   c1:
	def   m1(self):
		print('1st  method')
	def   m1(self):
		print('2nd  method')
	def   m1(self):
		print('3rd  method') # this will be executed beacause this is the last one
# End  of  class  c1
a = c1() # class object is created
a . m1() # in that we are calling the method
m1()


#  Find  outputs  (Home  work)
class   c1:
	def   m1(self):
		print('No  argument  method')
	def   m1(self , x):
		print('Single  argument  method : ' , x)
	def   m1(self , x , y):
		print('Two  argument  method : ' , x , y)
# End  of  class  c1
a = c1()
a . m1(10 , 20) # argument with the two values will be executed
a . m1(30) # Error beacuse there is only argument
a . m1() # Error beacause there is no arguments


# Find  outputs  (Home  work)
class   c1:
	def   m1(self):
		print('Method  of  first  c1  class')
class   c1:
	def   m1(self):
		print('Method  of  second  c1  class')
class   c1:
	def   m1(self):
		print('Method  of  third  c1  class')
a = c1()
a . m1() # method of third c1 class beacause it is the latest one


# Find  outputs  (Home  work)
class   c1:
	def   m1(self):
		print('Method  of  first  c1  class')
class   c1:
	def   m1(self):
		print('Method  of  second  c1  class')
class   c1:
	pass
a = c1()
a . m1() # Error beacause there are no arguments


#  Find  outputs (Home  work)
class  c1:
        pass
# End  of  class
a = c1()
print(a . __dict__) # {}
a . x = 10
print(a . __dict__) # {x:10}
a . y = 20
print(a . __dict__) # {x:10 , y:20  }
a . x = 30
print(a . __dict__) # {x:30 , y:20}
a . y = 40
print(a . __dict__) # {x:30 , y:40}
del  a . x
print(a . __dict__) # {y:40}
del  a . y
print(a . __dict__) # {}
del   a
print(a . __dict__) # object a will be delected


Write  a  program  to  determine  area  and  perimeter  of  triangle  and  represent  triangle  by  an  object

1) What  is  the  area  of  triangle ?  --->  sqrt(s * (s - a) * (s - b) * (s - c))

2) What  is  the  formula  for  's' ?  --->  (a + b + c) / 2

3) What  is  the  perimeter  of  triangle ?  --->  a + b + c

import  math
class  triangle:
	def  get(self):
		self.a=eval(input("enter first side of a triangle:"))
		self.b=eval(input("enter second side of a triangle:"))
		self.c=eval(input("enter third side of a triangle:"))
		
	def  test(self):
		if self . a + self . b >= self . c and self . b + self . c >= self . a and self . c + self . a >=self.b:
			pass
		else:
				print('Not  a  triangle')
				exit()
	def  area(self):
			s=(self . a + self . b + self . c)/2
			return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))
	def  peri(self):
			return  self . a + self . b + self . c

if __name__=='__main__':
	t=triangle() 
	t. get()    
	t.test() 
	print('Area : ', t.area())
	print('Perimeter : ', t.peri())


output..
enter first side of a triangle:4
enter second side of a triangle:5
enter third side of a triangle:6
Area :  9.921567416492215
Perimeter :  15


#  Find  outputs  (Home  work)
class   c1:
	def  m1(self):
		x = 10
		self . x = 20
		print(x) # 10
		print(self . x) # 20
		x += 5
		self . x += 7
	def   m2(self):
		print(x) # error beacause there no x value in m2
		print(self . x) # 27
		self . x += 6
# End  of  the  class
a = c1() # create empty c1 class
a . m1()
a . m2()
print(a . x)
print(self . x)
print(x) # 33


Write  a  program  to  add  two  objects  where  each  object  contains  three  values  and
store  results  in   third  object

1st  object   --->  x = 10 , y = 20 , z = 30

2nd  object --->  x = 40 , y = 50 , z = 60

3rd  object  ---> x = 10 + 40 = 50 , y = 20 + 50 = 70 , z = 30 + 60 = 90

class  Test:
	def   get(self):
		 self.x =eval(input("enter value of x:"))
		 self.y =eval(input("enter value of y:"))
		 self.z =eval(input("enter value of z:"))
	def   add(self , m , n):
		 self.x=m.x+n.x
		 self.y=m.y+n.y
		 self.z=m.z+n.z
	def  disp(self):
		 print('x:',self.x)
		 print('y:',self.y)
		 print('z:',self.z)

a=Test()
b=Test()
c=Test()
print('First  Object')
a.get()
print('Second  Object')
b.get()
c.add(a,b)
print('Addition  results')
c.disp()

output...
First  Object
enter value of x:10
enter value of y:20
enter value of z:30
Second  Object
enter value of x:40
enter value of y:50
enter value of z:60
Addition  results
x: 50
y: 70
z: 90


#  Find  outputs (Home  work)
class  Date:
	pass
# End of the class
a =  Date()
a . dd = 15
a . mm = 8
a . yy = 1947
print(a) # gives type and address of the object a


#  Find  outputs (Home  work)
class   c1:
	def  _str_(self):
			return  '25'
class   c2:
	def  _str_(self):
			return   35
class   c3:
	def  _str_(self):
			print('Hyd')
class   c4:
	def  _str_(self , x):
			return   F'{x}'

a = c1()
b = c2()
c = c3()
d = c4()
print(a) # gives type and address of the object a
print(b) # gives type and address of the object b
print(c) # gives type and address of the object c
print(d) # gives type and address of the object d
print(b . _str_()) # 35
print(c . _str_()) # Hyd
		     none	
print(d . _str_(50)) # 50
