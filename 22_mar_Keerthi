# Program-1
# Find  outputs (Home  work)
square = lambda  x = 10  :   x * x
print(square(5))  # 25
print(square())   # 100

# Program-2
# Find  output (Home  work)
add = lambda x , y : x + y  # How  to  define  lambda  function   to  return  sum   of  two  arguments
print(type(add))                # <class 'function'>
print(add(10 , 20))             # 30
print(add(10.6 , 20.8))         # 31.4
print(add('Hyder' , 'abad'))    # Hyderabad
print(add(True , False))        # 1
print(add(25 , 10.8))           # 35.8
print(add(3 + 4j , 5 + 6j))     # 8 + 10j
#print(add(10 , '20'))          # Error because int and string cannot be sumed
#print(add())                   # Error due to missing PA
print(add)                      # Type and address of the function i.e. <function <lambda> at 0x0000024EBB089300>

# Program-3
#  Find  outputs (Home  work)
add = lambda  a = 1 , b = 2 :  a + b
print(add(10 , 20))  # 30
print(add())         # 3

# Program-4
#  Find  outputs (Home work)
print((lambda  x , y : x + y) (10 , 20) )            # 30
print((lambda  x , y : x + y) (10.8 , 20.6))         # 31.4
print((lambda  x , y : x + y) ('Hyder' , 'abad'))    # Hyderabad
print(lambda  x , y : x + y  ('Hyder'  ,  'abad'))   # Type and address of the function i.e.<function <lambda> at 0x0000025FF29C91C0>

# Program-5
#  Find  outputs (Home  work)
large = lambda x , y : x > y  #How  to  define  lambda  to  detrmine  largest  of  two  arguments
print(large(10  ,  20))             # False
print(large(10.7  ,  5.6))          # True
print(large('g'  ,  's'))           # False
print(large('Rama'  ,  'Rajesh'))   # True
print(large(True  ,  False))        # True

# Program-6
#Find  outputs (Home  work)
power = lambda  a = 3.5 , b = 2  :  a ** b
print(power(2 , 3))    # 8
print(power(4.5 , 4))  # 410.0625
print(power())         # 12.25
print(power(9))        # 81

# Program-7
# Find  outputs
all = lambda  a , b :  (a + b ,  a - b , a * b , a / b)
x = all(10 , 7)               
print(type(x))                # <class 'tuple'>
print(x)                      # (17 , 3 , 70 , 1.42857)
p , q , r , s = all(9 , 2)
print(p)                      # 11
print(q)                      # 7
print(r)                      # 18
print(s)                      # 4.5

# Program-8
#  Find  outputs
a  =  lambda  :  'Hyd'
print(a())  # Hyd
print(a)    # <function <lambda> at 0x00000272770B91C0>

# Program-9
# Find  outputs
a  =  lambda  :  print('Hyd');  print('Sec')  ; print('Cyb')
a()  # Sec <next line> Cyb <next line> Hyd

# Program-10
# Find  outputs
a  =  lambda  :  print('Hyd')  ;  print('Sec');  print('Cyb')
print(a())  # Sec <next line> Cyb <next line> Hyd <next line> None

# Program-11
# Find  outputs (Home  work)
a  =  lambda  : 'Hyd' ;  print('Sec') ;  print('Cyb')
print(a())  # Sec <next line> Cyb <next line> Hyd

# Program-12
# Find  outputs   (Home  work)
a  =  lambda  :  print('Hyd')  , print('Sec')  , print('Cyb')
print(type(a))   # Sec <next line> Cyb <next line> <class 'tuple'>
print(a)         # Type and address of a i.e. (<function <lambda> at 0x0000027DCED691C0>, None, None)
for  x  in  a:
	print(x)     # Type and address of a i.e. <function <lambda> at 0x000001C8CD1391C0> <next line> None <next line> None
#a() 
print(a[0]())    # Hyd <next line> None

# Program-13
#  Find  outputs  (Home  work)
s = 'Hyd'
print(lambda  s  :  print(s))        # Type and address of 's' i.e. <function <lambda> at 0x000002128FAA9300>
print(lambda  x  :  print(x) (s))    # Type and address of 's' i.e. <function <lambda> at 0x000002128FAA9300>
print((lambda  x  :  print(x)) (s))  # Hyd <next line> None
(lambda  x  :  print(x)) (s)         # Hyd

# Program-14
# Find outputs  (Home  work)
x = 5
adder1 = lambda  y , x = x  : x + y
x = 10
adder2 = lambda  y , x = x : x + y
x = 20
print(adder1(100))         # 'x' is 5 and 'y' is 100 and result is 5 + 100 = 105
print(adder2(200))         # 'x' is 10 and 'y' is 200 and result is 10 + 200 = 210
print(adder1(300 , 400))   # 'x' is 300 and 'y' is 400 and result is 300 + 400 = 700

# Program-15
#Find  outputs  (Home  work)
a = [lambda   x  :  x * 2 , lambda   x  :  x * 3 ,  lambda   x  :  x ** 4]
for   fun   in   a:
        print(fun(5))  # 10 <next line> 15 <next line> 625

# Program-16
#  Find  outputs
def   f1():
	print('Hyd')  # Hyd
def   f2():
	print('Sec')  # Sec
a = [f1 , f2]
for  x  in  a:
	     x()      # Hyd <next line> Sec
#a = [def   f1():  print('Hyd') ,  def   f2():  print('Sec')]   # Error because a regular function cannot be defined inside a list
print(a)          # [<function f1 at 0x000001F4D54191C0>, <function f2 at 0x000001F4D5419300>]
a = [f1() , f2()] # Hyd <next line> Sec
print(a)          # [None, None]

# Program-17
# Find output  (Home  work)
a = {'power_2'  :  lambda   x  :  x ** 2 ,
     'power_3'  :  lambda   x  :  x ** 3 ,
     'power_4'  :  lambda   x  :  x ** 4}
key = 'power_3'
print(a[key])     # Type and address of 'a' i.e. <function <lambda> at 0x00000218772E9300>
print(a[key](5))  # 125

# Program-18
# Find  outputs  (Home  work)
def   f1(x):
        return  lambda  n  :  x ** n
lamb = f1(3)
print(type(f1))    # <class 'function'>
print(type(lamb))  # <class 'function'>
print(lamb(2))     # 9
print(lamb(5))     # 243
print(lamb)        # Type and address of 'a' i.e. <function f1.<locals>.<lambda> at 0x0000027366AC9300>
#print(lamb())     # Error due to no PA

# Program-19
# Find  outputs   (Home  work)
def   eval(a , b , c):
        return   lambda    x  :    a *   x **  2  +   b * x  +  c
lam  = eval(3 , 4 , 5)
print(lam(2))    # 3 * 2 ** 2 + 4 * 2 + 5 = 25
print(lam(2.5))  # 3 * 2.5 ** 2 + 4 * 2.5 + 5 = 33.75 
print(lam(4))    # 3 * 4 ** 2 + 4 * 4 + 5 = 69

# Program-20
#Nested  lambda  function  (Home  work)
add  =  lambda    x = 10   :    lambda   y  :  x  +  y
a = add()
print(a(20))         # 'x'  is  10  and 'y'  is  20  and result  is 30
print(add(30)(40))   # 'x'  is  30  and 'y'  is  40  and result  is 70

# Program-21
# Find  outputs
a= ((10 , 'Rama' , 1000.0) , (20 , 'Sita' , 2000.0) , (15 ,'Rajesh' , 500.0) ,  (18 , 'Kiran' , 2800.0) , (5 , 'Amar' , 1300.0))   #  Nested  tuple
b = sorted(a)  # Sorts   tuple  'a'  based  on  1st  element  of  each  inner  tuple
print(b)  # [(5, 'Amar', 1300.0), (10, 'Rama', 1000.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (20, 'Sita', 2000.0)]
print()
c = sorted(a , reverse = True)  #  Sorts  tuple  'a'  in descendig  order  of   1st  element  of  inner  tuples
print(c)  #  [(20, 'Sita', 2000.0), (18, 'Kiran', 2800.0), (15, 'Rajesh', 500.0), (10, 'Rama', 1000.0), (5, 'Amar', 1300.0)]
print()
d = sorted(a ,  key =  lambda   x  :  x[1])  # Sorts   tuple  'a'  based  on   2nd  element  of  each  inner  tuple  due  to  x[1]
print(d)  # [(5, 'Amar', 1300.0), (18, 'Kiran', 2800.0), (15, 'Rajesh', 500.0), (10, 'Rama', 1000.0), (20, 'Sita', 2000.0)]
print()
e = sorted(a , key =  lambda   x  :  x[2])  # Sorts   tuple  'a'  based  on   3rd  element  of  each  inner  tuple  due  to  x[2]
print(e)  # [(15, 'Rajesh', 500.0), (10, 'Rama', 1000.0), (5, 'Amar', 1300.0), (20, 'Sita', 2000.0), (18, 'Kiran', 2800.0)]
print()
f = sorted(a , key = lambda   x  :  x[0])   # Sorts   tuple  'a'  based  on   1st  element  of  each  inner  tuple  due  to  x[0]
print(f)  # [(5, 'Amar', 1300.0), (10, 'Rama', 1000.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (20, 'Sita', 2000.0)]
print()
g = sorted(a , key = lambda  x : x[1] , reverse = True)  # Sorts  tuple  'a'  based  on  2nd  element  of  each  inner  tuple  due  to  x[1]  in  descendig  order
print(g)  # [(20, 'Sita', 2000.0), (10, 'Rama', 1000.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (5, 'Amar', 1300.0)]
print(sorted(a , key = x[1]))  # Error because 'x' does not exist

# Program-22
# Find outputs  (Home  work)
a = [ {'Make' : 'Ford' , 'Model' : 'Focus' , 'Year' : 2013} ,
        {'Make' : 'Tesla' , 'Model' : 'X' , 'Year' : 1999} ,
        {'Make' : 'Mercedes' , 'Model' : 'C350E' , 'Year' : 2008} ]  # List of dictionaries
b = sorted(a , key = lambda  x  :  x['Year'])  # # Sorts   the  dictionaries  in  the  list  accoeding  to   year  in  ascending  order
print(b)  # [{'Make': 'Tesla', 'Model': 'X', 'Year': 1999}, {'Make': 'Mercedes', 'Model': 'C350E', 'Year': 2008}, {'Make': 'Ford', 'Model': 'Focus', 'Year': 2013}]
print(sorted(a))  # Error because key arg is missing

# Program-23
# Find outputs  (Home  work)
a = ((10 , 'Rama' , 1000.0) , (20 , 'Sita' , 2800.0) , (15 , 'Vamsi' , 2000.0) , (25 , 'Kiran' , 1500.0) ,  (5 , 'Amar' , 1300.0))
print(max(a , key = lambda  x  :  x[0] ))  # (25 , 'Kiran' , 1500.0)
print(max(a , key = lambda  x  :  x[1] ))  # (15 , 'Vamsi' , 2000.0)
print(max(a , key = lambda  x  :  x[2] ))  # (20 , 'Sita' , 2800.0)
print(max(a))                              # (25 , 'Kiran' , 1500.0)

# Program-24
# Find  output  (Home  work)
add = lambda  x  :   x == 25
print(add(10))  # False
add = lambda  x = 25 :   x == 35
print(add())    # False
add = lambda  x  :   x = 25   # Error because lambda function cannot modify argument
add = lambda  x  :   x := 25  # Error because lambda function cannot modify argument


# Program-25
#  Find  outputs  (Home  work)
def    f1():
        print('f1    function')   # f1    function
def    f2():
        print('f2  function')     # f2    function
# End  of  the  function
f1()
f2()
print(f1  is  f2)                 # False because f1 and f2 point to different functions
f2 = f1                           # Ref f2 points to function f1
f2()                              # Executes function f1() because f2 points to function f1
print(f1  is  f2)                 # True because f1 and f2 point to same functions
f2 = f1()                         # # Executes function f1() which returns None by default i.e. f2 = None
print(f2)                         # None 
#f2()                              # Error because None is not a function

# Program-26
# Find  outputs (Home  work)
p = print        # How  to  assign  ref  'p'  to  print()  function
p('Hyderabad')   # How  to  call  print()  function  thru  ref  'p'  and   print  'Hyderabad'
print = None     # Ref print points to object None
print('Hello')   # Error
p('Hello')       # How  to  call  print()  function  thru  ref  'p'  and   print  'Hello'

# Program-27
# Find   outputs (Home  work)
x = id           # How  to  assign  ref  'x'  to  id()  function
print(x(25))     # How  to  call  id()  function  thru  ref  'x'  and   print  id  of  object 25
p = len          # How  to  assign  ref  'p'  to  len()  function
print(p('Hyd'))  # How  to  call  len()  function  thru  ref  'p'  and   print  length  of  'Hyd

'''
#Program-28
#  Find  outputs (Home  work)
def  outer():
	print('Outer  function')
	def  inner():
		print('Inner  function')
	# End  of  inner  function
	print('Hello')
	inner()
	print('Back  to  outer  function')
def  other():
	inner()
	print('Other  function')
# End  of  the  function
print('Begin')
outer()
print('Hi')
#inner()
#other()
print('Bye')
'''

'''
Output:
Begin
Outer  function
Hello
Inner  function
Back  to  outer  function
Hi
Bye
'''

#Program-29
# Find  output(Home  work)
def    f1(a):
	def   f2():
		return  10
	# End  of  f2  function
	return  f2() + 20 +  a
# End  of  f1  function
print(f1(30))  # 60

#Program-30
# Find  outputs (Home  work)
def  outer():
	print('Outer  function')
	def  inner1():
		print( '1st  inner  function')
	def  inner2():
		print('2nd  inner  function')
	print('Hi')
	inner2()
	print('Hello')
	inner1()
	print('Back  to  outer  function')
# End of the function
print('Begin')
outer()
print('Bye')

'''
Output:
Begin
Outer  function
Hi
2nd  inner  function
Hello
1st  inner  function
Back  to  outer  function
Bye
'''

#Program-31
# Find  outputs  (Home  work)
x = 10
def  outer():
	x = 20
	def   inner():
		x = 30
		print(x)
		print(globals()['x'])
	inner()
outer()
print('Bye')

'''
Output:
30
10
Bye
'''

#Program-32
# Find  outputs  (Home   work)
x = 10
def  outer():
	x = 20
	def   inner():
		print(x)
		print(globals()['x'])
	inner()
outer()

'''
Output:
20
10
'''

#Program-33
# Find  outputs  (Home  work)
x = 10
def  outer():
	def   inner():
		print(x)
	inner()
outer() # 10

#Program-34
# Find  outputs  (Home  work)
def  outer():
	x = 10
	def  inner():
		x = 20
		print(x)
		x +=  7
	# End  of  inner  function
	print(x)
	x += 5
	inner()
	print(x)
# End  of  the  function
outer()
print('Bye')

'''
Output:
10
20
15
Bye
'''

#Program-35
#  Find  outputs  (Home  work)
def  outer():
	x = 10
	def  inner():
		nonlocal  x
		print(x)
		x = 20
		print(x)
		x += 5
	# End  of  inner  function
	print(x)
	x += 5
	inner()
	print(x)
# End  of  outer  function
outer()
#print(x)

'''
Output:
15
20
25
'''

#Program-36
#  Find  outputs  (Home  work)
def  outer():
	x = 10
	def  inner():
		print(x)
		#nonlocal  x
		x = 20
		print(x)
		x += 5
	# End  of  inner  function
	print(x)
	x += 5
	inner()
	print(x)
# End  of  outer  function
outer()

#Program-37
#  Find   outputs(Home  work)
def  outer():
	x = 10
	def  inner():
		global   x
		x = 20
		print(x)
		x += 5
	# End  of  inner  function
	print(x)
	x += 5
	inner()
	print(x)
# End  of  outer  function
outer()
print(x)

'''
Output:
10
20
15
25
'''

#Program-38
# Find  outputs(Home  work)
def  outer():
	def  inner():
		#nonlocal  x
		x = 20
		print(x)
	# End  of  inner  function
	inner()
	print(x)
# End  of  the  function
outer()
print(x)

#Program-39
# Find  outputs(Home  work)
def  outer():
	def  inner():
		global   x
		x = 20
		print(x)
		x = x + 5
	# End  of  inner  function
	inner()
	print(x)
# End  of  the  function
outer()
print(x)

'''
Output:
20
25
25
'''

#Program-40
#  Identify  Error
def   f1():   # Error only inner function can use nonlocal keyword
        nonlocal   x

#Program-41
# Find  outputs (Home  work)
def  outer():
	a = 10  # Local Variable of outer() function
	b = 20  # Local Variable of outer() function
	def   inner():
		nonlocal   a  # Treats 'a' as variable of outer() function
		a = 100
		b = 200
		print(a , b)  # 100 <space> 200
	# End  of  inner  function
	print(a , b)   # 10 <space> 20
	inner()
	print(a , b)   # 100 <space> 20
#end of outer function
outer()

'''
OutPut:
10 20
100 200
100 20
'''

#Program-42
# Find  outputs (Home  work)
def   f1():
	x = 'John'  # Local Variable of outer() function
	def  f2():
		nonlocal  x  # Treats 'x' as variable of outer() function
		x =  'Hello'
	#end of inner function
	f2()
	return  x
#  End  of  f1()  function
print(f1())  # Hello

#Program-43
# Find  output(Home  work)
def  fun():
	x = 10    # Local Variable of fun() function
	def    gun():
		#x =  x +  20  # Error because LV of gun() function is not initialized
		print(x)       # # Local Variable of fun() function  i.e.  10
	#end of inner function
	gun()
#end of outer function
fun()

#Program-44
#  Identify  Error
x = 10
def   outer():
	x = 20
	def  inner():
		global   x  # Treats 'x' as GV
		nonlocal  x # Error because 'x' is already global and cannot be treated as variable of outer() function
		
#Program-45
#  Find  outputs  (Home   work)
def   f1():
	x = 10
	def  f2():
		nonlocal   x       # Treats 'x' as variable of f1() function
		def  f3():
			nonlocal   x   # Treats 'x' as variable of f1() function
			print(x)       # 10
		f3()
	f2()
f1()
