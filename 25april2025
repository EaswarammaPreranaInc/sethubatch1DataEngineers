25/4/2025 

#1. Find  outputs

'''
class  c1:
        pass
class  c2(c1):
        pass
# End of the class
print(issubclass(c2 , c1)) # True
print(issubclass(int , float)) #False
print(issubclass(str , object)) #True
print(issubclass(c1 , object)) #True
print(issubclass(c2 , object)) #True
a = c1()
b = c2()
#print(issubclass(b , a)) #Error 
#print(issubclass(c2 , a)) #Error

'''

#2. Find outputs

'''
class c1:
        pass
class  c2(c1):
        pass
class  c3(c2):
        pass
class  c4(c3):
        pass
print(issubclass(c4 , c3)) #True
print(issubclass(c4 , c2)) #True
print(issubclass(c4 , c1)) #True
print(issubclass(c4 , object)) #True
print(issubclass(c4 , (int , float , str , bool))) #False
print(issubclass(c4 , (int , float , c1 , str , bool))) #True
#print(issubclass(c4 , [int , float , c1 , str , bool])) #Error 2nd arg should be tuple

'''


#3. Find  outputs

'''
class  c1:
        pass
class  c2(c1):
        pass
class  c3(c2):
        pass
class  c4:
        pass
#  End  of  the  class
print(isinstance(25 , int)) #True
print(isinstance(10.8 , float)) #True
print(isinstance('Hyd' , str)) #True
print(isinstance(3 + 4j , complex)) #True
print(isinstance(True , bool)) #True
print(isinstance(True , int)) #True
print(isinstance('True' , str)) #True
print(isinstance(True , str)) #False
print()
a = c3()
print(isinstance(a , c3)) #True
print(isinstance(a , c2)) #True
print(isinstance(a , c1)) #True
print(isinstance(a , object)) #True 
print(isinstance(a , c4)) #False
print(isinstance(a , (int  ,  float  ,  str  ,  bool))) #False
print(isinstance(a , (int  ,  float  ,  c3 , str  ,  bool))) #True
print(isinstance(a , (int  ,  float  ,  c1  ,  str  ,  bool))) #True
#print(isinstance(a , [int  ,  float  ,  c3 , str  ,  bool])) #Error 2nd arg is tuple 

'''



#4. Multilevel  inheritance  demo  program

'''
class  A:
	def  m1(self):
		print('class   A  method')
		
class  B(A):
	def  m1(self):
		print('class  B   method')
		
class   C(B):
	def  m1(self):
		print('class   C    method')
		
class   D(C):
	def   m1(self):
		print('class   D   method')
		super().m1() #How  to  call  method  m1()  of  class  C
		super(D,D()).m1() #how  to  call  method  m1()  of  class  C  in  another  way
		super(D,self).m1() #How  to  call  method  m1()  of  class  C  in  one  more  way
		super(C,C()).m1() #How  to  call  method  m1()  of  class  B
		super(C,self).m1() #How  to  call  method  m1()  of  class  B  in  another  way
		super(B,B()).m1() #How  to  call  method  m1()  of  class  A
		super(B,self).m1() #How  to  call  method  m1()  of  class  A  in  another  way
		#super(A , self) . m1() #Error no m1 in object class 
		#super(C) . m1() #Error req 2nd arg 
		
# End  of  the  class
d=D() #How  to  call  method  m1()  of  class  D
d.m1()  

'''



#5. Find  outputs  (Home  work)

'''
class  father:
        def  height(self):
                print('Father  Height')
class  mother:
        def  color(self):
                print('Mother  Color')
class  child(mother , father):
        def  qualification(self):
                print('Child Qualification')
# End  of  the  class
c  =  child()
c . qualification() #Child Qualification
c . color() #Mother color 
c . height() #Father Height
#c . m1() #Error no m1()

'''

#6. Find  outputs

'''
class  uncle:
        def  m1(self):
                print('Uncle  Method')
class  mother:
        def  m1(self):
                print('Mother  Method')
class  father:
        def  m1(self):
                print('Father  Method')
class  child(father , mother , uncle):
        def  m1(self):
                print('Child  Method')
#end  of  the  class
c = child()
c . m1() #Child Method

'''


#7. Find  outputs

'''
class  uncle:
        def  m1(self):
                print('Uncle  Method')
class  mother:
        def  m1(self):
                print('Mother  Method')
class  father:
        def  m1(self):
                print('Father  Method')
class  child(father , mother , uncle):
	pass
#end  of  the  class
c = child()
c . m1() #Father  Method

'''


#8. Find  outputs

'''
class  uncle:
        def  m1(self):
                print('Uncle  Method')
class  mother:
        def  m1(self):
                print('Mother  Method')
class  father:
        pass
class  child(father , mother , uncle):
        pass
#end  of  the  class
c = child()
c . m1() #Mother  Method

'''


#9. Find  outputs

'''
class  uncle:
        def  m1(self):
                print('Uncle  Method')
class  mother:
        pass
class  father:
        pass
class  child(father , mother , uncle):
        pass
#end  of  the  class
c = child()
c . m1() #Uncle  Method

'''


#10. Find  outputs

'''
class  uncle:
        pass
class  mother:
        pass
class  father:
        pass
class  child(father , mother , uncle):
        pass
#end  of  the  class
c = child()
#c . m1() #Error 

'''


#11. Parent  and  child  class  constructors (Home  work)

'''
class   parent:
	def   _init_(self):
		print('parent  constructor')
	def   _del_(self):
		print('parent  destructor')
class  child(parent):
	def   _init_(self):
		super()._init_() #How  to  call  parent  class  constructor 
		print('child   constructor')
	def   _del_(self):
		super()._del_() #How  to  call  parent  class  destructor #4. parent  destructor
		print('child   destructor') #5. child destructor
# End of the class
c = child() #1. parent  constructor  #2. child   constructor
print('Bye') #3. Bye 

'''


#12. Find  outputs  (Home  work)

'''
class   parent:
	def   _init_(self):
		print('parent  constructor')
	def   _del_(self):
		print('parent  destructor')
class  child(parent):
	def   _init_(self):
		print('child   constructor') #1.child   constructor
	def   _del_(self):
		print('child  destructor')
# End of the class
c = child()
print('Bye') #2.Bye 
#3. child destructor

'''


#13. Find  outputs  (Home  work)

'''
class   parent:
	def   _init_(self):
		print('parent  constructor')
	def   _del_(self):
		print('parent  destructor')
class  child(parent):
	pass
# End of the class
c = child() #1. parent constructor
print('Bye') #2. Bye 
#3. parent destructor

'''

#14. Parent  and  Child  constructor  demo  program  (Home  work)

'''
class  parent:
	def   _init_(self , a1 , b1):
		self . a = a1
		self . b = b1
	def disp(self):
		print(self . a , self . b , sep = '\t' , end = '\t')
class   child(parent):
	def _init_(self , a2 = 0  , b2 = 0 , c2 = 0  , d2 = 0):
		super()._init_(a2,b2) #How  to  call  parent  class  constructor  with  a2 , b2
		self . c = c2
		self . d = d2
	def  disp(self):
		super().disp() #How  to  call  parent  class  disp()  method
		print(self . c , self . d , sep = '\t')
		
#end of the class
x = child(10 , 20 , 30 , 40)
y = child()
print('Object  x') # Object x
x . disp() # 10 20 30 40 
print('Object  y') #Object y
y . disp() # 0 0 0 0

'''


#15.Find outputs  (Home  work)

'''
class  parent:
	x = 100
	def   _init_(self):
		self . x = 10
class   child(parent):
	def   _init_(self):
		super() . _init_()
		self . y = 20
	def disp(self):
		print(parent.x) #How  to  print  static  variable  'x' #1. 100
		print(self.x) #How  to  print  variable  'x'  of  object  'c' #2. 10
		print(self.y) #How  to  print  variable  'y'  of  object  'c' #3. 20
		print(self . y) #4. 20
#end of the class
c = child()
c . disp()

'''


#16. Find  outputs

'''
class  parent:
	x = 10
	def  _init_(self):
		self . x = 20
class   child(parent):
	def  _init_(self):
		self . x = 30
		print(self . x) #1. 30 
		super() . _init_()
	def  disp(self):
		print(self . x) #2. 20
		print(super() . x) #3. 10
# End of the class
c = child()
c . disp()

'''

#c---> x=30 ---> x=20 

#17. Find outputs

'''
class    parent:
	a=10 #How  to  add  static  variable  'a'  to  parent  class  with  value  10
	def     _init_(self):
		print('Parent  constructor')
		self.x=30 #How  to  add  instance  variable  'x'  with  value  30
		
	def   m1(self):
		print('Parent  class  instance  method  :  ' ,self.x) #How  to  print  variable  'x'
		
	@classmethod
	def    m2(cls):
		print('Parent  class  "class"  method  :  ' , parent.a) #How  to  print  static  variable  'a'
		print('Parent  class  "class"  method  :  ' , cls.a)#How  to  print  static  variable  'a'  in  another  way
		#print(self . a) #Error no instance a
	@staticmethod
	def   m3():
		print('Parent  class  static  method  :  ' ,parent.a) #How  to  print  static  variable  'a'
		
	def   _del_(self):
		print('parent  destructor  :  ' ,self.x )#How  to  print  variable  'x'
		
class  child(parent):
	b=20 #How  to  add  static  variable  'b'  with  value  20
	def   _init_(self):
		super()._init_() #How  to  call  parent  class  constructor
		print('Child  constructor')
		self.y= 40 #How  to  add  instance  variable  'y'  with  value  40
	def   m1(self):
		super().m1() #How  to  call  m1()  method  of  parent  class
		print('Child  class  instance  method')
		print(self.y) #How  to  print  variable  'y'
	@classmethod
	def   m2(cls):
		super(child,child).m2() #How  to  call  m2()  method  of  parent  class
		parent.m2() #How  to  call  m2()  method  of  parent  class  in  another  way
		#cls . m2() #recursion Error 
		#self . m2() #Error no self 
		print('Child  class  "class"  method')
		print(parent.a) #How  to  print  static  variable  'a'
		print(cls.a)#How  to  print  static  variable  'a'  in  another  way
		print(super().a) #How  to  print  static  variable  'a'  in  one  more  way
		print(child.a) #How  to  print  static  variable  'a'  in  last  way
		print(child.b) #How  to  print  static  variable  'b'
		print(cls.b) #How  to  print  static  variable  'b'  in  another  way
	@staticmethod
	def   m3():
		parent.m3() #How  to  call  m3()  method  of  parent  class
		super(child,child) . m3() #Error we can't call static method with 0 arg 
		#self . m3() # Error no self
		#cls . m3() #Error no cls
		print('child  class  static  method' ,parent.a)#How  to  print  static  variable  'a'
		print(parent.a) #How  to  print  static  variable  'a'  in  another  way
		print(child.b) #How  to  print  static  variable  'b'
	def _del_(self):
		super()._del_() #How  to  call  destructor  of  parent  class
		print('child  destructor' , self.y) #How  to  print  variable  'y'
#end of the class
child.m2() #How  to  call  m2()  method  of  child  class
child.m3() #How  to  call  m3()  method  of  child  class
c=child()
c.m1() #How  to  call  m1()  method  of  child  class

'''
