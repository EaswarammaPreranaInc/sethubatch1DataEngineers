---------------- Var-Arg Functions ----------------
Program-1
#  Variable  number  of  arguments  demo  program
def   f1(*t):
	print(t)
	print(type(t))
	print(len(t))
	print()
# End  of  the  function
f1(10 , 20 , 15 , 18)   #  Tuple  of  4  elements  is  passed  to  the  function
f1()
f1([10 , 20] , (30 , 40 , 50) , {60 , 70 , 80 , 90})
f1('Hyd')
tpl = (100 , 200 , 150)
f1(tpl)
#f1(t = (10 , 20 , 30))  #  Error  :  var-arg  param  can  not be  ka

'''
Output:
(10, 20, 15, 18)
<class 'tuple'>
4

()
<class 'tuple'>
0

([10, 20], (30, 40, 50), {80, 90, 60, 70})
<class 'tuple'>
3

('Hyd',)
<class 'tuple'>
1

((100, 200, 150),)
<class 'tuple'>
1
'''


Program-2
# Write  a  function  to  determine  average  of  arguments  passed  from  function  call.
def  avg(*a):
	try:
		return sum(a) / len(a)  #Write  code  to  return  average  of  arguments  passed  from  the  function  call  (single  line)
	except ZeroDivisionError:
		return 0
	except TypeError:
		return sum(a[0]) // len(a[0])
# End  of  the  function
print(avg(10 , 20 , 15 , 18)) #  Average  of  10 , 20 , 15  and  18  i.e.  15.75
print(avg(25 , 10.8 , True))  # 12.266666666666666
print(avg(10.8 , 20.6 , 15.2 , 14.9 , 9.8))  # 14.26
print(avg())  # 0
print(avg(25))  # 25.0
print(avg(3 + 4j , 5 + 6j))  # (4+5j)
tpl = (10 , 20 , 15 , 18)
print(avg(tpl))  # 15


Program-3
# Write  a  function  to  concatenate  strings  passed  from  the  function  call ? (Home  work)
def  concat(*a):
	return ' ' . join(a)  #Write  code  to  return  join  of  all  the  strings  passed  from  the  function  call  (1  line)
# End   of  the   function
print(concat('Sankar', 'Dayal', 'Sarma'))  # Sankar Dayal Sarma
print(concat('Hyd', 'Is', 'Green', 'City'))  # Hyd Is Green City
print(concat('Python', 'Is', 'A', 'Great', 'Language'))  # Python Is A Great Language
print(concat())  # Empty String
print(concat('Python'))  # Python
#print(concat(1, 2, 3))  # Error


Program-4
# Find  outputs
def   f1(a = 25  , *b):	
        print(F'a : {a}  \t   b  :  {b} ')
# End  of  the  function
f1(10 , 20 , 30 , 40)                   # a : 10             b  :  (20, 30, 40)
f1(50 , 60)                             # a : 50             b  :  (60,)
f1(70)                                  # a : 70             b  :  ()
f1(a = 80)                              # a : 80             b  :  ()
#f1(b = (10 , 20 , 30) , a = 40)        # Error because 'b' cannot be a KA
f1()                                    # a : 25             b  :  ()
#f1(a = 10 , (20 , 30 , 40))            # Error due to PA after KA
#f1(25 , b = (10 , 20 , 30))            # Error because 'b' cannot be a KA
#f1(25 , a = (10 , 20 , 30))            # Error because sending values to 'a'a twice
f1((10 , 20 , 30) , 10 , 20 , 30)  # a : (10, 20, 30)           b  :  (10, 20, 30)
#f1(a = (10 , 20 , 30) , 10 , 20 , 30)  # Error due to PA after KA


Program-5
# Find  outputs
def    f1(*a , b):
	print(F'a  :  {a}   \t   b  :  {b}')
# End  of  the  function
f1(10 , 20 , 30 , b = 40)                # a  :  (10, 20, 30)         b  :  40
f1(50 , b = 60)                          # a  :  (50,)                b  :  60
f1(b = 70)                               # a  :  ()                   b  :  70
#f1(b = 10 , a = (20 , 30 , 40))         # Error because 'a' cannot be a KA as it is var-arg parameter
#f1(b = 10 , (20 , 30 , 40))             # Error due to PA after KA
#f1()                                    # Error because there is no arguments passed to 'b'
#f1(10 , 20 , 30 , (10 , 20 , 30))       # Error because arg is not passed for 'b'
#f1(10 , 20 , 30 , 40)                   # Error because arg is not passed for 'b'
#f1(25)                                  # Error because arg is not passed for 'b'
f1(10 , 20 , 30 , b = (10 , 20 , 30))    # a  :  (10, 20, 30)         b  :  (10, 20, 30)


Program-6
# Find  outputs
def   f1(a , *b , c):
        print(F'a  :  {a}  \t  b  :  {b}  \t  c  :  {c}')
# End  of  the  function
f1(10 , 20 , 30 , 40 , c = 50)           # a  :  10          b  :  (20, 30, 40)      c  :  50
f1(60 , 70 , c = 80)                     # a  :  60          b  :  (70,)     c  :  80
f1(90 , c = 100)                         # a  :  90          b  :  ()        c  :  100
#f1(a = 1 , 2 , c = 3)                   # Error due to PA after KA
#f1(1 , 2 , 3)                           # Error because arg is not passed for 'c'
#f1(a = 1 , b = 2 , c = 3)               # Error because 'b' cannot be KA as it is a var-arg parameter
#f1(a = 25 , 100 , 200 , 300 , c = 35)   # Error due to PA after KA


Program-7
# Which  of  the  following  are  valid  ?
def   f1(*a , *b):            # Error due to more than one var-arg parameter
        pass
def  f2(*a , b):              # Valid due to singlr var-arg parameter
        pass
def  f3(a , *b):              # Valid due to singlr var-arg parameter
        pass
def  f4(a , b):               # Valid
        pass
def    f5(a , *b , c):        # Valid due to singlr var-arg parameter
        pass
def   f6( * , a , *b , c):    # Error because 'a' and 'b' cannot be KA's
       pass
def   f7(a , *b , c ,  /):    # Error because 'c' cannot be PA
       pass


Program-8
# Find  outputs
def   f1(*a):
	print(a)
	print(type(a))
	for  x  in  a:
		print(x)
		print(type(x))
# End  of  the  function
f1([10 , 20] , {30 , 40} , (50 , 60))

'''
Output:
([10, 20], {40, 30}, (50, 60))
<class 'tuple'>
[10, 20]
<class 'list'>
{40, 30}
<class 'set'>
(50, 60)
<class 'tuple'>
'''


Program-9
# Variable  number  of  keyword  arguments  demo  program
def   disp(**a):
	print('Results')
	print(type(a))
	print(a)
	print()
#End  of  the  function
disp(RollNo = 10 , StudName = 'Rama  Rao')  #  Dictionary  of  2  key : value  pairs  is  passed  to  the  function
disp(EmpNo = 25 , EmpName = 'Sita' , Salary = 10000.0)
disp(AcNo = 30 , CustName = 'Kiran' , Balance = 20000.0 , Gender = 'm')
disp()

'''
Output:
Results
<class 'dict'>
{'RollNo': 10, 'StudName': 'Rama  Rao'}

Results
<class 'dict'>
{'EmpNo': 25, 'EmpName': 'Sita', 'Salary': 10000.0}

Results
<class 'dict'>
{'AcNo': 30, 'CustName': 'Kiran', 'Balance': 20000.0, 'Gender': 'm'}

Results
<class 'dict'>
{}
'''


Program-10
# Find  outputs
def  f1(**a):
	print('Results')
	for  k , v   in   a . items():
		print(k , v , sep = ' ... ')
# End  of  the  function
f1(Empno = 25 , Empname = 'Rama  Rao' , Salary = 10000.0 , Gender = 'm')
f1()

'''
Output:
Results
Empno ... 25
Empname ... Rama  Rao
Salary ... 10000.0
Gender ... m
Results
'''


Program-11
# Find  outputs
def   f1(*a):
	print(type(a))
	print(a)
def   f2(**a):
	print(type(a))
	print(a)
# End  of  the  function
f1(25 , 10.8 , 'Hyd' , True)
print()
f2(EmpNum = 25 , EmpName =  'Sita' , Salary = 10000.0)

'''
Output:
<class 'tuple'>
(25, 10.8, 'Hyd', True)

<class 'dict'>
{'EmpNum': 25, 'EmpName': 'Sita', 'Salary': 10000.0}
'''


Program-12
#  Find  outputs
def   f1(empno , ename , sal):
	print(F'Emp  Number  :  {empno}  \t  Emp  Name  :  {ename}  \t  Salary  :	{sal}')
def   f2(**a):
	print(a)
# End  of  the  function
f1(empno = 25 , ename = 'Sita' , sal = 10000.0)
f1(eno = 25 , empname = 'Sita' , salary = 10000.0)  # Error
f2(empno = 25 , ename = 'Sita' , sal = 10000.0)
f2(eno = 25 , empname = 'Sita' , salary = 10000.0)

'''
Output:
Emp  Number  :  25        Emp  Name  :  Sita      Salary  :     10000.0
{'empno': 25, 'ename': 'Sita', 'sal': 10000.0}
{'eno': 25, 'empname': 'Sita', 'salary': 10000.0}
'''


Program-13
# Find  outputs
def    f1(a ,  *b , **c):
	print(a)
	if   b:
		print(b)
	if  c:
		print(c)
# End  of  the  function
f1(25)
print()
f1('Hyd' , 10 , 20 , 30)
print()
f1(10.8 , 25 , 'Hyd' , True , EmpNo = 12 , EmpName = 'Rama  Rao' , Salary = 10000.0)

'''
Output:
25

Hyd
(10, 20, 30)

10.8
(25, 'Hyd', True)
{'EmpNo': 12, 'EmpName': 'Rama  Rao', 'Salary': 10000.0}
'''

-------------------- Global variables -------------------
Program-14
#Find  outputs
a = 10   # Global Variable
def   f1():
	b = 40   # Local Variable
	print('a : ' , a)
	print('b : ' , b)
	print('c : ' , c)
	print()
# End  of  f1()  function
b = 20   # Global Variable
def    f2():
	a = 50   # Local Variable
	print('a : ' , a)
	print('b : ' , b)
	print('c : ' , c)
# End  of  f2()  function
c = 30   # Global Variable
print('a : ' , a)
print('b : ' , b)
print('c : ' , c)
print()
a +=  1
b +=  1
c +=  1
f1()
a +=  1
b +=  1
c +=  1
f2()
print('Bye')

'''
Output:
a :  10
b :  20
c :  30

a :  11
b :  40
c :  31

a :  50
b :  22
c :  32
Bye
'''


Program-15
# Find  outputs
def   f1():
	a = 20
	print(a) # 20
	a += 1
#End  of  the  function
a = 10
print(a)     # 10
a += 1       # 11
f1()  
print(a)

'''
Output:
10
20
11
'''


Program-16
# Find  outputs
def   f1():
	a = 20
	print(a)          # LV i.e. 20
	dict = globals()  # {'a' : 11}
	print(dict['a'])  # GV i.e. 11
	a = 30            # Modifies LV 20 to 30
	dict['a'] = 40    # Modifies GV to 40
#  End  of  f1()  function
a = 10      # Global Variable
print(a)    # GV i.e. 10
a += 1      # GV is incremented br 1 i.e. 11
f1()
print(a)    # GV i.e. 40

'''
Output:
10
20
11
40
'''


Program-17
# Find  outputs
x = 10   # Global Variable
def   f1():
	print(x) # GV i.e. 10
	print(globals()['x'])  # GV i.e. 10
# end of the function
f1()

'''
Output:
10
10
'''


Program-18
# Find  outputs
def  f1():
	x = 20   # Local Variable
	print(x)  # LV i.e. 20
#	print(globals()['x'])  # Error because GV 'x' does not exist  i.e. {}['x] Throws Error
# End  of  the  function
f1()


Program-19
# Find outputs
def  f1():
	a = 40  # Local Variable
	b = 50  # Local Variable
	c = 60  # Local Variable
	print(a , b , c)  # 40 <space> 50 <space> 60
	dict = globals()  # {'a' : 10 , 'b' : 20 , 'c' : 30}
	print(dict['a'] , dict['b'] , dict['c'])  # GV i.e. 10 <space> 20 <space> 30
	dict['a'] = 100   # Modifies GV 'a' 100
	dict['b'] = 200   # Modifies GV 'b' 200
	dict['c'] = 300   # Modifies GV 'c' 300
def  f2():
	print(a , b , c)  # GV i.e. 100 <space> 200 <space> 300
# End  of  f2  function
a = 10  # Global Variable
b = 20  # Global Variable
c = 30  # Global Variable
f1()
f2()

'''
Output:
40 50 60
10 20 30
100 200 300
'''


Program-20
# global  keyword  demo  program
def    f1():
	x = 20      # Local Variable
	print(x)    # LV i.e 20
def   f2():
	global  x   # Treats 'x' as GV to f2() function
	x = 30      # Modifies GV to 30
	print(x)    # GV i.e. 30
	x += 1      # increments GV i.e. 31
def   f3():
	global  y   # Treats 'y' as GV to f3() function
	y = 40      # Creates GV with value 40
	print(y)    # GV i.e. 40
	y += 1      # increments GV i.e. 41
def   f4():
	x = 50      # Creates LV with value 50
	#global   x  # Error because there is elready LV with name 'x'
#  End  of  the  functions
x = 10     # Global Variable
print(x)   # GV i.e. 10
x += 1     # increments GV i.e. 11
f1()
print(x)   # GV i.e. 11
f2()
print(x)   # GV i.e. 31
x += 1     # increments GV i.e. 32
f3()
print(y)   # GV i.e. 41
f4()
print(x)   # GV i.e. 32

'''
Output:
10
20
11
30
31
40
41
32
'''


Program-21
# Find outputs (Home  work)
def  f1():
	global  a   # treats 'a' as GV to f1() function
	a = 20      # Modifies GV to 20
	print(a)    # GV i.e. 20
	print(globals()['a'])  # GV i.e. 20
	a = 30      # Modifies GV to 30
# End of the function
a = 10    # Global Variable
print(a)  # GV i.e. 10
f1()
print(a)  # 30

'''
10
20
20
30
'''


Program-22
# Find  outputs
def  f1():
	global  a   # Treats 'a' as a GV of f1() function
	#print(a)   # Error because GV of 'a' does not exist
	a = 10      # Creates a GV with value 10
	print(globals()['a'])  # GV i.e. 10
	a = 20      # Modifies GV to 20
	print(a)    # 20
	a = 30      # Modifies GV to 30
def  f2():
	print(a)    # GV i.e. 30
# End  of   f2   function
f1()
f2()
print(a)        # GV i.e. 30

'''
Output:
10
20
30
30
'''


Program-23
# Find outputs
def  f1():
	global   a    # Treats 'a' as a GV of f1() function
	a = 10        # Creates a GV with value 10
	print(a)      # GV i.e. 10
	a = 20        # Modifies GV to 20
def  f2():
	global  a     # Treats 'a' as a GV of f2() function
	print(a)      # GV i.e. 20
	a = 30        # Modifies GV to 30
def  f3():
	print(a)      # GV i.e. 30
	globals()['a'] = 40  # Modifies GV to 30
# End  of  the  function
f1()
f2()
f3()
print(a)   # GV i.e. 40

'''
Output:
10
20
30
40
'''


Program-24
# Find outputs
def  f1():
	global   a  # Treats 'a' as a GV of f1() function
	a = 10      # Creates a GV with value 10
	print(a)    # GV i.e. 10
	a = 20      # Modifies GV to 20
def  f2():
#	print(a)    # Error because LV 'a' is not initialized
	a = 30      # Creates a LV with value 30
	print(a)    # LV i.e. 30
def  f3():
	print(a)    # GV i.e. 20
	globals()['a'] = 40  # # Modifies GV to 40
# End  of  the  function
f1()
f2()
f3()
print(a)   # GV i.e. 40

'''
Output:
10
30
20
40
'''


Program-25
#  Find  outputs
def  f1():
        a = 10     # Creates a LV with value 10
        #global  a # Error because LV 'a' already exists
        print(a)   # LV i.e. 10
        global  b  # Treats 'b' as GV to f1() function
        b = 20     # Creates GV with value 20
# End  of  f1()  function
f1()
#print(a)   # Error because there is no GV 'a'
print(b)    # GV i.e. 20

'''
Output:
10
20
'''


Program-26
# Find outputs
def  f1():
        global  a   # Treats 'a' as GV to f1() function
        print(a)    # GV i.e. 11
        a += 1      # Increments GV i.e. 12
def  f2():
        global  a   # Treats 'a' as GV to f2() function
        print(a)    # GV i.e. 13
        a += 1      # Increments GV i.e. 14
# End  of  the  function
a = 10     # Global Variable
print(a)   # GV i.e. 10
a += 1     # Increments GV i.e. 11
f1()
print(a)   # GV i.e. 12
a += 1     # Increments GV i.e. 13
f2()
print(a)   # GV i.e. 14

'''
Output:
10
11
12
13
14
'''


Program-27
# Find  outputs
def   f1():
	a = 20     # Local Variable
	print(a)   # LV i.e. 20
def  f2():
	#print(a)   # Error because LV 'a' is not initialized
	#a += 1     # Error because 'a'a on RHS side is not yet initialized
	pass
# End of the function
a = 10   # Global Variable
print(a) # GV i.e. 10
f1()
a += 1   # Increments GV i.e. 11
f2()
print(a) # GV i.e. 11

'''
Output:
10
20
11
'''


Program-28
# Find outputs
def  f1():
	a = 20      # Creates a LV with value 20
	#global   a  # Error because there is already LV with name 'a'
	print(a)    # LV i.e. 20
	print(globals()['a'])  # GV i.e. 11
	a = 30      # Modifies LV to 30
	globals()['a'] = 40  # Modifies GV to 40
#  End  of  f1()   function
a = 10    # Global Variable
print(a)  # GV i.e. 10
a += 1    # Increments GV i.e. 11
f1()
print(a)  # GV i.e. 40

'''
Output:
10
20
11
40
'''


Program-29
#  Find   outputs
def   f1():
	#x = x + 5   # Error because LV 'x' is not yet initialized
	pass
# End  of  f1  function
def  f2():
	x = globals()['x'] + 5  # Creates LV with value 10 + 5 = 15
	print(x)  # LV i.e. 15
# End of f2  function
x = 10  # Global Variable
f1()
f2()
print(x)  # GV i.e. 10

'''
Output:
15
10
'''
