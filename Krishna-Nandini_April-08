Program-1
'''
Repeat  prog5a  such  that  methods  are  called  in  another  way

1) What  are  the  two  ways  to  call  a  method ?  --->  object . method()  and  classname . method(object)

2) Import  and   use  triangle  class  defined  in  prog5a  but  do  not   define  triangle  class  again
'''
from prog5a import triangle 
t = triangle() # How  to  create  triangle  object
triangle.get(t) # How  to  call  get()  method  in  another  way
triangle.test(t) # How  to  call  test()  method  in  another  way
print('Area : ',  triangle.area(t))  # How  to  call  area()  method  in  another  way
print('Perimeter: ', triangle.peri(t) ) # How  to  call  peri()  method  in  another  way

'''
Output:
Enter 1st side of triangle: 3
Enter 2nd side of triangle: 4
Enter 3rd side of triangle: 5
Area :  6.0
Perimeter:  12
'''


Program-2
'''
Write  a  program  to  determine  total , average  and  grade  of  a  student
Inputs  are  Roll Number , Stud  Name , Marks  of  3  subjects  and  Gender
'''
class   Student:
	def   get(self):
		self.rno = eval(input('Enter Roll Number: '))  # How  to  read  roll  number  into  object  self
		self.sname = input('Enter Student Number: ')  # How  to  read  student  name  into  object  self
		self.gender = input('Enter Gender: ')  # How  to  read  gender  into  object  self
		self.m = []  # How  to  read  marks  of  3  subjects
		for i in range(3):
			marks = int(input(F'Enter marks of subject{i + 1}: '))
			self.m.append(marks)
	def   compute(self):
		self.total = sum(self.m)  # How  to  calculate  total  marks
		self.average = self.total / 3  # How  to  calculate  average  marks
		if  min(self.m) < 40:      # At  least  one  subject  is  below  40:
				self.grade = 'Fail'          # How  to  initilaize  grade  to  'Fail'
		elif  self.average >= 70:  # average  is  above  >= 70%:
				self.grade = 'Distinction'   # How  to  initilaize  grade  to  'Distinction'
		elif  self.average >= 60:  # average  is  above  >= 60%:
				self.grade = ' First Class'  # How  to  initilaize  grade  to  'First  class'
		elif  self.average >= 50:  # average  is  above  >= 50%:
				self.grade = 'Second Class'  # How  to  initilaize  grade  to  'Second  class'
		else:
				self.grade = 'Third Class'   # How  to  initilaize  grade  to  'Third  class'
	def  disp(self):
		print('Roll  Number  :  ' ,   self.rno)
		print('Student  Name  :  ' , self.sname)
		print('Gender  :  ' ,  self.gender )
		print('Total  Marks  :  ' , self.total)
		print('Average  :  ' , self.average)
		print('Grade  :  ' , self.grade)
	def   __str__(self):
		# return  All  the   values  of  object  self  in  the  form  of  string
		return F'{self.rno} \t {self.sname} \t {self.gender} \t {self.total} \t {self.average}  \t  {self.grade}'
#End  of  the  class
s = Student()  # How  to  create  Student  class  object
s.get()  # How  to  read  inputs  into  object
s.compute()  # How  to  store  results  in  object
s.disp()  # How  to  print  object  with  disp()  method
print(s)  # How  to  print  object  with  __str__()  method

'''
Output:
Enter Roll Number: 20
Enter Student Number: Krishna
Enter Gender: F
Enter marks of subject1: 85
Enter marks of subject2: 78
Enter marks of subject3: 75
Roll  Number  :   20
Student  Name  :   Krishna
Gender  :   F
Total  Marks  :   238
Average  :   79.33333333333333
Grade  :   Distinction
20       Krishna         F       238     79.33333333333333        Distinction
'''


Program-3
'''
Write  a  program  to  add , subtract , multiply  and  divide  two  rational  numbers

1) 1st  rational  number  --->  2 / 3
    2nd  rational  number  --->   5 / 9
    What  is  the  sum  ?  --->  2 / 3 + 5 / 9 = (18 + 15) / 27 =  33 / 27 =  11 / 9
    What  is  the  difference  ?  --->  2 / 3 - 5 / 9 =  (18 - 15) / 27 =  3 / 27 =  1 / 9
    What  is  the  product  ?  --->	2 / 3 * 5 / 9 =  10 / 27  =  10 / 27
    What  is   the  division  ?  --->  2 / 3 /  5 / 9 =  2 / 3 * 9 / 5 =  18 / 15 =  6 / 5  --->  Succesful  division

2) 1st  rational  number  --->  2 / 3
    2nd  rational  number  --->   0 / 9
    What  is  the  sum  ?  --->  2 / 3 + 0 / 9 =  (18 + 0) / 27 =  18 / 27 =  2 / 3
    What  is  the  difference  ?  --->  2 / 3 - 0 / 9 =  (18 - 0) / 27 =  18 / 27 = 2 / 3
    What  is  the  product  ?  --->  2 / 3 * 0 / 9 =  0 / 27  --->  Simplification  is  not  required  becoz  numerator  is  0
    What  is   the  division  ?  --->  2 / 3 /  0 / 9 =  2 / 3 * 9 / 0 =  18 / 0  ---> Division  is  not   permitted

3) When  is  simplification  required ?  --->  When  numerator  is  non-zero
'''
import  math
class  Rat:
	def  get(self):
		self.nr = int(input('Enter Numerator: '))   # How  to  read  numerator  into  object  self
		self.dr = int(input('Enter Denominator: '))   # How  to  read  denominator  into  object  self
		self.test()  # How  to  call  test()  method
	def  test(self):
		# Ask  user  to  reenter  denom  when  denom  is  zero
		while self.dr == 0:
			self.dr = int(input('Denom cannot be zero, please reenter: '))
	def    __str__(self):
			 #return  values  of  object  in  the  form  of  rational  number  such   as  '2 / 3'
			 return F'{self.nr} / {self.dr}'
	def   add(self , a , b):
		#How  to  add  objects  'a'  and  'b' and  store  results  in  object  self
		self.nr = a.nr + b.dr + a.dr + b.nr
		self.dr = a.dr + b.dr
		#How  to  simplify  object  self
		self.simplify()
	'''
	c . add(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  c  --->  2 / 3 + 5 / 9 = (2 * 9 + 5 * 3) / (5 * 9) = 33 / 27 = 11 / 9
	'''
	def   sub(self , a , b):
		# How  to  subtract  objects  'a'  and  'b' and  store  results  in  object  self
		self.nr = a.nr * b.dr -a.dr * b.nr
		self.dr = a.dr * b.nr  
		self.simplify()  # How  to  simplify  object  self
	'''
	d . sub(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  d  --->  2 / 3 - 5 / 9 = (2 * 9 - 5 * 3) / (5 * 9) = 3 / 27 = 1 / 9
	'''
	def   mul(self , a , b):
		# How  to  multiply  objects  'a'  and  'b' and  store  results  in  object  self
		self.nr = a.nr * b.nr  
		self.dr = a.dr * b.dr
		self.simplify()  # How  to  simplify  object  self
	'''
	e . mul(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  e  --->  2 / 3 * 5 / 9 = (2 * 5) / (3 * 9) = 10 / 27
	'''
	def    div(self , a , b):
		#How  to  divide  objects  'a'  and  'b' and  store  results  in  object  self
		self.nr = a.nr * b.nr  
		self.dr = a.dr * b.nr
		self.simplify()  # How  to  simplify  object  self
	'''
	f . div(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  f  --->  2 / 3 / 5 / 9 = 2 / 3 * 9 / 5 = (2 * 9) / (3 * 5) = 18 / 15 = 6 / 5
	'''
	def   simplify(self):
			# How  to  find  gcd  of  numerator  and   denominator
			if self.nr != 0:
				ans = math . gcd(self.nr , self.dr)
				self.nr = self.nr // ans
				self.dr = self.dr // ans
	            # How  to  simplify  rational  number  in  object  self  i.e.  12 / 15  should  be  simplified  to  4 / 5
	'''
	c . simplify()
	1)  12 / 15  --->  4 / 5
	2) 10 / 27   --->  10 / 27
	3) 0 / 27  --->   0 / 27
	'''
# End  of the class
if __name__ == '__main__' :
    #How  to  create  6  objects  a , b , c , d , e , f
	a = Rat()
	b = Rat()
	c = Rat()
	d = Rat()
	e = Rat()
	f = Rat()
	a.get()  # How  to  read  rational  number  into  object  'a'
	b.get()  # How to  read  rational  number  into  object  'b'
	c.add(a,b)  # How  to  add  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'c'
	d.sub(a,b)  # How  to  subtract  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'd'
	e.mul(a,b)  # How  to multiply  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'e'
	f.div(a,b)  # How  to  divide  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'f'
	print('Sum: ' , c)  # How  to  print  object   'c'
	print('Difference: ' , d)  # How  to  print  object   'd'
	print('Product: ' , e)  # How  to  print  object   'e'
	if  b.nr != 0:
		
		print('Division: ' , f)  # How  to  print  object  'f
	else:
		print('Division  is  not  permitted')
		
'''
Output:
Enter Numerator: 2
Enter Denominator: 3
Enter Numerator: 5
Enter Denominator: 9
Sum:  19 / 12
Difference:  1 / 5
Product:  10 / 27
Division:  2 / 3
'''


Program-4
#  dir()  function  demo  program
from  prog10c   import  Rat
a = Rat()    # Empty object
a . nr = 22  # Adds variable nr to object 'a' with value 22
a . dr = 7   # Adds variable dr to object 'a' with value 7
print(dir(Rat))  # ['add', 'div', 'get', 'mul', 'simplify', 'sub', 'test' , '__str__' , Environment Variables]
print()
print()
print(dir(a))    # ['add', 'div', 'get', 'mul', 'simplify', 'sub', 'test' , '__str__' , nr , dr , Environment Variables]


Program-5
#  Find  outputs
class      Rat:
	def    m1():
		pass
# End  of  the  class
a = Rat()     # Empty Object
a . nr = 22   # Adds variable nr to object 'a' with value 22
print(hasattr(a , 'nr'))    # True: Varisble 'nr' exists in object 'a'
print(hasattr(a , 'dr'))    # False: Varisble 'dr' does not exists in object 'a'
print(hasattr(a , 'm1'))    # True: Varisble 'm1' exists in class Rat
print(hasattr(a , 'm2'))    # False: Varisble 'm2' does not exists in class Rat
print(hasattr(Rat , 'm1'))  # True: Varisble 'm1' exists in class Rat
print(hasattr(Rat , 'm2'))  # False: Varisble 'm2' does not exists in class Rat
print(hasattr(Rat , 'nr'))  # False: Varisble 'nr' does not exists in class Rat


Program-6
# Find  outputs
class  Cat:
	def  talk(self):
		print('Meow Meow Meow ....')
class  Dog:
	def  bark(self):
		print('Bhow Bhow Bhow ....')
class  Goat:
	def  talk(self):
		print('Mehar  Mehar  Mehar  ....')
#end of the class
a = [Cat() , Dog() , Goat()]   # List of 3 objects
for  x  in   a:  # 'x' is each object of list 'a'
	if   hasattr(x , 'talk'):
		x . talk()
	else:
		x . bark()

'''
Output:
Meow Meow Meow ....
Bhow Bhow Bhow ....
Mehar  Mehar  Mehar  ....
'''


Program-7
#  Find  outputs  (Home  work)
class    c1:
        pass
# End of the class
a = c1()
a . x = 10
varname = input('Enter  variable  name  to  be  added  to  object  :  ')   #  Assume  that  input  is  'y'
value = eval(input('Enter  value  of  the  variable  :  '))   #  Assume  that  input  is   20
setattr(a , varname , value)
print(a . __dict__)
print(a . x) # 10
while  True:
	try:
		varname = input('Enter  variable  name  whose  value  is  to  be  retrieved  :  ')  #  Assume  that  input  is  x  in  1st   iteration  ,  y  in   2nd   iteration  and  z  in  3rd  iteration
		print(getattr(a , varname))
	except:
		print(F'Invalid  variable   name   :  {varname}')
		break

'''
Output:
Enter  variable  name  to  be  added  to  object  :  y
Enter  value  of  the  variable  :  20
{'x': 10, 'y': 20}
10
Enter  variable  name  whose  value  is  to  be  retrieved  :  x
10
Enter  variable  name  whose  value  is  to  be  retrieved  :  y
20
Enter  variable  name  whose  value  is  to  be  retrieved  :  z
Invalid  variable   name   :  z
'''


Program-8
'''
Write  a  program  to  convert  a  dictionary  {'Empno' : 25 , 'Ename' : 'Rama  Rao' , 'Sal' : 10000.0}  to  Emp  class  object
i.e.  object  should  contain  empno = 25 , ename = 'Rama  Rao' , Sal = 10000.0

Hint:  Use  setattr()  and  getattr()  functions
'''
class  emp:
        pass
#End  of  the  class
dict = {'Empno' : 25 , 'Ename' : 'Rama  Rao' , 'Sal' : 10000.0}
e = emp()  # How  to  convert  dictionary  to  object  'e'  with  for  loop
# How  to  print  object  'e'  with  for  loop
for key , value in dict . items():
	setattr(e, key , value)
for key in dict.keys():
	print(key , getattr(e , key) , sep = '...')

'''
Output:
Empno...25
Ename...Rama  Rao
Sal...10000.0
'''
