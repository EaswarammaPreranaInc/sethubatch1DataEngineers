# Identify  error  (Home work)
'''class   c1:
	def  m1(self):
		pass
class   c2:
        pass
#class   c3: '''

# Find  outputs  (Home  work)
'''class   c1:
	pass
# End  of  the  class
a = c1()
print(id(a))  #random number 1000
print(type(a))  #<class '__main__.c1'>
print(a . __dict__) #{}
print(a) #type and address
del  a '''
#print(a)

#  Find  outputs  (Home  work)
'''def   m1():
		print('Function')
class   c1:
	def   m1(self):
		print('1st  method')
	def   m1(self):
		print('2nd  method')
	def   m1(self):
		print('3rd  method')
# End  of  class  c1
a = c1()
a . m1() #3rd Function
m1() #Function '''

#  Find  outputs  (Home  work)
'''class   c1:
	def   m1(self):
		print('No  argument  method')
	def   m1(self , x):
		print('Single  argument  method : ' , x)
	def   m1(self , x , y):
		print('Two  argument  method : ' , x , y)
# End  of  class  c1
a = c1()
a . m1(10,20) #Two argument method : 10 20
#a . m1(30) #Error 
#a . m1()  #Error '''

#  Find  outputs  (Home  work)
'''class   c1:
	def   m1(self):
		print('No  argument  method')
	def   m1(self , x):
		print('Single  argument  method : ' , x)
	def   m1(self , x = 1  , y = 2):
		print('Two  argument  method : ' , x , y)
# End  of  class  c1
a = c1()
a . m1(10 , 20) #Two  argument  method :  10 20
a . m1(30) #Two  argument  method :  30 2
a . m1()  #Two  argument  method :  1 2 '''


# Find  outputs  (Home  work)
'''class   c1:
	def   m1(self):
		print('Method  of  first  c1  class')
class   c1:
	def   m1(self):
		print('Method  of  second  c1  class')
class   c1:
	def   m1(self):
		print('Method  of  third  c1  class')
a = c1()
a . m1() #Method  of  third  c1  class '''

# Find  outputs  (Home  work)
'''class   c1:
	def   m1(self):
		print('Method  of  first  c1  class')
class   c1:
	def   m1(self):
		print('Method  of  second  c1  class')
class   c1:
	pass
a = c1()
a . m1() #empty '''


#  Find  outputs (Home  work)
'''class  c1:
        pass
# End  of  class
a = c1()
print(a . __dict__) #{}
a . x = 10
print(a . __dict__) #{'x':10}
a . y = 20
print(a . __dict__) #{'x':10,'y':20}
a . x = 30
print(a . __dict__) #{'x':30,'y':20}
a . y = 40
print(a . __dict__) #{'x':30,'y':40}
del  a . x
print(a . __dict__) #{'y':40}
del  a . y
print(a . __dict__) #{}
del   a
print(a . __dict__) #Error '''

#  Find  outputs  (Home  work)
'''class   c1:
	def  m1(self):
		x = 10 #1.10
		self . x = 20
		print(x) #2.20
		print(self . x)
		x += 5 
		self . x += 7 #3.27
	def   m2(self):
		#print(x)
		print(self . x)
		self . x += 6 #4.33
# End  of  the  class
a = c1()
a . m1()
a . m2()
print(a . x)
#print(self . x)
#print(x) '''

#  Find  outputs (Home  work)
'''class  Date:
	pass
# End of the class
a =  Date()
a . dd = 15
a . mm = 8
a . yy = 1947
print(a)  #type and address '''

#  Find  outputs (Home  work)
'''class   c1:
	def  __str__(self):
			return  '25'
class   c2:
	def  __str__(self):
			return   35
class   c3:
	def  __str__(self):
			print('Hyd')
class   c4:
	def  __str__(self , x):
			return   F'{x}'
#end of the class
a = c1()
b = c2()
c = c3()
d = c4()
print(a) #25
#print(b) #error becz non string (type int)
#print(c)  #error becz non string (type non type)
#print(d)  #error
print(b . __str__()) #35
print(c . __str__()) #hyd 
print(d . __str__(50)) #50 '''

'''  (Home  work)
Write  a  program  to  determine  area  and  perimeter  of  triangle  and  represent  triangle  by  an  object

1) What  is  the  area  of  triangle ?  --->  sqrt(s * (s - a) * (s - b) * (s - c))

2) What  is  the  formula  for  's' ?  --->  (a + b + c) / 2

3) What  is  the  perimeter  of  triangle ?  --->  a + b + c

import  math
class  triangle:
	def  get(self):
		#How  to  read  three  sides  into  object  self
		self.a=eval(input("enter a side A:"))
		self.b=eval(input("enter a side B:"))
		self.c=eval(input("enter a side C:"))
	def  test(self):
		if self.a+self.b>=self.c and self.b+self.c>=self.a and self.c+self.a>=self.b:  # sum  of  every  2  sides  >=  3rd  side:
				pass
		else:
				print('Not  a  triangle')
				exit()
	def  area(self):
			s=(self.a +self. b +self.c) / 2
			return math.sqrt(s * (s -self. a) * (s - self.b) * (s - self.c))
	def  peri(self):
			return  self.a +self. b +self. c

# End of the class
t=triangle() #How  to  create  triangle  class  object
t.get()#How  to  read  inputs  into  object
t.test() #How  to  test  whether  inputs  are  valid
print('Area : ',t.area())
print('Perimeter : ',t.peri()) 


output:
enter a side A:3
enter a side B:4
enter a side C:5
Area :  6.0
Perimeter :  12 '''


'''  (Home  work)
Write  a  program  to  add  two  objects  where  each  object  contains  three  values  and
store  results  in   third  object

1st  object   --->  x = 10 , y = 20 , z = 30

2nd  object --->  x = 40 , y = 50 , z = 60

3rd  object  ---> x = 10 + 40 = 50 , y = 20 + 50 = 70 , z = 30 + 60 = 90
'''
'''
class  Test:
	def   get(self):
		self.x=eval(input("enter a value x:")) #How  to  read  inputs  into  variables  x , y  and  z  of  object  self
		self.y=eval(input("enter a value y:"))
		self.z=eval(input("enter a value z:"))
	def   add(self , m , n):
		self.x=m.x+n.x #How  to  add  objects  m  and  n  and  store  results  in  object  self
		self.y=m.y+n.y
		self.z=m.z+n.z
	def  disp(self):
		print('x:',self.x) #How  to  print  object  self
		print('y:',self.y)
		print('z:',self.z)
# End  of  the  class
a=Test() #How  to  create  three  Test  class  objects  a , b  and  c
b=Test()
c=Test()
print('First  Object')
a.get()#How  to  read  inputs  into  object  'a'
print('Second  Object')
b.get()#How  to  read  inputs  into  object  'b'
c.add(a,b)#How  to  add  objects  a  and  b  and  store  results in  object  'c'
print('Addition  results')
c.disp()#How  to  print  object  'c'

output:
First  Object
enter a value x:10
enter a value y:20
enter a value z:30
Second  Object
enter a value x:40
enter a value y:50
enter a value z:60
Addition  results
x: 50
y: 70
z: 90 '''
