#Generate all prime numbers between 2 and n and also print how many prime numbers are existing
#Use prime() function defined in March18 but do not rewrite
from March18 import prime
n=int(input('Enter a number: '))
count=0
print(F'Prime numbers between 2 to {n}')
for i in range(2,n+1):
	if(prime(i)):
		print(i,end=' ')
		count+=1
print()
print('Number of prime numbers:',count)

#Output
Enter a number: 10
Prime numbers between 2 to 10
2 3 5 7
Number of prime numbers: 4



#Keyword only arguments demo program
def f1(*,a,b):
	print(F'a : {a} \t b : {b}')
# End  of  the  function
f1(a=10,b=20) #a : 10 <tab> b : 20
f1(b=30,a=40) #a : 40 <tab> b : 30
f1(50,60)     #Error (due to pa's)
f1(70,b=80)   #Error (due to pa's)
f1(a=15,25)   #Error



#Find outputs 
def f1(a,*,b,c):
	print(F'a : {a} \t b : {b} \t c : {c}')
# End of function
f1(10,b=20,c=30)   #a : 10 <tab> b : 20 <tab> c : 30
f1(a=40,b=50,c=60) #a : 40 <tab> b : 50 <tab> c : 60
f1(c=100,b=90,a=80)#a : 80 <tab> b : 90 <tab> c : 100
f1(70, 80,c=90)    #Error due to 80
f1(70, 80,90)      #Error due to 80 and 90
f1(c=15,b=25,35)   #Error due to pa's after ka



#Identify error
def f1(a, b, *): #Error due to * at the end of arguments
	pass



#Positional only arguments demo program
def f1(a,b,/):
	print(F'a : {a} \t b : {b}')
# End of the function
f1(10,20) #a : 10 <tab> b : 20
f1(a=30,b=40) #Error due to ka
f1(50,b=60) #Error due to ka
f1(a=70,80) #Error due to pa's after ka



#Find outputs 
def f1(a,b,/,c):
	print(F'a : {a} \t b : {b} \t c : {c}')
# End of function
f1(10,20,30) #a : 10 <tab> b :20 <tab> c : 30
f1(40,50,c=60) #a : 40 <tab> b :50 <tab> c : 60
f1(a=70,b=80,c=90) #Error due to a and b
f1(a=100,b=110,120)#Error due to pa's after ka i.e,120
f1(a=130,140,c=150)#Error due to pa's after ka i.e,140
f1(160,b=170,180) #Error due to pa's after ka i.e,180
f1(190,b=200,c=210)#Error due to b



# Find outputs(Home  work)
def f1(a, b, /, c, d, *, e, f):
        print(F'a : {a} \t b : {b} \t c : {c} \t d : {d} \t e : {e} \t f : {f}')
# End of the function
f1(10,20,30,d=40,e=50,f=60) #a : 10 <tab> b : 20 <tab> c : 30 <tab> d : 40 <tab> e : 50 <tab> f :60
f1(1,b=2,c=3,d=4,e=5,f=6) #Error due to b
f1(1,2,3,4,5,f=6) #Error due to 5
f1(10,20,c=30,40,e=50,f=60) #Error due to pa's after ka i.e,40
f1(10,20,30,40,e=50,f=60) #a : 10 <tab> b : 20 <tab> c : 30 <tab> d : 40 <tab> e : 50 <tab> f :60



#Identify error
def f1(/,a,b,c): #Error due to '/' at start as '/' takes before arguments as pa
	pass
def f2(a,b,c,*): #Error due to '*' at start as '*' takes after arguments as ka
	pass



#Identify error 
def f4(*,a,b,c,/): #Error ('/' must be ahead of '*')
	pass



#Find outputs
def f1(x):
	print('1st function:', x)
def f1(y):
	print('2nd function:', y)
def f1(z):
	print('3rd function:', z)
f1(z=10) #33rd function: 10
f1(y=20) #Error
f1(x=30) #Error



#Identify Error
def f1(a=10,b,c=20,d): #Error due to pa's after ka i.e,b
	pass
def f2(b,d,a=10,c=20):
	pass



#Find outputs 
def f1(a=10):
	print(a)
#End  of  the  function
f1(20)   #10
f1()     #10
f1(a=30) #30



#Find outputs
def add(a,b,c=10,d=20):
	return a+b+c+d
#End of the function
print(add(100,200))  #330
print(add(100,200,300)) #620
print(add(100,200,300,400)) #1000
print(add(b=100,a=200)) #330
print(add(100,200,d=300)) #610
print(add(d=100,a=200,b=300)) #610
print(add(c=100,d=200,300,400)) #Error due  to pa's after ka
print(add(100,200,c=300,x=400)) #Error
print(add()) #Error



#Find outputs
def f1(x=25):
	return x
def f2(x):
	return x
#End of function
print(f1(10)) #10
print(f1())   #25
print(f2(20)) #20
print(f2())   #Error (no arg)



#Find outputs
def disp(ch='*',n=4):
	print(ch*n)
#End of function
disp('-',6) #------
disp('$')   #$$$$
disp()      #****
disp(n=5)   #*****
disp(5)     #20
disp(n=7,ch='%') #%%%%%%%
disp(7,'@') #@@@@@@@
disp(7,n=6) #42
#disp(ch='!',5) #Error due to occurence of pa's after ka 



#Find outputs
def power(a,b=2):
	return a**b
#End of function
print(power(2,6)) #2^6=64
print(power(5))   #5^2=25
print(power(b=3,a=4.5)) #4.5^3=91.125
print(power(3+4j))#(3+4j)^2=(-7+24j)
print(power(True))#1^2=1
def power(b=2,a):  #Error due to pa after ka
	pass



#Find outputs 
def add(a,b):
	print('2-argument  function')
	return a+b
def add(a,b,c):
	print('3-argument  function')
	return a+b+c
def add(a=1,b=2,c=3,d=4):
	print('4-argument  function')
	return a+b+c+d
#End of the function
#last function will be called
print(add(10,20,30,40)) #4-argument function <next line> 100
print(add(50,60,70))    #4-argument function <next line> 184
print(add(80,90))       #4-argument function <next line> 177
print(add(100))         #4-argument function <next line> 109
print(add())            #4-argument function <next line> 10



#Find outputs 
def disp(a,b):
	print('2-argument function :',a,b)
def disp(a,b,c,d):
	print('4-argument  function :',a,b,c,d)
def disp(a,b,c=25):
	print('3-argument  function :',a,b,c)
#end
disp(10,20,30)   #3-argument  function : 10 20 30
disp(40,50,60,70)#Error due to missing argument c
disp(80,90)      ##3-argument  function : 80 90 25



#Find outputs
def add(*,a=10,b=20):
	return a+b
# End of the function
print(add(a=30,b=40)) #70
print(add())          #30
print(add(a=50))      #70
print(add(b=60,a=70)) #130
print(add(80,90))     #Error



#Find outputs
def add(a=10,b,c): #Error due to pa after ka
	pass
def add(*,a=10,b,c ): 
	return  a+b+c
# End of the function
print(add(a=30,b=40,c=50)) #120
print(add(b=60,c=70))      #140
print(add(c=80,b=90,a=100))#270
print(add(c=25,a=43))      #Error due to b
print(add(1,2,3))          #Error due to pa
def add(a,b=10,c,*,d,e=20,f): #Error due to pa after ka
	pass



#Find output
def f1(a=[]):
	pass
print(f1.__defaults__) #([],)



#Find output
def f1(x,a=[]):
	a.append(x)
	print('List :',a)
#end of the function
print('__defaults__ :',f1.__defaults__) #__defaults__ :([],)
f1(3)                                   #'List : [3]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([3],)
f1(4,[1,2,3])                           #'List : [1,2,3,4]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([3],)
f1(9)                                   #'List : [3,9] 
print('__defaults__ :',f1.__defaults__) #__defaults__ :([3,9],)
f1(40,[10,20,30])                       #'List : [10,20,30,40]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([3,9],)
f1(5)                                   #'List : [3,9,5]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([3,9,5],)
f1([6,7,8])                             #'List : [3,9,5,[6,7,8]]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([3,9,5,[6,7,8]],)



#Find outputs
def f1(x,a=[]):
	if a==[]:
		a=[]
	a.append(x)
	print(a)
#end of the function
print('__defaults__ :',f1.__defaults__) #__defaults__ :([],)
f1(3)                                   #[3]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([],)
f1(4,[1,2,3])                           #[1,2,3,4]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([],)
f1(4)                                   #[4]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([],)
f1(40,[10,20,30])                       #[10,20,30,40]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([],)
f1(5)                                   #[5]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([],)
f1([6,7,8])                             #[[6,7,8]]
print('__defaults__ :',f1.__defaults__) #__defaults__ :([],)



#Find outputs
def f1(x,a=[]):
	for i in range(x):
		a.append(i*i)
	return a
#End of the function
print('_defaults :',f1.__defaults__) #_defaults : ([],)
print(f1(3))                         #[0,1,3]
print('_defaults :',f1.__defaults__) #_defaults : ([0,1,4],)
print(f1(4,[10,20,15,18]))           #[10,20,15,18,0,1,4,9]
print('_defaults :',f1.__defaults__) #_defaults : ([0,1,4],)
print(f1(5))                         #[0,1,4,0,1,4,9,16]
print('_defaults :',f1.__defaults__) #_defaults : ([0,1,4,0,1,4,9,16],)
print(f1(a=[10,200,300],x=6))        #[10,200,300,0,1,4,9,16,25]
print('_defaults :',f1.__defaults__) #_defaults : ([0,1,4,0,1,4,9,16],)
print(f1(6))                         #[0,1,4,0,1,4,9,16,0,1,4,9,16,25]
print('_defaults :',f1.__defaults__) #_defaults : ([0,1,4,0,1,4,9,16,0,1,4,9,16,25],)



#Find output
def f1(x,a=[]):
	if a==[]:
		a=[]
	for i in range(x):
		a.append(i*i)
	return  a
#End of the function
print(f1(3))  #[0,1,4]
print(f1(4,[10,20,15,18])) #[10,20,15,18,0,1,4,9]
print(f1(5))  #[0,1,4,9,16]
print(f1(a=[100,200,300],x=6)) #[100,200,300,0,1,4,9,16,25]
print(f1(6))  #[0,1,4,9,16,25]



#Find outputs
def f1(a='Hyd',b=[]):
	a+="Sec"
	b+=[1,2,3]
	print('a :',a)
	print('b :',b)
#End of the function
print('Default Values :',f1.__defaults__) #Default Values :('Hyd',[])
f1()                                      #a : 'HydSec' <next line> b : [1,2,3]
print('Default Values :',f1.__defaults__) #Default Values :('Hyd',[1,2,3])
f1()                                      #a : 'HydSec' <next line> b : [1,2,3,1,2,3]
print('Default Values :',f1.__defaults__) #Default Values :('Hyd',[1,2,3,1,2,3])
f1()                                      #a : 'HydSec' <next line> b : [1,2,3,1,2,3,1,2,3]
