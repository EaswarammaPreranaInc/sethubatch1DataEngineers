
#program 1
#  How  to  iterate  zip  object  in  differenet  ways  

import   time
a = ['Telangana' , 'Andhra Pradesh' , 'Karnataka ', 'Tamilnadu']
b = ['Hyderabad' , 'Amaravathi' , 'Bangalore', 'Chennai']
z = zip(a , b)  #  Creates  an  empty  zip  class  object
print(type(z)) # <class  'zip'>
print(z) # __str__()  returns  type and address of the object
print('Iterate  zip  object  with   next()   function')
while   True:  # How  to   iterate  zip  object  with  next  function
	try:
		print(next(z))  #  ('Telangana', 'Hyderabad')  <next  line>  ('Andhra Pradesh', 'Amaravathi')  <next  line>  ('Karnataka ', 'Bangalore')  <next  line>  ('Tamilnadu', 'Chennai')
		time . sleep(1)
	except  StopIteration:
		break
print('Iterate  zip  object  with  __next__  method')
z = zip(a , b)  #   Creates  another  zip  object  to  iterate  again
while   True:  #How  to   iterate  zip  object  with  __next__  method
	try:
		print(z . __next__()) #  ('Telangana', 'Hyderabad')  <next  line>  ('Andhra Pradesh', 'Amaravathi')  <next  line>  ('Karnataka ', 'Bangalore')  <next  line>  ('Tamilnadu', 'Chennai')
		time . sleep(1)
	except:
		break
print('Iterate  zip  object  with   for  loop')
for  x  in   zip(a , b):  #  Creates  another  zip  object  to  iterate  again  with  for  loop
	print(x)  #  ('Telangana', 'Hyderabad')  <next  line>  ('Andhra Pradesh', 'Amaravathi')  <next  line>  ('Karnataka ', 'Bangalore')  <next  line>  ('Tamilnadu', 'Chennai')
	time . sleep(1)
print('Iterate  elements  of  each  tuple  in  zip  object')
for x , y in  zip(a , b):  #  x  and  y  are  elements  of  each  tuple  yielded  by  zip   iterator
	print(x , y, sep = '...')  #  Telangana ... Hyderabad <next  line>  Andhra Pradesh ... Amaravathi  <next  line>  Karnataka ... Bangalore  <next  line>  Tamilnadu ... Chennai
	time . sleep(1)
print('Unpacks  zip  object  with   *  operator')
print(*zip(a , b)) #  All  the  tuples  are  stored  in   zip  object  which  are   unpacked  i.e.('Telangana', 'Hyderabad')  <space>  ('Andhra Pradesh', 'Amaravathi')  <space>  ('Karnataka ', 'Bangalore')  <space>  ('Tamilnadu', 'Chennai')
print()
print('zip   object  in  the  form  of   list')
print(list(zip(a , b))) # All  the  tuples  are  stored  in   zip  object  which   is  converted  to  list  i.e. [('Telangana', 'Hyderabad'), ('Andhra Pradesh', 'Amaravathi'), ('Karnataka ', 'Bangalore'), ('Tamilnadu', 'Chennai')]
print()
print('zip   object  in  the  form  of   dictionary')
print(dict(zip(a , b))) # All  the  tuples  are  stored  in   zip  object  which   is  converted  to   dictionary  i.e.  {'Telangana': 'Hyderabad', 'Andhra Pradesh': 'Amaravathi', 'Karnataka ': 'Bangalore', 'Tamilnadu': 'Chennai'}




#program 2
#  Find  outputs 
import   time
a = [ 'Empno' , 'Emp Name' , 'Salary']
b = [ 25 , 'Rama  Rao' , 10000.0 , 'Male' , True]
c = zip(a , b)  #   Creates  an  empty  zip  object
while   True:
	try:
		print(next(c))  #  ('Empno' , 25)  <next  line>  ('Emp Name' , 'Rama  Rao')  <next  line>  ('Salary ,10000.0)  <next  line
		time . sleep(1)
	except:
		break

#output
('Empno', 25)
('Emp Name', 'Rama  Rao')
('Salary', 10000.0)



#program 3
# Find  outputs
import   time
a = ['Telangana' , 'Andhra  Pradesh' , 'Karnataka' , 'TamilNadu' , 'Maharastra']
b = ['Hyderabad' , 'Amaravathi' , 'Banglore' , 'Chennai' , 'Mumbai']
c = [50000000 , 40000000 , 70000000 , 60000000 , 30000000]
for   x   in   zip(a , b , c):  #   Creates  an  empty  zip  object  which  is  iterated  on fly
	print(x) #  Each  tuple  yielded  by  zip  iterator
	time . sleep(1)

#output
('Telangana' , 'Hyderabad' , 50000000)
('Andhra  Pradesh' , 'Amaravathi' , 40000000)
('Karnataka' , 'Banglore' , 70000000)
('TamilNadu' , 'Chennai' , 60000000)
('Maharastra' , 'Mumbai'' , 30000000)



#program 4
# Find  outputs

import   time
a = [1 , 2 , 3]
b = [4 , 5 , 6 , 7 , 8]
for  x , y  in   zip(a , b):  #  x  and  y  are  elements  of  each  tuple  yielded  by   zip  iterator
	print(x + y)  #   5  <next  line>  7  <next  line>  9  <next  line>
	time . sleep(1)

#output
5
7
9




#program 5
# Find outputs  

import   time
def   disp(z):
	while   True:
		try:
			print(next(z))
			time . sleep(1)
		except:
			break
	print()
a = [10 , 20 ,  30]
b = {1 : 2 , 3 : 4 , 5 : 6}
c = zip(a , b . keys())  #  Zips  list  'a'   with  the  keys  of   dict  'b'
disp(c)  #  (10 , 1)  <next  line>  (20 , 3)  <next  line>  (30 , 5)  <next  line>
d = zip(a , b . values())   #  Zips  list  'a'  with   the  values  of   dict  'b'
disp(d)  #   (10 , 2)  <next  line>  (20 , 4)  <next  line>  (30 , 6)  <next  line>
e = zip(a , b . items())   #  Zips  list  'a'   with  the   tuples  of  the  list  in  dict_items  object
disp(e)  #  (10 , (1 , 2))  <next  line>  (20 , (3 , 4))  <next  line>   (30 , (5 , 6))  <next  line>
f = zip(a , b)   #  Zips  list  'a'  with  the    keys  of   dict  'b'
disp(f)  #  (10 , 1)  <next  line>  (20 , 3)  <next  line>  (30 , 5)  <next  line>
g = zip(a)   #  Zips  list  'a'
disp(g)   # (10,)   <next  line>  (20,)  <next  line>  (30,)  <next  line>
h = zip(b)   #  Zips  keys  of   dict  'b'
disp(h)  # (1,)   <next  line>  (3,)  <next  line>  (5,)  <next  line>
i = zip()   #  Zips   nothing
disp(i)  #  Nothing

#output
(10, 1)
(20, 3)
(30, 5)

(10, 2)
(20, 4)
(30, 6)

(10, (1, 2))
(20, (3, 4))
(30, (5, 6))

(10, 1)
(20, 3)
(30, 5)

(10,)
(20,)
(30,)

(1,)
(3,)
(5,)



#program 6
# Find  outputs  

z = zip(range(5) , range(20 , 25)) #   Creates  an  empty  zip  object
a = [ [x , y]  for  x , y   in   z]  #   Creates  a  list  with  elements  of  each  tuple  yielded  by   zip  iterator
print(a)  #  [[0 , 20] , [1 , 21] , [2 , 22] , [3 , 23] , [4 , 24]]

#output
[[0, 20], [1, 21], [2, 22], [3, 23], [4, 24]]



#program 7
#  How  to  print  reversed  object  in  different  ways  

import   time
a = input('Enter  any  string  :  ')  #  Assume  that  input  is  HYD
r = reversed(a)  #   Creates  an  empty  reversed  object
print(type(r)) # <class  'reversed'>
print(r) # __str__()  returns type and address of the object
print('Iterate  reversed  object  with   next   function')
while   True:  #  How  to  iterate  reversed  object  'r'  with  next()  function
	try:
		print(next(r))   #  D  <next line>   Y  <next line>   H  <next line>
		time . sleep(1)
	except:
		break
print('Iterate  reversed  object  with   __next__   method')
r = reversed(a)  #  Creates   another  reversed  object  to  iterate  again
while   True:  #How  to  iterate  reversed  object   with  __next__()   method
	try:
		print(r . __next__())    #  D  <next line>   Y  <next line>   H  <next line>  StopIteration
		time . sleep(1)
	except:
		break
print('Iterate  reversed  object  with   for  loop')
for  x  in   reversed(a):  #  Creates  another  reversed  to  iterate  with  for  loop
	print(x)    #  D  <next line>   Y  <next line>   H  <next line>
	time . sleep(1)
print('Unpack  reversed  object  with   *  operator :   ' , *reversed(a)) #   Srores  all  the  characters  of  the  string  in  reverse  order  in  reversed  object  and  unpacks   i.e.  D  <space>   Y  <space>   H  <next line>
print('reversed  object  in  the  form   of  list  :  ' , list(reversed(a))) #  Srores  all  the  characters  of  the  string  in  reverse  order  in  reversed  object  and   converted  to  list   i.e.   ['D' , 'Y' , 'H']
print('Reverse  string   :   ' , '' . join(reversed(a))) #  #  Srores  all  the  characters  of  the  string  in  reverse  order  in  reversed  object  and  joined  to  form  a   string  i.e.   ['D' , 'Y' , 'H']How  to  convert  reversed  object  to   string  --->  DYH




#program 8
# Find  outputs 

a = 'RAMA'
b = reversed(a)
print(type(b)) # <class 'reversed'>
print(b) #  __str__()  returns type and address of the object
print(id(b)) # address   of  reversed  object  'b'
print(*b) #  Stores  all  the  characters  of   the  string  in   reversed  object  in  reverse  order   and  unpacks  the  object b  i.e. A <space> M  <space>  A  <space>  R
#print(b[0]) #  Error :  iterator is not indexed
#print(b[1 : 3]) # Error :   iterator  can  not  be  sliced   as  there  are  no  indexes
#print(b * 2) # Error :  iterator  can  not  be  repeated
#print(len(b)) #  Error :   'b'  is  not  a  sequence

#output
<class 'reversed'>
<reversed object at 0x000001F2C19BABF0>
2142141918192
A M A R

#________________________________________________________________________________________________________________________________________________________________________________________________________

#program 9
# Can  tuple  be  reversed ?   --->  Yes 

import   time
a = (25 , 10.8 , 'Hyd' , True)
b = reversed(a)  # Creates  an  empty  reversed  object
print(type(b)) # <class 'reversed'>
for  x  in   b: #   'x'  is  each  element   which  is   yielded  by  reversed  iterator
	print(x)  #   True  <next  line>  Hyd   <next  line>  10.8    <next  line>  25   <next  line>
	time . sleep(1)

#output
<class 'reversed'>
True
Hyd
10.8
25




#program 10
#  How  to  print  list_reverseiterator  object  in  different  ways

import   time
a = [25 , 10.8 , 'Hyd' , True]
r = reversed(a)  #  Creates  an  empty  list_reverseiterator  object
print(type(r)) # <class 'list_reverseiterator'>
print(r) # __str__()  returns type and address of  object  'r'
print('Iterate  list_reverseiterator  object  with   next()   function')
while   True:   # How  to  iterate   list_reverseiterator  object  with   next()   function
	try:
		print(next(r))  #  True  <next line>  Hyd  <next line>  10.8  <next line>   25  <next line>
		time . sleep(1)
	except:
		break
print('Iterate  list_reverseiterator  object  with   __next__()   method')
r = reversed(a)  #  Creates  another  object to  iterate  again
while   True:  # How  to  iterate   list_reverseiterator  object  with   __next__()  method
	try:
		print(r.__next__()) #  True  <next line>  Hyd  <next line>  10.8  <next line>   25  <next line>
		time . sleep(1)
	except:
		break
print('Iterate  list_reverseiterator  object  with   for  loop')
for  x  in   reversed(a):  #   Creates   another  list_reverseiterator  object   to  iterate  with  for  loop
	print(x)  #  True  <next line>  Hyd  <next line>  10.8  <next line>   25  <next line>
	time . sleep(1)
print('Unpack  list_reverseiterator  object  with   *  operator   :  ' , *reversed(a)) #  Stores  all   the  elements  in  reverse  order  in  list_reverseiterator  object  and  unpacks
														#  i.e.  True  <space>  Hyd  <space>  10.8  <space>   25  <next line>
print('Reverse  list  :  '  ,  list(reversed(a))) #   Stores  all   the  elements  in  reverse  order  in  list_reverseiterator  object  and   converted  to  list  i.e.   [True , 'Hyd' , 10.8  ,   25]




#program 11
# Can  dictionary  be  reversed  ? 

import   time
def   disp(r):
	while  True:
		try:
			print(next(r))
			time . sleep(1)
		except:
			break
	print()
a = {10 : 'Rama' , 20 : 'Sita' , 15 : 'Kiran' , 18 : 'Amar'}
b = reversed(a . keys())  #  Creates an  empty  object
disp(b)  #    keys  in  reverse  order  i.e.  18 <next  line>  15   <next  line>   20  <next  line>  10  <next  line>
c = reversed(a . values())  #  Creates another  empty  object  to  iterate  again
disp(c)  #   values  in  reverse  order  i.e.  Amar <next  line>  Kiran   <next  line>  Sita  <next  line>   Rama  <next  line>
d = reversed(a . items())   #  Creates another  empty  object  to  iterate  again
disp(d)  #   Tuples  in  reverse  order  i.e.  (18 ,'Amar')  <next  line>  (15 , 'Kiran')  <next  line> (20 , 'Sita')  <next  line> (10 , 'Rama')  <next  line>
e = reversed(a) #  Creates another  empty  object  to  iterate  again
disp(e)    #    keys  in  reverse  order  i.e.  18 <next  line>  15   <next  line>   20  <next  line>  10  <next  line>

#output

18
15
20
10

Amar
Kiran
Sita
Rama

(18, 'Amar')
(15, 'Kiran')
(20, 'Sita')
(10, 'Rama')

18
15
20
10



#program 12
# Find outputs
'''
Write  a  program  to  reverse  a  dictionary ?

Let  input  be  {'Empno' : 25 , 'Emp Name' : 'Rama  Rao' , 'Sal' : 10000.0}
What  is  the  output  ?  --->  {'Sal' : 10000.0 , 'Emp  Name' :  Rama  Rao' , 'Empno' : 25}

Hint:  Use  reversed  iterator'''

a = eval(input("Enter a dictionary :  "))
print('Reverse  dictionary  :  ' ,  dict(reversed(a . items())))



#program 13
# Find outputs

import  time
a = {10 : 'Rama rao', 20 : 'Sita', 15 : 'Rajesh', 18 : 'Kiran'}
print('Keys  in   reverse   order')
for  x  in  reversed(a . keys()):  #  'x'  is   each  key  yielded  by  reversed   iterator
	print(x)  #   18  <next  line>  15 <next  line> 20  <next  line>  10  <next  line>
	time.sleep(1)
print('Values  in  reverse  order')
for  x  in  reversed(a . values()):  #  'x'  is   each  value   yielded  by  reversed  iterator
	print(x)  # Kiran  <next  line>  Rajesh<next  line>  Sita  <next  line>  Rama rao  <next  line>
	time.sleep(1)
print('Tuples  in   reverse  order')
for  x  in  reversed(a . items()):  #  'x'  is  each  tuple   yielded  by  reversed   iterator
	print(x)  #   (18 , 'Kiran')  <next  line>  (15 , 'Rajesh')  <next  line>  (20 , 'Sita')  <next  line>  (10 , 'Rama  rao')  <next  line>
	time.sleep(1)
print('Elements  of  each   tuple  in  reverse  order')
for  x ,  y  in  reversed(a . items()):  #  'x'   and  'y'  are  elements  of  each  tuple  yielded  by  reversed   iterator
	print(x , y , sep = '...')  #   18 ...  Kiran   <next  line>   15 ...  Rajesh   <next  line>   20  ... Sita   <next  line>   10  ...  Rama  rao   <next  line>
	time.sleep(1)
print('Keys  and  values  in   reverse   order')
for x in reversed(a . keys()): #  'x'  is   each  key  yielded  by  reversed   iterator
	print(x , a[x] , sep = '...')  #   18 ...  Kiran   <next  line>   15 ...  Rajesh   <next  line>   20  ... Sita   <next  line>   10  ...  Rama  rao   <next  line>
	time.sleep(1)



#program 14
# How  to  iterate   list_iterator  in  different  ways

import   time
list  =  [10  ,  20  ,  15  ,  18]
print('Iterate  list  with  for  loop')
for x in list:  #  'x'  is  each  element  of  the  list
	print(x)  #  10  <next  line>  20   <next  line>  15 <next  line> 18 <next  line>
#print(next(list)) #  Error :  list is  not  an  iterator
list_itr  =  iter(list)  #  Converts  list  to  list_iterator
print(type(list_itr)) # <class 'list_iterator'>
print(list_itr) # __str__() method  returns type and address  of  list_itr
print('Iterate  List_iterator  with  next()  function')
while   True:  # How  to  iterate  list_iterator  with  next()  function
	try:
		print(next(list_itr))  #  10  <next  line>  20   <next  line>  15 <next  line> 18 <next  line>
		time . sleep(1)
	except  StopIteration:
		break
print('Iterate  List_iterator  with   __next__()  method')
list_itr  =  iter(list)  # Convert  again  to  iterate  one  more  time
while   True:  #How  to  iterate  list_iterator  with   next  method
	try:
		print(list_itr  . __next__())  #  10  <next  line>  20   <next  line>  15 <next  line> 18 <next  line>
		time . sleep(1)
	except:
		break
print('Iterate  List_iterator  with   for    loop')
for  x  in  iter(list):  #How  to  iterate  list_iterator  with  for  loop
	print(x)  #  10  <next  line>  20   <next  line>  15 <next  line> 18 <next  line>
	time . sleep(1)
print('Unpacks  List_iterator  with  *  operator')
print(*iter(list)) # How  to  unpack  list_iterator    --->   #  10  <space>  20   <space>  15 <space> 18



#program 15
# Find  outputs

a = 25
print(a) # 25
for  x   in   a:  #   Error  :   25  is  not  a  sequence  nor  iterator
	print(x)
#print(iter(a)) #  Error  :  25  is  not  a  sequence
#print(next(a)) #  Error :  25  is  not  an  iterator

#output
25





