Program-1
#  What  are  the  outputs  if  inputs  are  25 , Rama  Rao ,  male , 52 , 48 , 55   (Home  work)
from  prog9a  import  Student
s = Student()
print(s . __dict__)
s . get()
print(s . __dict__)
s . compute()
print(s . __dict__)

'''
Output:
{}
Enter Roll Number: 25
Enter Student Name: Rama Rao
Enter Gender: M
Enter marks of subject1: 55
Enter marks of subject2: 48
Enter marks of subject3: 52
{'rno': 25, 'sname': 'Rama Rao', 'gender': 'M', 'm': [55, 48, 52]}
{'rno': 25, 'sname': 'Rama Rao', 'gender': 'M', 'm': [55, 48, 52], 'total': 155, 'average': 51.666666666666664, 'grade': 'Second Class'}
'''


Program-2
'''
Repeat  student  program  for  'n'  students

1) Reuse  Student  class  defined in  prog9a  but  do  not  rewrite

2) Use  list  of  objects
'''

from  prog10b  import  Student
n = int(input('How  many  students ?  :  '))  #  How  to  read  number  of  students  into   variable  'n'
a = []
for  i  in  range(n):  #  How  to  store  'n'  student  class  objects   in  list  'a'
	a . append(Student())
i = 1
for  s  in   a:   #  How  to   read  each  student  data  into   the  object  held  by  the  list
	print(F'Student  {i}')
	s . get()
	i += 1
for  s  in  a:  #  How  to   store  results  in   each  object  held  by  the  list
	s . compute()
for  s  in  a:  #  How  to   print  each  object  held  by  the  list
	print(s)

'''
Output:
How  many  students ?  :  3
Student  1
Enter Roll Number: 14
Enter Student Name: Nandini
Enter Gender: F
Enter marks of subject1: 70
Enter marks of subject2: 58
Enter marks of subject3: 60
Student  2
Enter Roll Number: 18
Enter Student Name: Ravi
Enter Gender: M
Enter marks of subject1: 80
Enter marks of subject2: 65
Enter marks of subject3: 60
Student  3
Enter Roll Number: 25
Enter Student Name: Kishore
Enter Gender: M
Enter marks of subject1: 50
Enter marks of subject2: 48
Enter marks of subject3: 55
14       Nandini         F       188     62.666666666666664        First Class
18       Ravi    M       205     68.33333333333333         First Class
25       Kishore         M       153     51.0     Second Class
'''


Program-3
'''
Repeat  prog10a  with  3  objects
Eg:  c = a + b
	 print  c
	 c = a - b
	 print  c
	 c = a * b
	 print  c
	 c = a / b
	 print  c

Hint:  Reuse   rat  class  defined  in  prog10a  but  do  not  define  rat  class   again
'''

from  prog10a  import  rat  #   imports  rat  class  and  if  statements
a = rat()
b = rat()
c = rat()
a . get()
b . get()
c . add(a , b)
print(F'Addition : {c}')
c . sub(a , b)
print(F'Substraction : {c}')
c . mul(a , b)
print(F'Multiplication : {c}')
if  b . nr == 0:
	print('Division  is  not  permitted')
else:
	c . div(a , b)
	print(F'Division : {c}')

'''
Output:
Enter  numerator :  2
Enter  denominator :  3
Enter  numerator :  5
Enter  denominator :  9
Addition : 11 / 9
Substraction : 1 / 9
Multiplication : 10 / 27
Division : 6 / 5

Enter  numerator :  2
Enter  denominator :  3
Enter  numerator :  0
Enter  denominator :  9
Addition : 2 / 3
Substraction : 2 / 3
Multiplication : 0 / 27
Division  is  not  permitted
'''


Program-4
'''
Repeat  prog10a  with  list  of  6  objects

Hint: Reuse  Rat  class  defined  in  prog10a  but  do  not  rewrite  the  class  again

What  are  the  object  names  ?  --->  a[0] , a[1] , a[2] , .....a[5]
'''
from  prog10a  import  rat
a = [rat()  , rat() , rat() , rat() , rat() , rat()]  #  How  to  create  list  of  6  Rat  class  objects
a[0] . get()  #  How  to  read  rational  number  into  1st  object
a[1] . get()  #  How  to  read  rational  number  into   2nd  object
a[2] . add(a[0] , a[1])  #  How  to  add  rational  numbers  in   first  two  objects   and  store  results  in   3rd  object
a[3] . sub(a[0] , a[1])   #  How  to  subtract  rational  numbers  in   first  two  objects   and  store  results  in   4th  object
a[4] . mul(a[0] , a[1])  # How  to  multiply  rational  numbers  in   first  two  objects   and  store  results  in   5th  object
print('Sum : ' , a[2])   # How  to  print  3rd  object
print('Difference :  ' , a[3])  #  How  to  print  4th  object
print('Product :  '  ,  a[4])   # How  to  print  5th  object
if  a[1] . nr == 0:
	print('Division  is  not  permitted')
else:
	a[5] . div(a[0] , a[1])
	print('Division :  ' , a[5])  #  How  to  print  6th  object

'''
Output:
Enter  numerator :  2
Enter  denominator :  3
Enter  numerator :  5
Enter  denominator :  8
Sum :  31 / 24
Difference :   1 / 24
Product :   5 / 12
Division :   16 / 15

Enter  numerator :  2
Enter  denominator :  3
Enter  numerator :  0
Enter  denominator :  8
Sum :  2 / 3
Difference :   2 / 3
Product :   0 / 24
Division  is  not  permitted
'''


------------------------- Constructors -------------------------

Program-5
# Find  outputs
class  Rat:
	def   __init__(self , nr1 = 22, dr1 = 7):
		self . nr = nr1
		self . dr = dr1
	def   __str__(self):
		return  F'{self . nr}  /  {self . dr}'
#end  of  the  class
a  = Rat()  #  Object  is  initialized  with  nr = 22 , dr = 7  by  constructor
b = Rat(9)   #  Object  is  initialized  with  nr = 9 , dr = 7  by  constructor
c = Rat(5,  8)   #  Object  is  initialized  with  nr = 5 , dr = 8  by  constructor
d = Rat(dr1 = 9)    #  Object  is  initialized  with  nr = 22 , dr = 9  by  constructor
e = Rat(dr1 = 3 , nr1 = 2)    #  Object  is  initialized  with  nr = 2 , dr = 3  by  constructor
x = eval(input('Enter numerator  :  '))  #  Assume  that  input  is  11
y = eval(input('Enter Denominator  :  '))   #  Assume  that  input  is  15
f = Rat(x , y)  #  Object  is  initialized  with  nr = 11 , dr = 15  by  constructor
print('a  :  ' , a)  #   __str__()  method  returns   22 / 7  i.e.  a : 22 / 7
print('b  :  ' , b)   #   __str__()  method  returns   9 / 7  i.e.  b : 9 / 7
print('c  :  ' , c)   #   __str__()  method  returns   5 / 8  i.e.  c : 5 / 8
print('d  :  ' , d)   #   __str__()  method  returns   22 / 9  i.e.  d : 22 / 9
print('e  :  ' , e)   #   __str__()  method  returns   2 / 3  i.e.  e : 2 / 3
print('f  :  ' , f)   #   __str__()  method  returns   11 / 15  i.e.  f :  11 / 15
c . __init__()  #  Object  'c'  is  modified  to  nr = 22 , dr = 7  by  constructor
print('c  :  ' , c)   #   __str__()  method  returns   22 / 7  i.e.  c : 22 / 7
e . __init__(3.8  , 4.6)  #  Object  'e'  is  modified  to  nr = 3.8 , dr = 4.6  by  constructor
print('e  :  ' , e)   #   __str__()  method  returns   3.8 / 4.6  i.e.  e :  3.8 / 4.6
#g = Rat(nr1 = 9 , 5)  #  Error : PA  5  is  not  permittd  after  KA  nr1 = 9
#h = Rat(nr = 9 , dr = 5) #  Error :  No  args  nr  and  dr  for  constructor



Program-6
# Find  outputs
class  Date:
        def   __init__(self , dd1 , mm1  , yy1):
                self . dd = dd1
                self . mm = mm1
                self . yy = yy1
# End  of  the  class
a = Date(15 , 8 , 1947)  #  Object  is  initialized  with  dd = 15 , mm = 8 , yy = 1947 by  constructor
b = Date(yy1 = 1950 , mm1 = 1 , dd1 = 26)  #  Object  is  initialized  with  dd = 26 , mm = 1 , yy = 1950 by  constructor
c = Date(mm1 = 7 , dd1 = 19 , yy1 = 1985)   #  Object  is  initialized  with  dd = 19 , mm = 7 , yy = 1985 by  constructor
print('a  :  ' , a . __dict__)  #  a : {'dd' : 15 , 'mm' : 8 , 'yy' : 1947}
print('b  :  ' , b . __dict__)  #  b : {'dd' : 26 , 'mm' : 1 , 'yy' : 1950}
print('c  :  ' , c . __dict__)  #  c : {'dd' : 19 , 'mm' : 7 , 'yy' : 1985}
#d = Date()  #  Error :  Args  are  not  passed   for  dd1 , mm1 , yy1   of  constructor
#e = Date(dd = 30 , mm = 4 , yy = 2022)  #  Error : There  are no  args  dd , mm , yy  for  constructor
#f = Date(dd1 = 26 , mm1 = 8 , 2023)  #  Error :  PA  2023  after  KA  mm1 = 8



Program-7
# Find  outputs
class  c1:
	def  __init__(self):
		print('c1  class constructor')
		return  25
class  c2:
	def  __init__(self):
		print('c2  class  constructor')
		return  None
class  c3:
	def  __init__(self):
		print('c3  class  constructor')
# End  of  class
#a = c1()  #  Error  due  to  return  25  in  the  constructor
b = c2()  #   Executes  constructor of  class  c2
print(b) #  Type   and  address  of   object  'b'
print(b . __init__())  #   Executes  constructor of  class  c2  which  returns  None
c = c3()   #   Executes  constructor of  class  c3
print(c . __init__())  #   Executes  constructor of  class  c2  which  returns  None


Program-8
# Find  outputs
class  c1:
	def  __init__(self):
		print('Constructor')
		#b = c1()   #  Executes  same  constructor  and  leads  to  recursion
# End  of  class
a = c1()  #  Executes  constructor  of  class  c1


Program-9
#  Difference  between  init()    and  __init__()   methods
class c1:
    def  __init__(self):
        print('Constructor')
        self . x = 10
        self . y = 20
class c2:
    def  init(self):
        print('Method')
        self . x = 30
        self . y = 40
a = c1()  #  Object  is  initilaized  with  x = 10 , y = 20  by constructor
print(a . __dict__) #   {'x' : 10 , 'y' : 20}
b = c2()   #  Empt  object
print(b . __dict__)  #  { }
b . init() #  Object  is  initilaized  with  x = 30 , y = 40  by  the method
print(b . __dict__) #   {'x' :30 , 'y' : 40}

Program-10
# Find  outputs
class   c1:
        def   __init__(self):
                self . a = 10
        def   m1(self):
                self . b = 20
#End  of  class  c1
class   c2:
        def  m3(self):
                x . e = 50
# End  of  class  c2
def   f1():
        x . c = 30
#  End  of  function  f1
x = c1()  #  Constructor  adds  variable  'a'  to  object  'x'   with  value   10
print(x . __dict__)   #   {'a' : 10}
x . m1()   #  Method  adds  variable  'b'  to  object  'x'   with  value  20
print(x . __dict__)   #   {'a' : 10 , 'b' :  20}
f1()  #  Function  adds  variable  'c'  to  object  'x'   with  value  30
print(x . __dict__)   #   {'a' : 10 , 'b' :  20 , 'c' : 30}
x . d = 40  #  Adds  variable  'd'  to  object  'x'   with  value  40
print(x . __dict__)   #   {'a' : 10 , 'b' :  20 , 'c' : 30 , 'd' : 40}
y = c2()  #  Empty  object  :  There  is  no  constructor  in  class  c2
y . m3()  #  Method  of  class  c2  adds  variable  'e'  to  object  'x'   with  value   50
print(x . __dict__)   #   {'a' : 10 , 'b' :  20 , 'c' : 30 , 'd' : 40 , 'e' : 50}
z = c1()   #  Constructor  adds  variable  'a'  to  object  'z'   with  value   10
print(z . __dict__)   #   {'a' : 10}


Program-11
# Find  outputs
class   c1:
	def   __init__(self):
		self . x = 10
		self . y = 20
		self . z = 30
#end  of  the  class
a = c1() #  Object  is  initialized  with  x = 10 , y = 20 , z = 30  by  constructor
b = c1()   #  Object  is  initialized  with  x = 10 , y = 20 , z = 30  by  constructor
print(a . __dict__)  #  {'x' : 10 , 'y' : 20 , 'z' : 30}
print(b . __dict__) #  {'x' : 10 , 'y' : 20 , 'z' : 30}
del  a . x  #  Removes  variable  'x' from  object  'a'
del  b . y  #  Removes  variable  'y' from  object  'b'
print(a . __dict__)   #  {'y' : 20 , 'z' : 30}
print(b . __dict__)   #  {'x' : 10 , 'z' : 30}
print(a . x)  #  Error :  No  variable   'x'  in  object  'a'
print(b . y)   #  Error :  No  variable   'y'  in  object  'b'


Program-12
#  Find  outputs
class   c1:
	def  __init__(self):    #  Discarded  due  to  another  constructor  in  same  class
		print('1st  constructor')
	def  __init__(self):     #  Discarded  due  to  another  constructor  in  same  class
		print('2nd  constructor')
	def  __init__(self):#   Recognzied  as  it  is  the  last  constructor
		print('3rd  constructor')
# End  of  the  class
a = c1()  #  Executes  3rd constrctor of class  c1


Program-13
#  Find  outputs
class   c1:
	def  __init__(self):
		print('No  argument  constructor')
	def  __init__(self , x):
		print('single  argument  constructor : ' , x)
	def  __init__(self , x , y):
		print('Two  argument  constructor : ' , x , y)
# End  of  the  class
a = c1(10 , 20)  #  Two  argument  constructor :  <space>  10  <space>  20
b = c1(30)   #  Error :  Arg is  not  passed  for  'y'  of  the  constructor
c = c1()  #  Error :  Args  are  not  passed  for  'x'  and  'y'  of  the  constructor


Program-14
#  Find  outputs
class   c1:
	def  __init__(self):
		print('No  argument  constructor')
	def  __init__(self , x):
		print('single  argument  constructor : ' , x)
	def  __init__(self , x = 100 , y = 200):
		print('Two  argument  constructor : ' , x , y)
# End  of  the  class
a = c1(10 , 20)  #  Two  argument  constructor :  <space>  10  <space>  20
b = c1(30)  #  Two  argument  constructor :  <space>  30  <space>  200
c = c1()  #  Two  argument  constructor :  <space>  100  <space>  200


Program-15
# What  happens  when  function  and  class  have  same  name ?
def   f1():  # Discarded  becoz  a  class  is  defined  with  same  name  later
	print('Function')
	return  25
class   f1:  #   Recognized
	def  __init__(self):
		print('Constructor')
#end of the  class
a = f1() #   Executes  constructor  of  class  f1
print(a) #   __str__()  method  of  object  class  returns  type  and  address  of  object  'a'

'''
Output:
Constructor
Type  and  address  of  object  'a'
'''


Program-16
 # Find  outputs
class    c1:  #  Discarded  becoz  a  function  is  defined  with  same  name later
	def   __init__(self):
		print('Constructor')
def  c1():  #   Recognized
	print('Function')
#end of the  class
a = c1()  #  Executes  function  c1()  which  returns  None   by  default
print(a)  # None

'''
Output:
Function
None
'''


Program-17
# Find outputs
class    c1:  #  Discarded  becoz  a  function  is  with  same  name  later
        def  __init__(self):
                print('Constructor')
def  c1(x):  #  Recognized
        print('Function : ' , x)
# End  of  class  c1
#a = c1()  #  Error :  Arg  is  not  passed  for  arg  'x' of  function c1()
b = c1(25)  #  Executes  function  c1()  which  returns  None  by  default
print(b)  #  None

'''
Output:
Function :  25
None
'''


Program-18
#  Save  the  program  in  prog9a.py  file
class   c1:
	def  __init__(self):
		print('c1  class  of  prog9a')


Program-19
#  Find  outputs
from  prog9a  import  c1  #  Discards  imported  class  c1  becoz  another  class  with  same  name  is  defined  later
class   c1:  #  Recognized
	def  __init__(self):
		print('c1  class  of  prog9b')
a = c1()  #  c1  class  of  prog9b


Program-20
#  Find  outputs
class   c1:  #  Discarded  becoz  a  class   with  same  name  c1  is  imported  from  prog9a
	def  __init__(self):
		print('c1  class  of  prog9c')
from  prog9a  import  c1 #  Recognized
a = c1()  #  Executes  constructor  of  class c1  from prog9a  i.e.  c1  class  of  prog9a


Program-21
#  How  to  use  both  the  classes (i.e.  c1  of  prog9a  and  c1  of  current  program)  with  from  statement
from  prog9a   import  c1  as  c2  #  How  to  import  class  c1  from  prog9a   with  from  statement
class   c1:
	def  __init__(self):
		print('c1  class  of  prog9d')
a = c1() #  How  to  create  c1  class  object  of  current  module
b = c2()  #   How  to  create  c1  class  object  of  prog9a

'''
Output:
c1  class  of  prog9d
c1  class  of  prog9a
'''


Program-22
# How  to  use  both  the  classes (i.e.  c1  of  prog9a  and  c1  of  current  program)  with  import  statement

import  prog9a  #   How  to  import  prog9a
class   c1:
	def  __init__(self):
		print('c1  class  of  prog9e')
a = c1()  #  How  to  create  c1  class  object  of  current  module
b = prog9a . c1()  #   How  to  create  c1  class  object  of  prog9a

'''
Output:
c1  class  of  prog9e
c1  class  of  prog9a
'''
