'''
#  Find  outputs  (Home  work)
import   time
a = [ 'Empno' , 'Emp Name' , 'Salary']
b = [ 25 , 'Rama  Rao' , 10000.0 , 'Male' , True]
c = zip(a , b)
while   True:
	try:
		print(next(c))
		time . sleep(1)
	except:
		break

Output...
('Empno' 25)
('Emp Name'  Rama Rao)
('Salary'  10000.0)



#  Find  outputs  (Home  work)
import   time
a = ['Telangana' , 'Andhra  Pradesh' , 'Karnataka' , 'TamilNadu' , 'Maharastra']
b = ['Hyderabad' , 'Amaravathi' , 'Banglore' , 'Chennai' , 'Mumbai']
c = [50000000 , 40000000 , 70000000 , 60000000 , 30000000]
for   x   in   zip(a , b , c):
	print(x)
	time . sleep(1)

Output...
('Telangana' , 'Hyderabad'  , 50000000)
('Andhra  Pradesh' ,'Andhra Pradesh' , 40000000)
('Karnataka' ,'Banglore' ,  70000000)
('TamilNadu' ,'Chennai' , 60000000)
('Maharastra' , 'Mumbai' , 30000000)

# Find  outputs   (Home  work)
import   time
a = [1 , 2 , 3]
b = [4 , 5 , 6 , 7 , 8]
for  x , y  in   zip(a , b):
	print(x + y)
	time . sleep(1)

OutPut...
5
7
9


# Find outputs  (Home  work)
import   time
def   disp(z):
	while   True:
		try:
			print(next(z))
			time . sleep(1)
		except:
			break
	print()
a = [10 , 20 ,  30]
b = {1 : 2 , 3 : 4 , 5 : 6}
c = zip(a , b . keys())  
disp(c)# ('10' , 1)
         ( '20' , 3)  
	 ('30' , 5)
d = zip(a , b . values())  
disp(d)# (10 , 1)
         (20 , 3)  
	 (30 , 5)
e = zip(a , b . items()) 
disp(e)  # (10 , (1,2))   
           (20 , (3,4))   
	   (30 , (5,6))
f = zip(a , b) 
disp(f) # ('10' , 1)  
          ('20' , 3)   
	  ('30' , 5)
g = zip(a) # (10,)
             (20,)
	     (30,)
disp(g)
h = zip(b) 
disp(h) # (1,)
          (2,)
	  (3,)
i = zip()
disp(i)



# Find  outputs  (Home  work)
z = zip(range(5) , range(20 , 25))
a = [ [x , y]  for  x , y   in   z]
print(a)  # [[0,21] [1,21] [2,22] [3,23] [4,24]]
       

# Find  outputs (Home  work)
a = 'RAMA'
b = reversed(a) # [AMAR]
print(type(b)) # <class reversed>
print(b)  # Gives the type and address
print(id(b)) # Random address
print(*b) # A M A R
print(b[0]) # Error becoz iterated obj has no subscript
print(b[1 : 3]) # Error becoz iterated obj has no subscript
print(b * 2)  # unsuppored operand
print(len(b)) # Error beacause it has no indexes


# Can  tuple  be  reversed ?   (Home  work)
import   time
a = (25 , 10.8 , 'Hyd' , True)
b = reversed(a)
print(type(b))  # <class reversed>
for  x  in   b:
	print(x)
	time . sleep(1)   # True
	                  # Hyd
			  # 10.8
			  # 25


# Can  dictionary  be  reversed  ? (Home  work)
import   time
def   disp(r):
	while  True:
		try:
			print(next(r))
			#time . sleep(1)
		except:
			break
	print()
a = {10 : 'Rama' , 20 : 'Sita' , 15 : 'Kiran' , 18 : 'Amar'}
b = reversed(a . keys())
disp(b)  # 18 
            15 
	    20  
	    10
c = reversed(a . values())
disp(c)  # Amar 
           Kiran 
	   Sita 
	   Rama
d = reversed(a . items())
disp(d) # (18 'Amar') 
          (15 'Kiran')  
	  (20 'Sita') 
	  (10 'Rama')
e = reversed(a)
disp(e) # 18
        # 15
	# 20
	# 10



# Find  outputs
a = 25
print(a) # 25
for  x   in   a:
	print(x) # int obj is not iterable
print(iter(a)) # int obj is not iterable
print(next(a)) # int obj is not iterable



#  How  to  print  list_reverseiterator  object  in  different  ways  (Home   work)
import   time
a = [25 , 10.8 , 'Hyd' , True]
r = reversed(a)
print(type(r)) # <class reversed>
print(r) # type and address
print('Iterate  list_reverseiterator  object  with   next()   function')
print(next(r))
print(next(r))
print(next(r))
print(next(r))
#How  to  iterate   list_reverseiterator  object  with   next()   function
print('Iterate  list_reverseiterator  object  with   next()   method')
r = reversed(a)
print(r.__next__())
print(r.__next__())
print(r.__next__())
print(r.__next__())
#How  to  iterate   list_reverseiterator  object  with   next()  method
print('Iterate  list_reverseiterator  object  with   for  loop')
r = reversed(a)
for x in r:
	print(x)
	continue
#How  to  iterate   list_reverseiterator  object  with   for  loop
r = reversed(a)
print('Unpack  list_reverseiterator  object  with     operator   :  ' , *r)
print()
r = reversed(a)
m=list(r)
print('Reverse  list  :  '  ,  m) 


Write  a  program  to  reverse  a  dictionary ?
Let  input  be  {'Empno' : 25 , 'Emp Name' : 'Rama  Rao' , 'Sal' : 10000.0}

a={'Empno' : 25 , 'Emp Name' : 'Rama  Rao' , 'Sal' : 10000.0}
r= reversed(a.items())
b=dict(r)
print(b)

Output...
{'Sal': 10000.0, 'Emp Name': 'Rama  Rao', 'Empno': 25}



# Find outputs
import  time
a = {10 : 'Rama rao', 20 : 'Sita', 15 : 'Rajesh', 18 : 'Kiran'}
r=reversed(a)
print('Keys  in   reverse   order')
#Write  for  loop  to  reverse  keys  of  dictionary
for x in r:
	print(x)
	time.sleep(2)
print('Values  in  reverse  order')
#Write  for  loop  to  reverse  values  of  dictionary
r=reversed(a.values())
for x in r :
	print(x)
	time.sleep(2)

print('Tuples  in   reverse  order')
#Write  for  loop  to  reverse   tuples   of  dictionary
r=reversed(a.items())
for x in r:
	print(x)
	time.sleep(2)

#print('Elements  of  each   tuple  in  reverse  order')
#Write  for  loop  to  reverse   elements  of   each   tuple  of  dictionary
print('Keys  and  values  in   reverse   order')
r=reversed(a.items())
for keys,values in r:
	print(f'keys {keys}\t values {values}')
	time.sleep(2)
#Write  for  loop  to  print  each   key  and   the  corresponding  value  of  dictionary  in  reverse  order
#  Write  outputs  here

Keys  in   reverse   order
18
15
20
10

Values  in  reverse  order
Kiran
Rajesh
Sita
Rama rao

Rama rao
Tuples  in   reverse  order
(18, 'Kiran')
(15, 'Rajesh')
(20, 'Sita')
(10, 'Rama rao')

Keys  and  values  in   reverse   order
keys 18  values Kiran
keys 15  values Rajesh
keys 20  values Sita
keys 10  values Rama rao



# How  to  iterate   list_iterator  in  different  ways
import   time
list  =  [10  ,  20  ,  15  ,  18]
print('Iterate  list  with  for  loop')
#How  to  iterate  list  with  for  loop
#print(next(list))
list_itr = iter(list)
print(type(list_itr))
print(list_itr)
time.sleep(2)
print('Iterate  List_iterator  with  next()  function')
#How  to  iterate  list_iterator  with  next()  function
print(next(list_itr))
print(next(list_itr))
print(next(list_itr))
print(next(list_itr))
time.sleep(2)
print('Iterate  List_iterator  with   _next_()  method')
#How  to  iterate  list_iterator  with   _next_  method
list_itr = iter(list)
print(list_itr.__next__())
print(list_itr.__next__())
print(list_itr.__next__())
print(list_itr.__next__())
time.sleep(2)
print('Iterate  List_iterator  with   for    loop')
#How  to  iterate  list_iterator  with  for  loop
list_itr = iter(list)
for x in list_itr:
	print(x)
	time.sleep(2)
#print('Unpacks  List_iterator  with  *  operator  : 
list_itr = iter(list)
print(*list_itr)

'''
#How  to  iterate  zip  object  in  differenet  ways  (Home  work)
import   time
a = ['Telangana' , 'Andhra Pradesh' , 'Karnataka ', 'Tamilnadu']
b = ['Hyderabad' , 'Amaravathi' , 'Bangalore', 'Chennai']
z = zip(a,b)
print(type(z))
print(z)
print()
print('Iterate  zip  object  with   next()   function')
#How  to   iterate  zip  object  with  next  function
print(next (z))
print(next (z))
print(next (z))
print(next (z))
print()

print('Iterate  zip  object  with  next  method')
#How  to   iterate  zip  object  with  next  method
z = zip(a,b)
print(z.__next__())
print(z.__next__())
print(z.__next__())
print(z.__next__())
print()
print('Iterate  zip  object  with   for  loop')
#How  to   iterate  zip  object  with  for  loop
z = zip(a,b)
for x in z:
	print(x)
print()
print('Iterate  elements  of  each  tuple  in  zip  object')
#How  to   iterate  elements  of  each  tuple  of  zip  object  with  for  loop
z = zip(a,b)
for x in z:
	print(*x)
z=zip(a,b)
print('Unpacks  zip  object  with   *  operator  :  ' , *z)
print()
z=zip(a,b)
d=list(z)
print('zip   object  in  the  form  of   list  :  ' ,  d)
print()
z=zip(a,b)
c=dict(z)
print('zip   object  in  the  form  of   dictionary :  ' ,  c)


 outputs ...
<class 'zip'>
<zip object at 0x00000263F6A6FE80>

Iterate  zip  object  with   next()   function
('Telangana', 'Hyderabad')
('Andhra Pradesh', 'Amaravathi')
('Karnataka ', 'Bangalore')
('Tamilnadu', 'Chennai')

Iterate  zip  object  with  next  method
('Telangana', 'Hyderabad')
('Andhra Pradesh', 'Amaravathi')
('Karnataka ', 'Bangalore')
('Tamilnadu', 'Chennai')

Iterate  zip  object  with   for  loop
('Telangana', 'Hyderabad')
('Andhra Pradesh', 'Amaravathi')
('Karnataka ', 'Bangalore')
('Tamilnadu', 'Chennai')

Iterate  elements  of  each  tuple  in  zip  object
Telangana Hyderabad
Andhra Pradesh Amaravathi
Karnataka  Bangalore
Tamilnadu Chennai
Unpacks  zip  object  with   *  operator  :   ('Telangana', 'Hyderabad') ('Andhra Pradesh', 'Amaravathi') ('Karnataka ', 'Bangalore') ('Tamilnadu', 'Chennai')

zip   object  in  the  form  of   list  :   [('Telangana', 'Hyderabad'), ('Andhra Pradesh', 'Amaravathi'), ('Karnataka ', 'Bangalore'), ('Tamilnadu', 'Chennai')]

zip   object  in  the  form  of   dictionary :   {'Telangana': 'Hyderabad', 'Andhra Pradesh': 'Amaravathi', 'Karnataka ': 'Bangalore', 'Tamilnadu': 'Chennai'}
