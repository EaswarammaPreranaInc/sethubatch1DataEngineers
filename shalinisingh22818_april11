#program1
# Public  and  Private  members  demo  program
class  Test:
	def  __init__(self):
		self.x =10 #How  to  initialize  public  variable  'x'  to  10
		self.__y =20 #How  to  initialize  private  variable  'y'  to  20
	def  m1(self):
		print('m1  method')
		print(self.x)#How  to  print   variable  'x'
		print(self.__y)#How  to  print  private  variable  'y'
		t.__m2()#How  to  call    private  method   m2()
		print('Back to m1 method')
	def  __m2(self):
		print('__m2  method')
		print(self.x)#How  to  print   variable  'x'
		print(self.__y)#How  to  print  private  variable   'y'
# End  of  the  class
t = Test()
print('Outside')
print(t.x)#How  to  print  variable  'x'
#print(t . __y)	#How  to  print   variable  'y'	#attribute error
print(t . __dict__)
t.m1()#How  to  call  method  m1()
#t . __m2()#How  to  call   method  m2()  #m2 attribute error
print('End')

output
Outside
10
{'x': 10, '_Test__y': 20}
m1  method
10
20
__m2  method
10
20
Back to m1 method
End



#program 2
#  Find  outputs
class  c1:
	def __init__(self):
		self.x=10 #How  to  initialize  public  variable  'x'  with  10
		self.__x=20 # How  to  initialize  private  variable  'x'  with  20
		self.__x=30 #How  to  initialize  public  dunder  variable  'x'  with  30
	def  m1(self):
		print('public method')
	def  __m1(self):
		print('private method')
	def  __m1__(self):
		print('public Dunder method')
#  End  of  the  class
a = c1()
print(a.x) #How  to  print   variable  'x'
#print(a.__x__) #How  to  print  public  dunder  variable  'x'
print(a._c1__x) #How  to  print   private  variable  'x'
#print(a . __x) #  Error  :  Not  visible  outside  the  class
a.m1() #How  to  call  public  method  m1()
a.__m1__() #How  to  call  public  dunder  method  m1()
a . __m1__
a . m1
a._c1__m1() #How  to  call  private  method  m1()
#a . __m1() #error  :  Not  visible  outside  the  class

output
10
30
public method
public Dunder method
private method


#program 3
#  Find  outputs

Find  outputs
Assume  that  addresses  of  objects   'a' , 'b' , 'c' , 'd'  and  'e'  are  1000 , 2000 , 3000 , 4000  and  5000  respectively

class   c1:
	def   __init__(self):
		print('Object  is  created  at  address  :  ' , id(self))
	def   __del__(self):
		print(F'Object  at  address  {id(self)}  is  lost')
# End    of    the    class
a = c1()
a = None
b = c1()
del    b
c = c1()
c = c1()
d = c1()
e = c1()
output
Object  is  created  at  address  :   1508210010704
Object  at  address  1508210010704  is  lost
Object  is  created  at  address  :   1508212640656
Object  at  address  1508212640656  is  lost
Object  is  created  at  address  :   1508212640656
Object  is  created  at  address  :   1508210485120
Object  at  address  1508212640656  is  lost
Object  is  created  at  address  :   1508210485424
Object  is  created  at  address  :   1508210211248
Object  at  address  1508210485120  is  lost
Object  at  address  1508210485424  is  lost
Object  at  address  1508210211248  is  lost


#proram 4
# Identify  Error (Home  work)
class   c1:
	def  __del__(self , x):
		print('destructor')
a = c1()
a . __del__(25)

output
destructor
Exception ignored in: <function c1.__del__ at 0x0000012FAB9D3E20>
TypeError: c1.__del__() missing 1 required positional argument: 'x'




#program 5
# Find  outputs (Home  work)
class   c1:
	def  __del__(self):
			print('destructor')  #infinite number of times
			b = c1()
a = c1()


#program 6
# Find  outputs (Home  work)
class   c1:
	def  __init__(self):
		print('constructor')
		del  self
	def  __del__(self):
		print('destructor')
		b = c1()
a = c1()

output:
constructor
destructor infinite times



#program 7
#  Find  outputs( Home  work)
class   c1:
	def  __del__(self):
		print('1st  destructor')
	def  __del__(self):
		print('2nd  destructor')
	def  __del__(self):
		print('3rd  destructor')
# End  of  the  class
a = c1()

output
3rd  destructor


#program 8
#Find  outputs (Home  work)
class   c1:
	def   __init__(self):
		print('Object  is  created  at  address  :  ' , id(self))
	def   __del__(self):
		print(F'Object  at  address  {id(self)}  is  lost  ')
#end  of  the  class
c = b = a = c1()
del   a
print('Hello')
del   b
print('Hi')
del   c
print('Bye')
d = c1()
print('End')

output
Object  is  created  at  address  :   2201056340896
Hello
Hi
Object  at  address  2201056340896  is  lost
Bye
Object  is  created  at  address  :   2201059101264
End
Object  at  address  2201059101264  is  lost



#program 9
# Find  outputs(Home  work)
class  c1:
        def     __init__(self):
                print('Object  is  created  at  address  :  ' , id(self))
        def     __del__(self):
                print(F'Object  at  address  {id(self)}  is  lost ')
#End of the class
list = [c1() , c1() , c1()]
del  list


output
Object  is  created  at  address  :   1703907256912
Object  is  created  at  address  :   1703909886544
Object  is  created  at  address  :   1703909886864
Object  at  address  1703909886864  is  lost
Object  at  address  1703909886544  is  lost
Object  at  address  1703907256912  is  lost



#program 10
# Find  outputs  (Home  work)
class   c1:
	def  __del__(self):
		print('destructor')
		return  25
a = c1()
print(a . __del__())
print('Hello')
del   a

output
destructor
25
Hello
destructor
