#3/5/2025 

#1.Find  outputs  (Home  work)

'''
try:
	print('try') #1. try
	print(7 / 0) 
except:
	print('except') #2. except
else:
	print('else')
finally:
	print('finally') #3. finally
print('End') #4. End

'''


#2.Find  outputs  (Home  work)

'''
try:
	print('try') #1. try
except:
	print('except') 
else:
	print('else') #2. else 
finally:
	print('finally') #3. finally
print('End') #4. End

'''


#3. Identify   error   (Home  work)

'''
try:
	print('try') 
else:
    print('else') #Error else without except
finally:
    print('finally') 
print('End') 

'''


#4. Identify  error   (Home  work)

'''
try:
	print('try') 
except:
	print('except')
else:
	print('else1')
else:
	print('else2') #only one else
finally:
	print('finally')
print('end')

'''


#5. Identify  error   (Home  work)

'''
try:
	print('try')
else:
	print('else') #except follows try
except:
	print('except')
finally:
	print('finally')
print('end')

'''

#6.Find  outputs   (Home  work)

'''
try:
	print('try') #1. try
except:
	print('except')
if   10 > 20:
	print('if')
else:
	print('else') #2. else
	
'''


#7. Find  outputs

'''
def   f1():
	try:
		return  10
	except:
		return  20
	else:
		return  30
print(f1()) #10

'''


#8. Find  outputs

'''
def   f1():
	try:
		return  10 + '20'
	except:
		return  20
	else:
		return  30
print(f1()) #20

'''

#9.Find  outputs

'''
def   f1():
	try:
		pass
	except:
		return  20
	else:
		return  30
print(f1()) #30

'''

#10.Find  outputs

'''
def   f1():
	try:
		return  10
	except:
		return   20
	else:
		return  30
	finally:
		return  40
print(f1()) #40

'''


'''  
#11. (Home  work)
1) What  is  the  output  if  input  is  24 ?  ---> Hyd End

2) What  is  the  output  if  input  is  25 ?  ---> Sec End
'''

'''
try:
	x = eval(input('Enter  any  number  :  '))
	assert    x >= 25 ,  'Hyd'
	print('Sec') #3. Sec
except  AssertionError  as   msg:
	print(msg) #1. Hyd
print('End') #2.End #4. End

'''



''' 
#12.(Home  work)
1) What  is  the  output  when  input  is  24 ?  --->

2) What  is  the  output  when  input  is  25 ?  --->
'''

'''
try:
	x = eval(input('Enter  any  number  :  '))
	assert   x >= 25
	print('Sec') #3. Sec
except  AssertionError   as    msg:
	print(msg) #1.blank 
print('End') #2.End #4. End

'''


#13. Find  outputs   (Home  work)

'''
try:
	print('Outer   try') #1. Outer try
	try:
		print('Inner    try') #2. Inner try
		print(7 / 0)
		int('Hyd')
		'Hyd'[5]
		eval('Hyd')
	except   ZeroDivisionError:
		print('ZDE   of   inner   try') #3. ZDE   of   inner   try
		int('Ten')
	except  ValueError:
		print('ValueError  of  inner  try')
	finally:
		print('Inner  try  finally') #4. Inner try finally 
	print('End  of  inner  try')
except   ValueError:
	print('ValueError  of  outer  try') #5. ValueError  of  outer  try
except   IndexError:
	print('IndexError  of  outer  try')
except:
	print('default  except  of  outer  try') 
finally:
	print('Outer  try  finally') #6. Outer  try  finally
print('End  of  outer  try') #7. End  of  outer  try

'''


#14. Find outputs   (Home  work)

'''
try:
	print('Outer  try') #1. Outer  try
	try:
		print('Inner  try') #2. Inner  try
		int('Hyd')
		'Hyd'[5]
		eval('Hyd')
	except  ZeroDivisionError:
		print('ZDE  of  inner  try')
		int('Ten')
	except  ValueError:
		print('ValueError  of  inner  try ') #3. ValueError  of  inner  try
	finally:
		print('Inner  try  finally') #4. Inner  try  finally
	print('End  of  inner  try') #5. End  of  inner  try
except  ValueError:
	print('ValueError  of  outer try')
except  IndexError:
	print('IndexError of outer try')
except:
	print('default except of outer try')
finally:
	print('Outer try finally') #6. Outer try finally
print('End of outer try') #7. End of outer try

'''


#15. Find outputs   (Home  work)

'''
try:
	print('Outer  try') #1. Outer  try
	try:
		print('Inner  try') #2. Inner  try
		'Hyd'[3]
		eval('Hyd')
	except  ZeroDivisionError:
		print('ZDE  of  inner  try')
		int('Ten')
	except  ValueError:
		print('ValueError  of  inner  try ')
	finally:
		print('Inner  try  finally') #3. Inner  try  finally
	print('End  of  inner  try')
except  ValueError:
	print('ValueError  of  outer  try')
except  IndexError:
	print('IndexError  of  outer  try') #4. IndexError  of  outer  try
except:
	print('default except of outer try')
finally:
	print('Outer try finally') #5. Outer try finally
print('End  of  outer  try') #6. End  of  outer  try

'''


#16. Find  outputs (Home  work)

'''
try:
	print('Outer  try') #1. Outer try
	try:
		print('Inner  try') #2. Inner try
		eval('Hyd')
	except  ZeroDivisionError:
		print('ZDE  of  inner  try')
		int('Ten')
	except ValueError:
		print('ValueError  of   inner  try ')
	finally:
		print('Inner  try  finally') #3. Inner  try  finally
	print('End of inner try')
except  ValueError:
	print('ValueError  of  outer try')
except  IndexError:
	print('IndexError of outer try')
except:
	print('default  except  of  outer  try') #4. default  except  of  outer  try
finally:
	print('Outer  try  finally') #5. Outer  try  finally
print('End  of  outer  try') #6. End  of  outer  try

'''


#17. Find  outputs (Home  work)

'''
try:
	print('Outer  try') #1. Outer try 
	try:
		print('Inner  try') #2. Inner try 
		print(10 + '20')
	except  ZeroDivisionError:
		print('ZDE  of  inner  try')
		int('Ten')
	except ValueError:
		print('ValueError  of   inner  try ')
	finally:
		print('Inner  try  finally') #3. Inner  try  finally
	print('End of inner try')
except  ValueError:
	print('ValueError  of  outer try')
except  IndexError:
	print('IndexError of outer try')
finally:
	print('Outer  try  finally') #4. Outer  try  finally 
print('End  of  outer  try') # TypeError reported 

'''


#18.Find  outputs   (Home  work)

'''
class   MyError(BaseException):
	def __init__(self , y):
		self . a = y
		print('Constructor')
# End of  the class
def  compute(x):
	print(x)
	if  x > 20:
		raise   MyError(x)
	print('Hello')
# End of  the functrion
try:
	compute(10) #1. 10 #2. Hello
	compute(30) #3. 30 #4. Constructor
except  MyError  as  msg:
	print('Caught  MyError  outside  :  ' ,  msg) #5. Caught  MyError  outside  :  30
print('End') #6. End

'''


#19.Find  outputs   (Home  work)

'''
class   MyError(NameError):
	def    __init__(self):
		self . a =  25
		print('Constructor')
# End of  the class
def  compute(x):
	print(x) 
	if  x > 20:
		raise   MyError()
	print('Hello')
#end of  the functrion
try: 
	compute(30) #1. 30 #2. Constructor
	compute(10)
except  MyError  as  msg:
	print('Caught  MyError  outside  :  ' ,  msg) #3. Caught  MyError  outside  :
print('End') #4. End

'''


#20.Find  outputs (Home  work)

'''
try:
	print(1) #1
	print(2) #2
	print(3) #3
except:
	print(4)
else:
	print(5) #5
finally:
	print(6) #6
print(7) #7

'''


#21.Find  outputs   (Home  work)

'''
try:
	print(1) #1
	print(7 / 0)
	print(3)
except:
	print(4) #4
else:
	print(5)
finally:
	print(6) #6
print(7) #7

'''


#22.Find  outputs   (Home  work)

'''
try:
	print(1) #1
	print(7 / 0)
	print(3)
except:
	int('Two')
else:
    print(5)
finally:
        print(6) #6 
print(7) #ValueError reported

'''


#23.Find  outputs (Home  work)

'''
from  threading  import  Thread
def    f1():
	for  i  in  range(10):
		print('child  thread')
child = Thread(target = f1)
f1() #child thread 10 times 
for  i  in  range(10):
        print('main  thread') #main thread 10 times
        
'''


#24.Find  outputs  (Home  work)

'''
from  threading  import   Thread
def  f1():
    for  i  in  range(10) :
        print('child  thread')
child = Thread(target =  f1())
child . start() #child  thread 10 times by main thread
for  i  in  range(10):
        print('main  thread') #main thread 10 times by main thread
        
'''

#25.Find  outputs  (Home  work)

'''
from  threading  import  *
def   f1():
    for  i  in  range(10):
        print('child  thread')
child = Thread()
child . start()
for  i   in   range(10):
    print('main  thread') #10 times main thread 
    
'''

#26.Find  outputs (Home  work)

'''
from  threading  import  Thread
def    f1():
    for  i  in  range(10):
        print('Child  Thread')
child = Thread(target = f1)
child . start() #Child Thread 10 times by CT
for  i  in  range(10):
        print('Main  Thread') #Main Thread 10 times by MT
#child . start() #error

'''
