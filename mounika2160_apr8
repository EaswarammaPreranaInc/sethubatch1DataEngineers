#program 1
'''
Repeat  prog5a  such  that  methods  are  called  in  another  way

1) What  are  the  two  ways  to  call  a  method ?  --->  object . method()  and  classname . method(object)

2) Import  and   use  triangle  class  defined  in  prog5a  but  do  not   define  triangle  class  again'''

from triangle import triangle
t=triangle() 
t.get()
triangle.get(t)
t.test()
triangle.test(t)
#How  to  create  triangle  object
#How  to  call  get()  method  in  another  way
#How  to  call  test()  method  in  another  way
print('Area : ', triangle.area(t)  ) #How  to  call  area()  method  in  another  way
print('Perimeter: ', triangle.peri(t) ) #How  to  call  peri()  method  in  another  way  

#output
Enter side a: 4
Enter side b: 5
Enter side c: 7
Area: 9.797958971132712
Perimeter: 16

#______________________________________________________________________________________________________________________________________

#program 2
Write  a  program  to  determine  total , average  and  grade  of  a  student
Inputs  are  Roll Number , Stud  Name , Marks  of  3  subjects  and  Gender

class   Student:
	def   get(self):
		self.rollnum=int(input("Enter Roll Number    : "))
		self.stu_name=input("Enter student name   : ")
		self.gender=input("Enter gender name    : ")
		self.marks=[]
		for i in range(3):
			self.marks.append(eval(input("Enter list of marks  : ")))
	def   compute(self):
		self.total=sum(self.marks)
		self.average=self.total/len(self.marks)
		if  min(self.marks)<40:
			     self.grade="Fail"
		elif  self.average>=70:
				 self.grade='Distinction'
		elif  self.average>= 60:
				 self.grade='First  class'
		elif  self.average>= 50:
				 self.grade='Second  class'
		else:
			     self.grade='Third  class'
	def  disp(self):
		print('Roll  Number   :  ' ,self.rollnum)
		print('Student  Name  :  ' ,self.stu_name)
		print('Gender         :  ' ,self.gender)
		print('Total  Marks   :  ' ,self.total)
		print('Average        :  ' ,self.average)
		print('Grade          :  ' ,self.grade)
	def   __str__(self):
		return  f'Roll Number: {self.rollnum},Student Name: {self.stu_name},Gender : {self.gender},Total Marks: {self.total},TotalMarks: {self.total},Average: {self.average},Grade: {self.grade}'
if __name__=="__main__":
		obj=Student()
		obj.get()
		obj.compute()
		obj.disp()
		print(obj)

#output:
Enter Roll Number    : 1
Enter student name   : shalini
Enter gender name    : f
Enter list of marks  : 99
Enter list of marks  : 65
Enter list of marks  : 87
Roll  Number   :   1
Student  Name  :   shalini
Gender         :   f
Total  Marks   :   251
Average        :   83.66666666666667
Grade          :   Distinction
Roll Number: 1,Student Name: shalini,Gender : f,Total Marks: 251,TotalMarks: 251,Average: 83.66666666666667,Grade: Distinction 

#______________________________________________________________________________________________________________________________________

#program 3
Write  a  program  to  add , subtract , multiply  and  divide  two  rational  numbers

1) 1st  rational  number  --->  2 / 3
    2nd  rational  number  --->   5 / 9
    What  is  the  sum  ?  --->  2 / 3 + 5 / 9 = (18 + 15) / 27 =  33 / 27 =  11 / 9
    What  is  the  difference  ?  --->  2 / 3 - 5 / 9 =  (18 - 15) / 27 =  3 / 27 =  1 / 9
    What  is  the  product  ?  --->	2 / 3 * 5 / 9 =  10 / 27  =  10 / 27
    What  is   the  division  ?  --->  2 / 3 /  5 / 9 =  2 / 3 * 9 / 5 =  18 / 15 =  6 / 5  --->  Succesful  division

2) 1st  rational  number  --->  2 / 3
    2nd  rational  number  --->   0 / 9
    What  is  the  sum  ?  --->  2 / 3 + 0 / 9 =  (18 + 0) / 27 =  18 / 27 =  2 / 3
    What  is  the  difference  ?  --->  2 / 3 - 0 / 9 =  (18 - 0) / 27 =  18 / 27 = 2 / 3
    What  is  the  product  ?  --->  2 / 3 * 0 / 9 =  0 / 27  --->  Simplification  is  not  required  becoz  numerator  is  0
    What  is   the  division  ?  --->  2 / 3 /  0 / 9 =  2 / 3 * 9 / 0 =  18 / 0  ---> Division  is  not   permitted

3) When  is  simplification  required ?  --->  When  numerator  is  non-zero

import  math
class  Rat:
	def  get(self):
		self.nr=int(input("Enter a number: "))
		#How  to  read  numerator  into  object  self
		#How  to  read  denominator  into  object  self
		self.dr=int(input("Enter a denominator: "))
		#How  to  call  test()  method
		self.test()
	def  test(self):
		while self.dr==0:
			self.dr=int(input("Denominator cant be zero reenter : "))
		#Ask  user  to  reenter  denom  when  denom  is  zero
	def    __str__(self):
		return (f' {self.nr} / {self.dr}')
			 #return  values  of  object  in  the  form  of  rational  number  such   as  '2 / 3'
	def   add(self , a , b):
		self.nr=a.nr *b.dr+a.dr*b.nr
		self.dr=a.dr*b.dr
		self.simplify()

#How  to  add  objects  'a'  and  'b' and  store  results  in  object  self
#How  to  simplify  object  self
	
	c . add(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  c  --->  2 / 3 + 5 / 9 = (2 * 9 + 5 * 3) / (5 * 9) = 33 / 27 = 11 / 9
	
	def   sub(self , a , b):
		self.nr=a.nr *b.dr-a.dr*b.nr
		self.dr=a.dr*b.dr
		self.simplify()
		#How  to  subtract  objects  'a'  and  'b' and  store  results  in  object  self
		#How  to  simplify  object  self
	
	d . sub(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  d  --->  2 / 3 - 5 / 9 = (2 * 9 - 5 * 3) / (5 * 9) = 3 / 27 = 1 / 9
	
	def   mul(self , a , b):
		self.nr=a.nr*b.nr
		self.dr=a.dr*b.dr
		self.simplify()
		#How  to  multiply  objects  'a'  and  'b' and  store  results  in  object  self
		#How  to  simplify  object  self
	
	e . mul(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  e  --->  2 / 3 * 5 / 9 = (2 * 5) / (3 * 9) = 10 / 27
	
	def    div(self , a , b):
		self.nr=a.nr*b.dr
		self.dr=a.dr*b.nr
		self.simplify()
		#How  to  divide  objects  'a'  and  'b' and  store  results  in  object  self
		#How  to  simplify  object  self
	
	f . div(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  f  --->  2 / 3 / 5 / 9 = 2 / 3 * 9 / 5 = (2 * 9) / (3 * 5) = 18 / 15 = 6 / 5
	
	def   simplify(self):
		if self.nr !=0:
			ans=math.gcd(self.nr,self.dr)
			self.nr=self.nr//ans
			self.dr=self.dr//ans
			#How  to  find  gcd  of  numerator  and   denominator
			#How  to  simplify  rational  number  in  object  self  i.e.  12 / 15  should  be  simplified  to  4 / 5
	
	c . simplify()
	1)  12 / 15  --->  4 / 5
	2) 10 / 27   --->  10 / 27
	3) 0 / 27  --->   0 / 27
	
# End  of the class
if __name__=='__main__':
	a= Rat()
	b=Rat()
	c=Rat()
	d=Rat()
	e=Rat()
	f=Rat()
	#How  to  create  6  objects  a , b , c , d , e , f
	#How  to  read  rational  number  into  object  'a'
	a.get()
	#How to  read  rational  number  into  object  'b'
	b.get()
	c.add(a,b)
	#How  to  add  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'c'
	d.sub(a,b)
	#How  to  subtract  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'd'
	#How  to multiply  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'e'
	e.mul(a,b)
	f.div(a,b)
	#How  to  divide  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'f'
	#How  to  print  object   'c'
	#How  to  print  object   'd'
	#How  to  print  object   'e'
	print(c)
	print(d)
	print(e)
	if  b.nr !=0:
		#How  to  print  object  'f
		print(f)
	else:
		print('Division  is  not  permitted')

#______________________________________________________________________________________________________________________________________

#program 4
#  dir()  function  demo  program  

from april8  import  Rat
a = Rat()
a . nr = 22
a . dr = 7
print(dir(Rat)) # all memebers of rat class along with environmnet variables
print()
print()
print(dir(a)) # also nr and dr are included 

#______________________________________________________________________________________________________________________________________

#program 5
#  Find  outputs  
class      Rat:
	def    m1():
		pass
# End  of  the  class
a = Rat()
a . nr = 22
print(hasattr(a , 'nr')) # True 
print(hasattr(a , 'dr')) # False 
print(hasattr(a , 'm1')) # True 
print(hasattr(a , 'm2')) #False
print(hasattr(Rat , 'm1')) # True
print(hasattr(Rat , 'm2')) #False
print(hasattr(Rat , 'nr')) #False Class Rat doesnot contain objects it will only have methods .

#______________________________________________________________________________________________________________________________________

#program 6
# Find  outputs  
class  Cat:
	def  talk(self):
		print('Meow Meow Meow ....')
class  Dog:
	def  bark(self):
		print('Bhow Bhow Bhow ....')
class  Goat:
	def  talk(self):
		print('Mehar  Mehar  Mehar  ....')
#end of the class
a = [Cat() , Dog() , Goat()]
for  x  in   a:
	if   hasattr(x , 'talk'):
		x . talk()
	else:
		x . bark()
		
#output
Meow Meow Meow ....
Bhow Bhow Bhow ....
Mehar  Mehar  Mehar  .... 

#______________________________________________________________________________________________________________________________________

#program 7
#  Find  outputs  
class    c1:
        pass
# End of the class
a = c1() # object created 
a . x = 10 # instance variable 
varname = input('Enter  variable  name  to  be  added  to  object  :  ')   #  Assume  that  input  is  'y'
value = eval(input('Enter  value  of  the  variable  :  '))   #  Assume  that  input  is   20
setattr(a , varname , value)
print(a . __dict__) #{x:10,y:20}
print(a . x) # 10
while  True:
	try:
		varname = input('Enter  variable  name  whose  value  is  to  be  retrieved  :  ')
									#  Assume  that  input  is  x  in  1st   iteration  ,  y  in   2nd   iteration  and  z  in  3rd  iteration
		print(getattr(a , varname)) # 10 20 
	except:
		print(F'Invalid  variable   name   :  {varname}') # Invalid .. z
		break 

#output
Enter  variable  name  to  be  added  to  object  :  y
Enter  value  of  the  variable  :  20
{'x': 10, 'y': 20}
10
Enter  variable  name  whose  value  is  to  be  retrieved  :  x
10
Enter  variable  name  whose  value  is  to  be  retrieved  :  y
20
Enter  variable  name  whose  value  is  to  be  retrieved  :  z
Invalid  variable   name   :  z

#______________________________________________________________________________________________________________________________________

#program 8
Write  a  program  to  convert  a  dictionary  {'Empno' : 25 , 'Ename' : 'Rama  Rao' , 'Sal' : 10000.0}  to  Emp  class  object
i.e.  object  should  contain  empno = 25 , ename = 'Rama  Rao' , Sal = 10000.0
Hint:  Use  setattr()  and  getattr()  functions

class  Emp:
        pass
#End  of  the  class
dict = {'Empno' : 25 , 'Ename' : 'Rama  Rao' , 'Sal' : 10000.0}
#How  to  convert  dictionary  to  object  'e'  with  for  loop
#How  to  print  object  'e'  with  for  loop
e=Emp()

for x,y in dict.items():
	e.x=y
	print(e.x) 
for x,y in dict.items():
	setattr(e,x,y)
for x in dict:	print(x,getattr(e,x),sep='...')

#output
25
Rama  Rao
10000.0
Empno...25
Ename...Rama  Rao
Sal...10000.0

