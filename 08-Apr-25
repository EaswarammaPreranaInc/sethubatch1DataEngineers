'''
Repeat  prog5a  such  that  methods  are  called  in  another  way

1) What  are  the  two  ways  to  call  a  method ?  --->  object . method()  and  classname . method(object)

2) Import  and   use  triangle  class  defined  in  prog5a  but  do  not   define  triangle  class  again
'''
'''from 07-Apr-25 import triangle
a=triangle() #How  to  create  triangle  object
triangle.get(a) #How  to  call  get()  method  in  another  way
triangle.test(a) #How  to  call  test()  method  in  another  way
print('Area : ', triangle.area(a)) # How  to  call  area()  method  in  another  way)
print('Perimeter: ', triangle.peri(a)) #  How  to  call  peri()  method  in  another  way)

output:
enter a side A:3
enter a side B:4
enter a side C:5
Area :  6.0
Perimeter :  12 '''


'''
Write  a  program  to  determine  total , average  and  grade  of  a  student
Inputs  are  Roll Number , Stud  Name , Marks  of  3  subjects  and  Gender '''
'''
class   Student:
	def   get(self):
		self.rollnumber=input("enter a roll number:") #How  to  read  roll  number  into  object  self
		self.studentname=input("enter a student name:") #How  to  read  student  name  into  object  self
		self.gender=input("enter a gender (m/f):") #How  to  read  gender  into  object  self
		self.marks=[]
		for i in range(3):
			marks=int(input(f'enter marks of subject{i+1}:'))
			self.marks.append(marks)# How  to  read  marks  of  3  subjects
	def   compute(self):
		self.total=sum(self.marks) #How  to  calculate  total  marks
		self.average=self.total/3 #How  to  calculate  average  marks
		if min(self.marks)<40: # At  least  one  subject  is  below  40:
				self.grade='Fail' #How  to  initilaize  grade  to  'Fail'
		elif  self.average >= 70:
				self.grade='Distinction' #How  to  initilaize  grade  to  'Distinction'
		elif  self.average>= 60:
				self.grade='First  class' #How  to  initilaize  grade  to  'First  class'
		elif  self.average>= 50:
				self.grade='Second  class' #How  to  initilaize  grade  to  'Second  class'
		else:
				self.grade='Third  class' #How  to  initilaize  grade  to  'Third  class'
	def  disp(self):
		print('Roll  Number:',self.rollnumber)
		print('Student  Name:',self.studentname)
		print('Gender:',self.gender)
		print('Total  Marks:',self.total)
		print('Average:',self.average)
		print('Grade:',self.grade)
	def   __str__(self):
		return  f"{self.rollnumber}\t{self.studentname}\t{self.gender}\t{self.total}\t{self.average}\t{self.grade}" #All  the   values  of  object  self  in  the  form  of  string
#End  of  the  class
a= Student() #How  to  create  Student  class  object
a.get() #How  to  read  inputs  into  object
a.compute() #How  to  store  results  in  object
a.disp() #How  to  print  object  with  disp()  method
print(a)#How  to  print  object  with  __str__()  method  

output:
enter a roll number:1001
enter a student name:d
enter a gender (m/f):m
enter marks of subject1:56
enter marks of subject2:77
enter marks of subject3:98
Roll  Number: 1001
Student  Name: d
Gender: m
Total  Marks: 231
Average: 77.0
Grade: Distinction
1001    d       m       231     77.0    Distinction '''

'''
Write  a  program  to  add , subtract , multiply  and  divide  two  rational  numbers

1) 1st  rational  number  --->  2 / 3
    2nd  rational  number  --->   5 / 9
    What  is  the  sum  ?  --->  2 / 3 + 5 / 9 = (18 + 15) / 27 =  33 / 27 =  11 / 9
    What  is  the  difference  ?  --->  2 / 3 - 5 / 9 =  (18 - 15) / 27 =  3 / 27 =  1 / 9
    What  is  the  product  ?  --->	2 / 3 * 5 / 9 =  10 / 27  =  10 / 27
    What  is   the  division  ?  --->  2 / 3 /  5 / 9 =  2 / 3 * 9 / 5 =  18 / 15 =  6 / 5  --->  Succesful  division

2) 1st  rational  number  --->  2 / 3
    2nd  rational  number  --->   0 / 9
    What  is  the  sum  ?  --->  2 / 3 + 0 / 9 =  (18 + 0) / 27 =  18 / 27 =  2 / 3
    What  is  the  difference  ?  --->  2 / 3 - 0 / 9 =  (18 - 0) / 27 =  18 / 27 = 2 / 3
    What  is  the  product  ?  --->  2 / 3 * 0 / 9 =  0 / 27  --->  Simplification  is  not  required  becoz  numerator  is  0
    What  is   the  division  ?  --->  2 / 3 /  0 / 9 =  2 / 3 * 9 / 0 =  18 / 0  ---> Division  is  not   permitted

3) When  is  simplification  required ?  --->  When  numerator  is  non-zero
'''
'''import  math
class  Rat:
	def  get(self):
		self.nr=int(input("enter numerator:")) #How  to  read  numerator  into  object  self
		self.dr=int(input("enter denominator:")) #How  to  read  denominator  into  object  self
		self.test() #How  to  call  test()  method
	def  test(self):
		while self.dr==0: #Ask  user  to  reenter  denom  when  denom  is  zero
			self.dr=int(input("denom can not be zero,re-enter:"))
	def    __str__(self):
			 return  f'{self.nr}/{self.dr}' # values  of  object  in  the  form  of  rational  number  such   as  '2 / 3'
	def   add(self , a , b):
		self.nr=a.nr*b.dr+a.dr*b.nr #How  to  add  objects  'a'  and  'b' and  store  results  in  object  self
		self.dr=a.dr*b.dr  
		self.simplify()  #How  to  simplify  object  self
	
	c . add(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  c  --->  2 / 3 + 5 / 9 = (2 * 9 + 5 * 3) / (5 * 9) = 33 / 27 = 11 / 9
	
	def   sub(self , a , b):
		self.nr=a.nr*b.dr-a.dr*b.nr  #How  to  subtract  objects  'a'  and  'b' and  store  results  in  object  self
		self.dr=a.dr*b.dr  
		self.simplify()  #How  to  simplify  object  self
	
	d . sub(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  d  --->  2 / 3 - 5 / 9 = (2 * 9 - 5 * 3) / (5 * 9) = 3 / 27 = 1 / 9
	
	def   mul(self , a , b):
		self.nr=a.nr*b.nr #
		self.dr=a.dr*b.dr #How  to  multiply  objects  'a'  and  'b' and  store  results  in  object  self
		self.simplify() #How  to  simplify  object  self
	
	e . mul(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  e  --->  2 / 3 * 5 / 9 = (2 * 5) / (3 * 9) = 10 / 27
	
	def    div(self , a , b):
		self.nr=a.nr*b.dr #
		self.dr=a.dr*b.nr #How  to  divide  objects  'a'  and  'b' and  store  results  in  object  self
		self.simplify()  #How  to  simplify  object  self
	
	f . div(a , b)
	object  a  --->  2 / 3
	object  b  --->  5 / 9
	object  f  --->  2 / 3 / 5 / 9 = 2 / 3 * 9 / 5 = (2 * 9) / (3 * 5) = 18 / 15 = 6 / 5
	
	def   simplify(self):
		   
			ans=math.gcd(self.nr,self.dr) #How  to  find  gcd  of  numerator  and   denominator
			self.nr=self.nr//ans
			self.dr=self.dr//ans #How  to  simplify  rational  number  in  object  self  i.e.  12 / 15  should  be  simplified  to  4 / 5
	
	c . simplify()
	1)  12 / 15  --->  4 / 5
	2) 10 / 27   --->  10 / 27
	3) 0 / 27  --->   0 / 27
	
# End  of the class
a=Rat() #How  to  create  6  objects  a , b , c , d , e , f
b=Rat() 
c=Rat() 
d=Rat() 
e=Rat() 
f=Rat()
a.get()  #How  to  read  rational  number  into  object  'a'
b.get()  #How to  read  rational  number  into  object  'b'
c.add(a,b) #How  to  add  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'c'
d.sub(a,b) #How  to  subtract  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'd'
e.mul(a,b) #How  to multiply  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'e'
f.div(a,b) #How  to  divide  rational  numbers  in  objects  a  and  b  and  store  results  in  object  'f'
print("sum:",c)  #How  to  print  object   'c'
print("difference:",d) #How  to  print  object   'd'
print("product:",e)  #How  to  print  object   'e'
if  b.nr==0:
	print("division is not permitted") #How  to  print  object  'f
else:
	f.div(a,b)
	print('Division :',f)

OUTPUT:
	enter numerator:2
enter denominator:3
enter numerator:0
enter denominator:5
sum: 2/3
difference: 2/3
product: 0/1
division is not permitted '''

# Find  outputs  (Home  work)
'''class  Cat:
	def  talk(self):
		print('Meow Meow Meow ....')
class  Dog:
	def  bark(self):
		print('Bhow Bhow Bhow ....')
class  Goat:
	def  talk(self):
		print('Mehar  Mehar  Mehar  ....')
#end of the class
a = [Cat() , Dog() , Goat()]
for  x  in   a:
	if   hasattr(x , 'talk'):
		x . talk()
	else:
		x . bark()
output:
Meow Meow Meow ....
Bhow Bhow Bhow ....
Mehar  Mehar  Mehar  .... '''

#  Find  outputs  (Home  work)
'''class    c1:
        pass
# End of the class
a = c1()
a . x = 10
varname = input('Enter  variable  name  to  be  added  to  object  :  ')   #  Assume  that  input  is  'y'
value = eval(input('Enter  value  of  the  variable  :  '))   #  Assume  that  input  is   20
setattr(a , varname , value)
print(a . __dict__)
print(a . x) # 10
while  True:
	try:
		varname = input('Enter  variable  name  whose  value  is  to  be  retrieved  :  ')
									#  Assume  that  input  is  x  in  1st   iteration  ,  y  in   2nd   iteration  and  z  in  3rd  iteration
		print(getattr(a , varname))
	except:
		print(F'Invalid  variable   name   :  {varname}')
		break
OUTPUT:
Enter  variable  name  to  be  added  to  object  :  y
Enter  value  of  the  variable  :  20
{'x': 10, 'y': 20}
10
Enter  variable  name  whose  value  is  to  be  retrieved  :  x
10
Enter  variable  name  whose  value  is  to  be  retrieved  :  y
20
Enter  variable  name  whose  value  is  to  be  retrieved  :  z
Invalid  variable   name   :  z '''


'''
(Home  work)
Write  a  program  to  convert  a  dictionary  {'Empno' : 25 , 'Ename' : 'Rama  Rao' , 'Sal' : 10000.0}  to  Emp  class  object
i.e.  object  should  contain  empno = 25 , ename = 'Rama  Rao' , Sal = 10000.0

Hint:  Use  setattr()  and  getattr()  functions
'''
'''class  Emp:
        pass
#End  of  the  class
dict = {'Empno' : 25 , 'Ename' : 'Rama  Rao' , 'Sal' : 10000.0}
e=Emp() #How  to  convert  dictionary  to  object  'e'  with  for  loop
for key , value in dict . items():
	            setattr(e , key , value)
for key in dict . keys():
	     print(key , getattr(e,key),sep="....") #How  to  print  object  'e'  with  for  loop

output:
Empno....25
Ename....Rama  Rao
Sal....10000.0 '''
